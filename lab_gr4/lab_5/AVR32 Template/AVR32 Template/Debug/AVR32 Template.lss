
AVR32 Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000035d4  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80005600  80005600  00005a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000164  80005800  80005800  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80005964  80005964  00005d64  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         000005d0  00000008  80005968  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000006f0  000005d8  000005d8  00000000  2**2
                  ALLOC
  9 .heap         0000e338  00000cc8  00000cc8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  000065d8  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c38  00000000  00000000  00006608  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00001a24  00000000  00000000  00007240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00026d12  00000000  00000000  00008c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004c0e  00000000  00000000  0002f976  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000fdad  00000000  00000000  00034584  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001d78  00000000  00000000  00044334  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007f3c  00000000  00000000  000460ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00005222  00000000  00000000  0004dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0104b597  00000000  00000000  0005320a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001138  00000000  00000000  0109e7a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf f0 d0 	sub	pc,pc,-3888

Disassembly of section .text:

80002004 <board_init>:
#endif



void board_init (void)
{
80002004:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002006:	30 3b       	mov	r11,3
80002008:	32 3c       	mov	r12,35
8000200a:	c2 3c       	rcall	80002050 <gpio_configure_pin>
8000200c:	30 3b       	mov	r11,3
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	34 9c       	mov	r12,73
80002010:	c2 0c       	rcall	80002050 <gpio_configure_pin>
80002012:	30 3b       	mov	r11,3
80002014:	32 2c       	mov	r12,34
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	c1 dc       	rcall	80002050 <gpio_configure_pin>
80002018:	30 3b       	mov	r11,3
8000201a:	32 6c       	mov	r12,38
8000201c:	c1 ac       	rcall	80002050 <gpio_configure_pin>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 4b       	mov	r11,4
80002020:	32 1c       	mov	r12,33
80002022:	c1 7c       	rcall	80002050 <gpio_configure_pin>
80002024:	d8 02       	popm	pc

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
80002026:	d7 03       	nop

80002028 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80002028:	e0 68 50 ff 	mov	r8,20735
8000202c:	ea 18 02 25 	orh	r8,0x225
80002030:	10 3c       	cp.w	r12,r8
80002032:	e0 88 00 07 	brls	80002040 <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002036:	fe 68 14 00 	mov	r8,-125952
  u_avr32_flashc_fcr.FCR.fws = wait_state;
8000203a:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000203c:	70 09       	ld.w	r9,r8[0x0]
8000203e:	c0 58       	rjmp	80002048 <flashc_set_bus_freq+0x20>
80002040:	fe 68 14 00 	mov	r8,-125952
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002044:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002046:	70 09       	ld.w	r9,r8[0x0]
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002048:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000204c:	91 09       	st.w	r8[0x0],r9
8000204e:	5e fc       	retal	r12

80002050 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002050:	f8 08 16 05 	lsr	r8,r12,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002054:	16 9a       	mov	r10,r11

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002056:	a9 68       	lsl	r8,0x8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002058:	e2 1a 00 04 	andl	r10,0x4,COH

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000205c:	e0 28 f0 00 	sub	r8,61440
80002060:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002064:	58 0a       	cp.w	r10,0
80002066:	c0 70       	breq	80002074 <gpio_configure_pin+0x24>
            gpio_port->puers = 1 << (pin & 0x1F);
80002068:	30 1a       	mov	r10,1
8000206a:	f4 09 09 49 	lsl	r9,r10,r9
8000206e:	f1 49 00 74 	st.w	r8[116],r9
80002072:	c0 68       	rjmp	8000207e <gpio_configure_pin+0x2e>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80002074:	30 1a       	mov	r10,1
80002076:	f4 09 09 49 	lsl	r9,r10,r9
8000207a:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
8000207e:	ed bb 00 07 	bld	r11,0x7
80002082:	c2 21       	brne	800020c6 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
80002084:	16 99       	mov	r9,r11
80002086:	e2 19 01 80 	andl	r9,0x180,COH
8000208a:	c0 70       	breq	80002098 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000208c:	30 19       	mov	r9,1
8000208e:	f2 0c 09 49 	lsl	r9,r9,r12
80002092:	f1 49 00 a8 	st.w	r8[168],r9
80002096:	c0 a8       	rjmp	800020aa <gpio_configure_pin+0x5a>
                   gpio_port->imr1c = 1 << (pin & 0x1F);
            }
            else if (flags & GPIO_RISING)
80002098:	16 99       	mov	r9,r11
8000209a:	e2 19 02 80 	andl	r9,0x280,COH
8000209e:	c0 90       	breq	800020b0 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800020a0:	30 19       	mov	r9,1
800020a2:	f2 0c 09 49 	lsl	r9,r9,r12
800020a6:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800020aa:	f1 49 00 b8 	st.w	r8[184],r9
800020ae:	c0 c8       	rjmp	800020c6 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
800020b0:	16 99       	mov	r9,r11
800020b2:	e2 19 03 80 	andl	r9,0x380,COH
800020b6:	c0 80       	breq	800020c6 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800020b8:	30 19       	mov	r9,1
800020ba:	f2 0c 09 49 	lsl	r9,r9,r12
800020be:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800020c2:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800020c6:	ed bb 00 00 	bld	r11,0x0
800020ca:	c1 81       	brne	800020fa <gpio_configure_pin+0xaa>
            if (flags & GPIO_INIT_HIGH)
800020cc:	e2 1b 00 02 	andl	r11,0x2,COH
800020d0:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
800020d4:	58 0b       	cp.w	r11,0
800020d6:	c0 70       	breq	800020e4 <gpio_configure_pin+0x94>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800020d8:	30 1a       	mov	r10,1
800020da:	f4 09 09 49 	lsl	r9,r10,r9
800020de:	f1 49 00 54 	st.w	r8[84],r9
800020e2:	c0 68       	rjmp	800020ee <gpio_configure_pin+0x9e>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800020e4:	30 1a       	mov	r10,1
800020e6:	f4 09 09 49 	lsl	r9,r10,r9
800020ea:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800020ee:	30 19       	mov	r9,1
800020f0:	f2 0c 09 49 	lsl	r9,r9,r12
800020f4:	f1 49 00 44 	st.w	r8[68],r9
800020f8:	c0 68       	rjmp	80002104 <gpio_configure_pin+0xb4>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800020fa:	30 19       	mov	r9,1
800020fc:	f2 0c 09 49 	lsl	r9,r9,r12
80002100:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 4c 	lsl	r12,r9,r12
8000210a:	91 1c       	st.w	r8[0x4],r12
}
8000210c:	5e fc       	retal	r12

8000210e <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000210e:	f8 08 16 05 	lsr	r8,r12,0x5
80002112:	a9 68       	lsl	r8,0x8
80002114:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002118:	71 88       	ld.w	r8,r8[0x60]
8000211a:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000211e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002122:	5e fc       	retal	r12

80002124 <gpio_set_pin_high>:
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002124:	30 18       	mov	r8,1
80002126:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000212a:	a5 9c       	lsr	r12,0x5
8000212c:	a9 6c       	lsl	r12,0x8
8000212e:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002132:	f9 48 00 54 	st.w	r12[84],r8
}
80002136:	5e fc       	retal	r12

80002138 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002138:	30 18       	mov	r8,1
8000213a:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000213e:	a5 9c       	lsr	r12,0x5
80002140:	a9 6c       	lsl	r12,0x8
80002142:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002146:	f9 48 00 58 	st.w	r12[88],r8
}
8000214a:	5e fc       	retal	r12

8000214c <gpio_toggle_pin>:
}

void gpio_toggle_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000214c:	30 18       	mov	r8,1
8000214e:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_toggle_pin(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002152:	a5 9c       	lsr	r12,0x5
80002154:	a9 6c       	lsl	r12,0x8
80002156:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8000215a:	f9 48 00 5c 	st.w	r12[92],r8
}
8000215e:	5e fc       	retal	r12

80002160 <gpio_enable_pin_interrupt>:
int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002160:	30 1a       	mov	r10,1
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80002162:	f8 08 16 05 	lsr	r8,r12,0x5

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002166:	f4 0c 09 49 	lsl	r9,r10,r12
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
8000216a:	a9 68       	lsl	r8,0x8
8000216c:	e0 28 f0 00 	sub	r8,61440

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002170:	f1 49 00 c4 	st.w	r8[196],r9
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  
  // Configure the edge detector.
  switch (mode)
80002174:	14 3b       	cp.w	r11,r10
80002176:	c0 80       	breq	80002186 <gpio_enable_pin_interrupt+0x26>
80002178:	c0 43       	brcs	80002180 <gpio_enable_pin_interrupt+0x20>
8000217a:	58 2b       	cp.w	r11,2
8000217c:	c0 f1       	brne	8000219a <gpio_enable_pin_interrupt+0x3a>
8000217e:	c0 98       	rjmp	80002190 <gpio_enable_pin_interrupt+0x30>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80002180:	f1 49 00 a8 	st.w	r8[168],r9
80002184:	c0 38       	rjmp	8000218a <gpio_enable_pin_interrupt+0x2a>
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
80002186:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
8000218a:	f1 49 00 b8 	st.w	r8[184],r9
8000218e:	c0 78       	rjmp	8000219c <gpio_enable_pin_interrupt+0x3c>
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80002190:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
80002194:	f1 49 00 b4 	st.w	r8[180],r9
80002198:	c0 28       	rjmp	8000219c <gpio_enable_pin_interrupt+0x3c>
8000219a:	5e fa       	retal	r10
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
8000219c:	f1 49 00 94 	st.w	r8[148],r9
800021a0:	5e fd       	retal	0

800021a2 <gpio_get_pin_interrupt_flag>:
}


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021a2:	f8 08 16 05 	lsr	r8,r12,0x5
800021a6:	a9 68       	lsl	r8,0x8
800021a8:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800021ac:	f0 f8 00 d0 	ld.w	r8,r8[208]
800021b0:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800021b4:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800021b8:	5e fc       	retal	r12

800021ba <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800021ba:	c0 08       	rjmp	800021ba <_unhandled_interrupt>

800021bc <INTC_register_interrupt>:
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
800021bc:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
800021c0:	48 98       	lddpc	r8,800021e4 <INTC_register_interrupt+0x28>


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800021c2:	a5 9b       	lsr	r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
800021c4:	f0 0b 00 38 	add	r8,r8,r11<<0x3
800021c8:	70 18       	ld.w	r8,r8[0x4]
800021ca:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
800021ce:	fe c8 ca 92 	sub	r8,pc,-13678
800021d2:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800021d6:	f0 0a 03 29 	ld.w	r9,r8[r10<<0x2]
800021da:	fe 78 08 00 	mov	r8,-63488
800021de:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
}
800021e2:	5e fc       	retal	r12
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	58 00       	cp.w	r0,0

800021e8 <INTC_init_interrupts>:
800021e8:	d4 21       	pushm	r4-r7,lr
800021ea:	fe c8 cb ea 	sub	r8,pc,-13334
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
800021ee:	e3 b8 00 01 	mtsr	0x4,r8
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800021f2:	fe c8 ca b6 	sub	r8,pc,-13642
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800021f6:	48 d9       	lddpc	r9,80002228 <INTC_init_interrupts+0x40>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800021f8:	70 0e       	ld.w	lr,r8[0x0]
800021fa:	fe cc 00 40 	sub	r12,pc,64
800021fe:	30 08       	mov	r8,0
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002200:	fe 7b 08 00 	mov	r11,-63488
80002204:	c0 e8       	rjmp	80002220 <INTC_init_interrupts+0x38>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002206:	72 16       	ld.w	r6,r9[0x4]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002208:	ec 0a 00 26 	add	r6,r6,r10<<0x2

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000220c:	2f fa       	sub	r10,-1
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
8000220e:	8d 0c       	st.w	r6[0x0],r12
80002210:	0e 3a       	cp.w	r10,r7
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002212:	cf a3       	brcs	80002206 <INTC_init_interrupts+0x1e>
80002214:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
80002218:	2f 89       	sub	r9,-8
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000221a:	2f f8       	sub	r8,-1
8000221c:	59 e8       	cp.w	r8,30
8000221e:	c0 40       	breq	80002226 <INTC_init_interrupts+0x3e>
80002220:	72 07       	ld.w	r7,r9[0x0]
80002222:	30 0a       	mov	r10,0
80002224:	cf 6b       	rjmp	80002210 <INTC_init_interrupts+0x28>
80002226:	d8 22       	popm	r4-r7,pc
80002228:	80 00       	ld.sh	r0,r0[0x0]
8000222a:	58 00       	cp.w	r0,0

8000222c <_get_interrupt_handler>:
8000222c:	e0 68 00 83 	mov	r8,131
80002230:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002234:	f0 0c 01 0c 	sub	r12,r8,r12
80002238:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
8000223c:	f0 ca ff c0 	sub	r10,r8,-64
80002240:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80002244:	58 0c       	cp.w	r12,0
80002246:	5e 0c       	reteq	r12
80002248:	48 69       	lddpc	r9,80002260 <_get_interrupt_handler+0x34>
8000224a:	f8 0c 12 00 	clz	r12,r12
8000224e:	f2 08 00 38 	add	r8,r9,r8<<0x3
80002252:	f8 0c 11 1f 	rsub	r12,r12,31
80002256:	70 18       	ld.w	r8,r8[0x4]
80002258:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
}
8000225c:	5e fc       	retal	r12
8000225e:	d7 03       	nop
80002260:	80 00       	ld.sh	r0,r0[0x0]
80002262:	58 00       	cp.w	r0,0

80002264 <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
80002264:	5e ff       	retal	1

80002266 <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
80002266:	5e fd       	retal	0

80002268 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80002268:	fe 68 00 00 	mov	r8,-131072
8000226c:	70 09       	ld.w	r9,r8[0x0]
8000226e:	a7 d9       	cbr	r9,0x7
80002270:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80002272:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002276:	70 09       	ld.w	r9,r8[0x0]
80002278:	e0 19 ff 80 	andl	r9,0xff80
8000227c:	f9 e9 10 09 	or	r9,r12,r9
80002280:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80002282:	70 09       	ld.w	r9,r8[0x0]
80002284:	a7 b9       	sbr	r9,0x7
80002286:	91 09       	st.w	r8[0x0],r9
}
80002288:	5e fc       	retal	r12

8000228a <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
8000228a:	fe 68 00 00 	mov	r8,-131072
8000228e:	70 0c       	ld.w	r12,r8[0x0]
}
80002290:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002294:	5e fc       	retal	r12

80002296 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
80002296:	fe 68 00 00 	mov	r8,-131072
8000229a:	70 8c       	ld.w	r12,r8[0x20]
}
8000229c:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800022a0:	5e fc       	retal	r12

800022a2 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800022a2:	fe 68 00 00 	mov	r8,-131072
800022a6:	70 8c       	ld.w	r12,r8[0x20]
}
800022a8:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800022ac:	5e fc       	retal	r12
800022ae:	d7 03       	nop

800022b0 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800022b0:	48 28       	lddpc	r8,800022b8 <udd_set_setup_payload+0x8>
	udd_g_ctrlreq.payload_size = payload_size;
800022b2:	b0 6b       	st.h	r8[0xc],r11
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800022b4:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
}
800022b6:	5e fc       	retal	r12
800022b8:	00 00       	add	r0,r0
800022ba:	0c 98       	mov	r8,r6

800022bc <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800022bc:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800022c0:	a3 6c       	lsl	r12,0x2
800022c2:	e0 3c fe 40 	sub	r12,130624
800022c6:	78 0c       	ld.w	r12,r12[0x0]
}
800022c8:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
800022cc:	5e fc       	retal	r12
800022ce:	d7 03       	nop

800022d0 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
800022d0:	d4 21       	pushm	r4-r7,lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index)
800022d2:	30 39       	mov	r9,3


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
800022d4:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
800022d8:	f2 08 18 00 	cp.b	r8,r9
800022dc:	e0 8b 00 35 	brhi	80002346 <udd_ep_set_halt+0x76>
		return false;

	ptr_job = &udd_ep_job[index - 1];
800022e0:	f0 cb 00 01 	sub	r11,r8,1
800022e4:	49 99       	lddpc	r9,80002348 <udd_ep_set_halt+0x78>
800022e6:	a5 6b       	lsl	r11,0x4
800022e8:	f2 0b 00 0b 	add	r11,r9,r11
	if (ptr_job->busy == true) {
800022ec:	76 0c       	ld.w	r12,r11[0x0]
800022ee:	58 0c       	cp.w	r12,0
800022f0:	c2 b5       	brlt	80002346 <udd_ep_set_halt+0x76>
		return false;	// Job on going, stall impossible
	}
	
	if (0 != udd_nb_busy_bank(index)) {
800022f2:	fe 6e 01 30 	mov	lr,-130768
800022f6:	f0 0a 15 02 	lsl	r10,r8,0x2
800022fa:	f4 0e 00 09 	add	r9,r10,lr
800022fe:	72 0e       	ld.w	lr,r9[0x0]
80002300:	fe 67 01 f0 	mov	r7,-130576
80002304:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80002308:	f4 07 00 09 	add	r9,r10,r7
8000230c:	58 0e       	cp.w	lr,0
8000230e:	c0 f0       	breq	8000232c <udd_ep_set_halt+0x5c>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
80002310:	18 9a       	mov	r10,r12
80002312:	30 1c       	mov	r12,1
80002314:	f5 dc d3 81 	bfins	r10,r12,0x1c,0x1
80002318:	97 0a       	st.w	r11[0x0],r10
		udd_enable_bank_interrupt(index);
8000231a:	e0 6a 10 00 	mov	r10,4096
8000231e:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_interrupt(index);
80002320:	f4 08 09 48 	lsl	r8,r10,r8
80002324:	fe 69 00 00 	mov	r9,-131072
80002328:	93 68       	st.w	r9[0x18],r8
8000232a:	d8 22       	popm	r4-r7,pc
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
8000232c:	e0 3a ff 00 	sub	r10,130816
80002330:	74 08       	ld.w	r8,r10[0x0]
80002332:	a9 d8       	cbr	r8,0x9
80002334:	95 08       	st.w	r10[0x0],r8
		udd_enable_stall_handshake(index);
80002336:	e8 68 00 00 	mov	r8,524288
8000233a:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
8000233c:	30 1c       	mov	r12,1
8000233e:	e4 68 00 00 	mov	r8,262144
80002342:	93 08       	st.w	r9[0x0],r8
80002344:	d8 22       	popm	r4-r7,pc
80002346:	d8 2a       	popm	r4-r7,pc,r12=0
80002348:	00 00       	add	r0,r0
8000234a:	06 e8       	st.h	--r3,r8

8000234c <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
8000234c:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
8000234e:	30 38       	mov	r8,3

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002350:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80002354:	f0 0c 18 00 	cp.b	r12,r8
80002358:	e0 88 00 03 	brls	8000235e <udd_ep_clear_halt+0x12>
8000235c:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
8000235e:	fe 6a 01 c0 	mov	r10,-130624
80002362:	f8 09 15 02 	lsl	r9,r12,0x2
80002366:	f2 0a 00 08 	add	r8,r9,r10
8000236a:	70 0a       	ld.w	r10,r8[0x0]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
	ptr_job = &udd_ep_job[ep - 1];
8000236c:	20 1c       	sub	r12,1
8000236e:	49 58       	lddpc	r8,800023c0 <udd_ep_clear_halt+0x74>
80002370:	a5 6c       	lsl	r12,0x4

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
80002372:	e6 1a 00 08 	andh	r10,0x8,COH
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80002376:	18 08       	add	r8,r12

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
80002378:	58 0a       	cp.w	r10,0
8000237a:	c0 51       	brne	80002384 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
8000237c:	70 0a       	ld.w	r10,r8[0x0]
8000237e:	ed ba 00 1c 	bld	r10,0x1c
80002382:	c1 d1       	brne	800023bc <udd_ep_clear_halt+0x70>
		// Remove request to stall
		ptr_job->stall_requested = false;
80002384:	70 0b       	ld.w	r11,r8[0x0]
		// Remove stall
		udd_disable_stall_handshake(ep);
80002386:	fe 6c 02 20 	mov	r12,-130528
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
		// Remove request to stall
		ptr_job->stall_requested = false;
8000238a:	30 0a       	mov	r10,0
8000238c:	f7 da d3 81 	bfins	r11,r10,0x1c,0x1
80002390:	91 0b       	st.w	r8[0x0],r11
		// Remove stall
		udd_disable_stall_handshake(ep);
80002392:	f2 0c 00 0b 	add	r11,r9,r12
80002396:	e8 6c 00 00 	mov	r12,524288
8000239a:	97 0c       	st.w	r11[0x0],r12
		udd_enable_endpoint_bank_autoswitch(ep);	
8000239c:	fe 6c 01 00 	mov	r12,-130816
800023a0:	f2 0c 00 0b 	add	r11,r9,r12
800023a4:	76 09       	ld.w	r9,r11[0x0]
800023a6:	a9 b9       	sbr	r9,0x9
800023a8:	97 09       	st.w	r11[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800023aa:	70 09       	ld.w	r9,r8[0x0]
800023ac:	58 09       	cp.w	r9,0
800023ae:	c0 74       	brge	800023bc <udd_ep_clear_halt+0x70>
			ptr_job->busy = false;
800023b0:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800023b4:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800023b6:	70 38       	ld.w	r8,r8[0xc]
800023b8:	5d 18       	icall	r8
800023ba:	da 0a       	popm	pc,r12=1
800023bc:	da 0a       	popm	pc,r12=1
800023be:	d7 03       	nop
800023c0:	00 00       	add	r0,r0
800023c2:	06 e8       	st.h	--r3,r8

800023c4 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
800023c4:	d4 01       	pushm	lr
800023c6:	18 99       	mov	r9,r12
800023c8:	16 9c       	mov	r12,r11
	if (ptr_job->busy == false)
800023ca:	72 08       	ld.w	r8,r9[0x0]
800023cc:	58 08       	cp.w	r8,0
800023ce:	c0 a4       	brge	800023e2 <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
800023d0:	30 0a       	mov	r10,0
800023d2:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800023d6:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans)
800023d8:	72 38       	ld.w	r8,r9[0xc]
800023da:	58 08       	cp.w	r8,0
800023dc:	c0 30       	breq	800023e2 <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
800023de:	72 2b       	ld.w	r11,r9[0x8]
800023e0:	5d 18       	icall	r8
800023e2:	d8 02       	popm	pc

800023e4 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
800023e4:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
800023e6:	fe 69 00 00 	mov	r9,-131072
800023ea:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800023ee:	30 1b       	mov	r11,1
800023f0:	72 7c       	ld.w	r12,r9[0x1c]
800023f2:	f6 08 09 4a 	lsl	r10,r11,r8
800023f6:	5c da       	com	r10
800023f8:	18 6a       	and	r10,r12
800023fa:	93 7a       	st.w	r9[0x1c],r10

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
800023fc:	f0 c9 00 01 	sub	r9,r8,1
80002400:	a5 69       	lsl	r9,0x4


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
80002402:	a3 68       	lsl	r8,0x2

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002404:	48 5c       	lddpc	r12,80002418 <udd_ep_free+0x34>


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
80002406:	e0 38 ff 00 	sub	r8,130816

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
8000240a:	12 0c       	add	r12,r9


void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
8000240c:	70 09       	ld.w	r9,r8[0x0]
8000240e:	a1 d9       	cbr	r9,0x1
80002410:	91 09       	st.w	r8[0x0],r9

static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80002412:	cd 9f       	rcall	800023c4 <udd_ep_finish_job>
80002414:	d8 02       	popm	pc
void udd_ep_free(udd_ep_id_t ep)
{
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
	udd_ep_abort_job(ep);
}
80002416:	d7 03       	nop
80002418:	00 00       	add	r0,r0
8000241a:	06 e8       	st.h	--r3,r8

8000241c <udd_ep_run>:
8000241c:	d4 31       	pushm	r0-r7,lr
8000241e:	20 1d       	sub	sp,4
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
80002420:	30 3e       	mov	lr,3
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
80002422:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80002426:	0e 96       	mov	r6,r7
80002428:	fc 07 18 00 	cp.b	r7,lr
8000242c:	e0 8b 00 8c 	brhi	80002544 <udd_ep_run+0x128>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002430:	fe 63 00 00 	mov	r3,-131072
80002434:	66 7e       	ld.w	lr,r3[0x1c]
80002436:	30 16       	mov	r6,1
80002438:	ec 07 09 45 	lsl	r5,r6,r7
8000243c:	eb ee 00 0e 	and	lr,r5,lr
80002440:	e0 80 00 82 	breq	80002544 <udd_ep_run+0x128>
			|| Is_udd_endpoint_stall_requested(ep)
80002444:	ee 0e 15 02 	lsl	lr,r7,0x2
80002448:	50 0e       	stdsp	sp[0x0],lr
8000244a:	e0 3e fe 40 	sub	lr,130624
8000244e:	7c 0e       	ld.w	lr,lr[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002450:	e6 1e 00 08 	andh	lr,0x8,COH
80002454:	c7 81       	brne	80002544 <udd_ep_run+0x128>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80002456:	ee c2 00 01 	sub	r2,r7,1
8000245a:	4b d5       	lddpc	r5,8000254c <udd_ep_run+0x130>
8000245c:	e4 0e 15 04 	lsl	lr,r2,0x4
80002460:	ea 0e 00 0e 	add	lr,r5,lr

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
80002464:	7c 04       	ld.w	r4,lr[0x0]
80002466:	e6 14 10 00 	andh	r4,0x1000,COH
8000246a:	c6 d1       	brne	80002544 <udd_ep_run+0x128>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000246c:	e1 b1 00 00 	mfsr	r1,0x0
	cpu_irq_disable();
80002470:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80002472:	7c 00       	ld.w	r0,lr[0x0]
80002474:	00 95       	mov	r5,r0
80002476:	e6 15 80 00 	andh	r5,0x8000,COH
8000247a:	c0 50       	breq	80002484 <udd_ep_run+0x68>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000247c:	e3 b1 00 00 	mtsr	0x0,r1
#endif
	barrier();
80002480:	08 9c       	mov	r12,r4
		cpu_irq_restore(flags);
		return false;	// Job already on going
80002482:	c6 28       	rjmp	80002546 <udd_ep_run+0x12a>
	}
	ptr_job->busy = true;
80002484:	e1 d6 d3 e1 	bfins	r0,r6,0x1f,0x1
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
80002488:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
8000248c:	9d 00       	st.w	lr[0x0],r0
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000248e:	e3 b1 00 00 	mtsr	0x0,r1
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
	ptr_job->call_trans = callback;
80002492:	9d 38       	st.w	lr[0xc],r8
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
	cpu_irq_restore(flags);
	ptr_job->buf = buf;
80002494:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->call_trans = callback;
	ptr_job->b_raise_dma = false;
80002496:	7c 08       	ld.w	r8,lr[0x0]
80002498:	f1 d5 d3 a1 	bfins	r8,r5,0x1d,0x1
8000249c:	9d 08       	st.w	lr[0x0],r8

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
8000249e:	e0 49 ff ff 	cp.w	r9,65535
800024a2:	e0 88 00 07 	brls	800024b0 <udd_ep_run+0x94>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
800024a6:	e0 78 00 00 	mov	r8,65536
800024aa:	0a 99       	mov	r9,r5
800024ac:	9d 28       	st.w	lr[0x8],r8
800024ae:	c2 b8       	rjmp	80002504 <udd_ep_run+0xe8>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
800024b0:	9d 29       	st.w	lr[0x8],r9
		if (b_dir_in) {
800024b2:	58 0c       	cp.w	r12,0
800024b4:	c2 80       	breq	80002504 <udd_ep_run+0xe8>
			if (buf_size==0) {
800024b6:	58 09       	cp.w	r9,0
800024b8:	c1 21       	brne	800024dc <udd_ep_run+0xc0>
				// The USB DMA can't send a empty buffer
				// thus we raise the DMA interrupt end of transfert 
				// to execute ZLP process
				ptr_job->b_raise_dma = true;
				ptr_job->b_send_zlp = true;
800024ba:	bd b8       	sbr	r8,0x1d
800024bc:	f1 d6 d3 c1 	bfins	r8,r6,0x1e,0x1
800024c0:	9d 08       	st.w	lr[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024c2:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800024c6:	d3 03       	ssrf	0x10
				flags = cpu_irq_save();
				udd_enable_endpoint_dma_interrupt(ep);
800024c8:	fc 19 02 00 	movh	r9,0x200
800024cc:	f2 02 09 42 	lsl	r2,r9,r2
800024d0:	87 62       	st.w	r3[0x18],r2
				udd_raise_endpoint_dma_interrupt(ep);
800024d2:	87 32       	st.w	r3[0xc],r2
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800024d4:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
800024d8:	0c 9c       	mov	r12,r6
				cpu_irq_restore(flags);
				return true;
800024da:	c3 68       	rjmp	80002546 <udd_ep_run+0x12a>
			}
			if (0 != buf_size % udd_get_endpoint_size(ep)) {
800024dc:	40 04       	lddsp	r4,sp[0x0]
800024de:	e0 34 ff 00 	sub	r4,130816
800024e2:	68 04       	ld.w	r4,r4[0x0]
800024e4:	30 83       	mov	r3,8
800024e6:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
800024ea:	e6 04 09 44 	lsl	r4,r3,r4
800024ee:	20 14       	sub	r4,1
800024f0:	12 64       	and	r4,r9
800024f2:	c0 60       	breq	800024fe <udd_ep_run+0xe2>
				// Force short packet option to send a shortpacket on IN,
				// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
				b_shortpacket = true;
				ptr_job->b_send_zlp = false;
800024f4:	f1 d5 d3 c1 	bfins	r8,r5,0x1e,0x1
800024f8:	0c 9b       	mov	r11,r6
800024fa:	9d 08       	st.w	lr[0x0],r8
800024fc:	c0 48       	rjmp	80002504 <udd_ep_run+0xe8>
			}else{
				ptr_job->b_send_zlp = b_shortpacket;
800024fe:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002502:	9d 08       	st.w	lr[0x0],r8
			}
		}
	}

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80002504:	ee 08 15 04 	lsl	r8,r7,0x4
80002508:	e0 38 fd 00 	sub	r8,130304
8000250c:	91 1a       	st.w	r8[0x4],r10
	if (b_shortpacket) {
8000250e:	58 0b       	cp.w	r11,0
80002510:	c0 60       	breq	8000251c <udd_ep_run+0x100>
		if (b_dir_in) {
80002512:	58 0c       	cp.w	r12,0
80002514:	f9 bb 01 08 	movne	r11,8
80002518:	f9 bb 00 14 	moveq	r11,20
		} else {
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
8000251c:	b1 69       	lsl	r9,0x10
8000251e:	e8 19 00 21 	orl	r9,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80002522:	16 49       	or	r9,r11
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80002524:	91 29       	st.w	r8[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002526:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000252a:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
8000252c:	fc 19 02 00 	movh	r9,0x200
80002530:	20 17       	sub	r7,1
80002532:	f2 07 09 47 	lsl	r7,r9,r7
80002536:	fe 69 00 00 	mov	r9,-131072
8000253a:	93 67       	st.w	r9[0x18],r7
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000253c:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80002540:	30 1c       	mov	r12,1
	cpu_irq_restore(flags);

	return true;
80002542:	c0 28       	rjmp	80002546 <udd_ep_run+0x12a>
80002544:	30 0c       	mov	r12,0
}
80002546:	2f fd       	sub	sp,-4
80002548:	d8 32       	popm	r0-r7,pc
8000254a:	d7 03       	nop
8000254c:	00 00       	add	r0,r0
8000254e:	06 e8       	st.h	--r3,r8

80002550 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
80002550:	49 08       	lddpc	r8,80002590 <udd_sleep_mode+0x40>
	if (!b_idle && udd_b_idle) {
80002552:	58 0c       	cp.w	r12,0
80002554:	c0 c1       	brne	8000256c <udd_sleep_mode+0x1c>
80002556:	11 89       	ld.ub	r9,r8[0x0]
80002558:	f8 09 18 00 	cp.b	r9,r12
8000255c:	c1 60       	breq	80002588 <udd_sleep_mode+0x38>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000255e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002562:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002564:	48 c8       	lddpc	r8,80002594 <udd_sleep_mode+0x44>
80002566:	11 9a       	ld.ub	r10,r8[0x1]
80002568:	2f fa       	sub	r10,-1
8000256a:	c0 c8       	rjmp	80002582 <udd_sleep_mode+0x32>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
8000256c:	11 89       	ld.ub	r9,r8[0x0]
8000256e:	30 08       	mov	r8,0
80002570:	f0 09 18 00 	cp.b	r9,r8
80002574:	c0 a1       	brne	80002588 <udd_sleep_mode+0x38>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002576:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000257a:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
8000257c:	48 68       	lddpc	r8,80002594 <udd_sleep_mode+0x44>
8000257e:	11 9a       	ld.ub	r10,r8[0x1]
80002580:	20 1a       	sub	r10,1
80002582:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002584:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80002588:	48 28       	lddpc	r8,80002590 <udd_sleep_mode+0x40>
8000258a:	b0 8c       	st.b	r8[0x0],r12
}
8000258c:	5e fc       	retal	r12
8000258e:	d7 03       	nop
80002590:	00 00       	add	r0,r0
80002592:	07 18       	ld.sh	r8,r3++
80002594:	00 00       	add	r0,r0
80002596:	0c b0       	st.h	r6++,r0

80002598 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80002598:	d4 01       	pushm	lr
	otg_unfreeze_clock();
8000259a:	fe 68 00 00 	mov	r8,-131072
8000259e:	f0 f9 08 00 	ld.w	r9,r8[2048]
800025a2:	af c9       	cbr	r9,0xe
800025a4:	f1 49 08 00 	st.w	r8[2048],r9
	// Detach device from the bus
	udd_detach_device();
800025a8:	70 09       	ld.w	r9,r8[0x0]
800025aa:	a9 a9       	sbr	r9,0x8
	udd_sleep_mode(false);
800025ac:	30 0c       	mov	r12,0

void udd_detach(void)
{
	otg_unfreeze_clock();
	// Detach device from the bus
	udd_detach_device();
800025ae:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
800025b0:	cd 0f       	rcall	80002550 <udd_sleep_mode>
800025b2:	d8 02       	popm	pc

800025b4 <udd_ctrl_init>:
}
800025b4:	e1 b8 00 00 	mfsr	r8,0x0
800025b8:	d3 03       	ssrf	0x10
800025ba:	30 1a       	mov	r10,1
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
800025bc:	fe 69 02 20 	mov	r9,-130528
800025c0:	93 0a       	st.w	r9[0x0],r10
800025c2:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
800025c6:	48 79       	lddpc	r9,800025e0 <udd_ctrl_init+0x2c>
800025c8:	30 08       	mov	r8,0
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
800025ca:	b2 68       	st.h	r9[0xc],r8
	udd_disable_in_send_interrupt(0);
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);

	udd_g_ctrlreq.callback = NULL;
800025cc:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
800025ce:	93 58       	st.w	r9[0x14],r8
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
800025d0:	fe 69 01 60 	mov	r9,-130720
800025d4:	30 2a       	mov	r10,2
800025d6:	93 0a       	st.w	r9[0x0],r10

	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
	udd_g_ctrlreq.payload_size = 0;
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800025d8:	48 39       	lddpc	r9,800025e4 <udd_ctrl_init+0x30>
800025da:	93 08       	st.w	r9[0x0],r8
}
800025dc:	5e fc       	retal	r12
800025de:	d7 03       	nop
800025e0:	00 00       	add	r0,r0
800025e2:	0c 98       	mov	r8,r6
800025e4:	00 00       	add	r0,r0
800025e6:	07 1c       	ld.sh	r12,r3++

800025e8 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800025e8:	d4 31       	pushm	r0-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025ea:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800025ee:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800025f0:	30 1a       	mov	r10,1
800025f2:	fe 69 02 20 	mov	r9,-130528
800025f6:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800025f8:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800025fc:	4b a9       	lddpc	r9,800026e4 <udd_ctrl_in_sent+0xfc>
800025fe:	4b b6       	lddpc	r6,800026e8 <udd_ctrl_in_sent+0x100>
80002600:	72 08       	ld.w	r8,r9[0x0]
80002602:	58 38       	cp.w	r8,3
80002604:	c0 71       	brne	80002612 <udd_ctrl_in_sent+0x2a>


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002606:	6c 48       	ld.w	r8,r6[0x10]
80002608:	58 08       	cp.w	r8,0
8000260a:	c0 20       	breq	8000260e <udd_ctrl_in_sent+0x26>
		udd_g_ctrlreq.callback();
8000260c:	5d 18       	icall	r8

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000260e:	cd 3f       	rcall	800025b4 <udd_ctrl_init>
80002610:	d8 32       	popm	r0-r7,pc
		return;
80002612:	8c 68       	ld.sh	r8,r6[0xc]
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80002614:	4b 64       	lddpc	r4,800026ec <udd_ctrl_in_sent+0x104>
80002616:	88 07       	ld.sh	r7,r4[0x0]
80002618:	f0 07 01 07 	sub	r7,r8,r7
8000261c:	5c 87       	casts.h	r7
8000261e:	c2 f1       	brne	8000267c <udd_ctrl_in_sent+0x94>
	if (0 == nb_remain) {
80002620:	4b 43       	lddpc	r3,800026f0 <udd_ctrl_in_sent+0x108>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
80002622:	07 8b       	ld.ub	r11,r3[0x0]
80002624:	ee 0b 18 00 	cp.b	r11,r7
80002628:	c0 e1       	brne	80002644 <udd_ctrl_in_sent+0x5c>
8000262a:	30 48       	mov	r8,4

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000262c:	93 08       	st.w	r9[0x0],r8
8000262e:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002632:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80002634:	31 08       	mov	r8,16
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002636:	fe 6a 01 60 	mov	r10,-130720
8000263a:	95 08       	st.w	r10[0x0],r8
8000263c:	fe 6a 01 f0 	mov	r10,-130576
	udd_enable_nak_in_interrupt(0);
80002640:	95 08       	st.w	r10[0x0],r8
80002642:	c4 e8       	rjmp	800026de <udd_ctrl_in_sent+0xf6>
80002644:	5c 78       	castu.h	r8
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002646:	4a c5       	lddpc	r5,800026f4 <udd_ctrl_in_sent+0x10c>
80002648:	8c b9       	ld.uh	r9,r6[0x6]
8000264a:	8a 8a       	ld.uh	r10,r5[0x0]
8000264c:	14 08       	add	r8,r10
8000264e:	10 39       	cp.w	r9,r8
80002650:	e0 89 00 07 	brgt	8000265e <udd_ctrl_in_sent+0x76>
80002654:	6c 5c       	ld.w	r12,r6[0x14]
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
80002656:	58 0c       	cp.w	r12,0
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80002658:	c0 30       	breq	8000265e <udd_ctrl_in_sent+0x76>
8000265a:	5d 1c       	icall	r12
8000265c:	c0 51       	brne	80002666 <udd_ctrl_in_sent+0x7e>
8000265e:	30 09       	mov	r9,0
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80002660:	4a 48       	lddpc	r8,800026f0 <udd_ctrl_in_sent+0x108>
80002662:	b0 89       	st.b	r8[0x0],r9
80002664:	c1 18       	rjmp	80002686 <udd_ctrl_in_sent+0x9e>
80002666:	88 09       	ld.sh	r9,r4[0x0]
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
80002668:	8a 08       	ld.sh	r8,r5[0x0]
8000266a:	f2 08 00 08 	add	r8,r9,r8
8000266e:	a8 07       	st.h	r4[0x0],r7
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
80002670:	aa 08       	st.h	r5[0x0],r8
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
80002672:	8c 67       	ld.sh	r7,r6[0xc]
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
			nb_remain = udd_g_ctrlreq.payload_size;
80002674:	f1 d7 c0 06 	bfextu	r8,r7,0x0,0x6
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80002678:	5f 08       	sreq	r8
8000267a:	a6 88       	st.b	r3[0x0],r8
8000267c:	34 08       	mov	r8,64
							USB_DEVICE_EP_CTRL_SIZE)
					== 0);
		}
	}
	// Continue transfer and send next data
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
8000267e:	ee 08 19 00 	cp.h	r8,r7
80002682:	f9 b7 03 40 	movlo	r7,64
80002686:	49 98       	lddpc	r8,800026e8 <udd_ctrl_in_sent+0x100>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002688:	70 2b       	ld.w	r11,r8[0x8]
8000268a:	49 98       	lddpc	r8,800026ec <udd_ctrl_in_sent+0x104>
8000268c:	90 0a       	ld.sh	r10,r8[0x0]
8000268e:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002692:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80002694:	fe 68 01 30 	mov	r8,-130768
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80002698:	70 08       	ld.w	r8,r8[0x0]
8000269a:	ed b8 00 01 	bld	r8,0x1
8000269e:	c0 70       	breq	800026ac <udd_ctrl_in_sent+0xc4>
800026a0:	5c 7a       	castu.h	r10
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800026a2:	fc 18 e0 00 	movh	r8,0xe000
800026a6:	f6 0a 00 0a 	add	r10,r11,r10
800026aa:	c0 98       	rjmp	800026bc <udd_ctrl_in_sent+0xd4>
800026ac:	e3 b9 00 00 	mtsr	0x0,r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800026b0:	30 49       	mov	r9,4
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800026b2:	48 d8       	lddpc	r8,800026e4 <udd_ctrl_in_sent+0xfc>
800026b4:	91 09       	st.w	r8[0x0],r9
800026b6:	d8 32       	popm	r0-r7,pc
		return;	// Exit of IN DATA phase
800026b8:	15 3b       	ld.ub	r11,r10++
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800026ba:	10 cb       	st.b	r8++,r11
800026bc:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800026c0:	ee 0b 19 00 	cp.h	r11,r7
800026c4:	cf a3       	brcs	800026b8 <udd_ctrl_in_sent+0xd0>
800026c6:	30 1a       	mov	r10,1
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800026c8:	fe 68 01 60 	mov	r8,-130720
800026cc:	91 0a       	st.w	r8[0x0],r10
800026ce:	fe 6b 01 f0 	mov	r11,-130576
	udd_enable_in_send_interrupt(0);
800026d2:	48 78       	lddpc	r8,800026ec <udd_ctrl_in_sent+0x104>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800026d4:	97 0a       	st.w	r11[0x0],r10

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
	udd_enable_in_send_interrupt(0);
800026d6:	90 0a       	ld.sh	r10,r8[0x0]
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800026d8:	f4 07 00 07 	add	r7,r10,r7
800026dc:	b0 07       	st.h	r8[0x0],r7
800026de:	e3 b9 00 00 	mtsr	0x0,r9
800026e2:	d8 32       	popm	r0-r7,pc
#endif
	barrier();
800026e4:	00 00       	add	r0,r0
800026e6:	07 1c       	ld.sh	r12,r3++
800026e8:	00 00       	add	r0,r0
800026ea:	0c 98       	mov	r8,r6
800026ec:	00 00       	add	r0,r0
800026ee:	07 1a       	ld.sh	r10,r3++
800026f0:	00 00       	add	r0,r0
800026f2:	07 20       	ld.uh	r0,r3++
800026f4:	00 00       	add	r0,r0
800026f6:	06 e4       	st.h	--r3,r4

800026f8 <udd_ep_alloc>:
800026f8:	d4 21       	pushm	r4-r7,lr
800026fa:	30 39       	mov	r9,3
800026fc:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP)
80002700:	f2 08 18 00 	cp.b	r8,r9
80002704:	e0 8b 00 88 	brhi	80002814 <udd_ep_alloc+0x11c>
		return false;
	if (Is_udd_endpoint_enabled(ep))
80002708:	fe 69 00 00 	mov	r9,-131072
8000270c:	72 76       	ld.w	r6,r9[0x1c]
8000270e:	30 17       	mov	r7,1
80002710:	ee 08 09 4e 	lsl	lr,r7,r8
80002714:	fd e6 00 06 	and	r6,lr,r6
80002718:	c7 e1       	brne	80002814 <udd_ep_alloc+0x11c>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
8000271a:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
8000271e:	0e 39       	cp.w	r9,r7
80002720:	c7 a5       	brlt	80002814 <udd_ep_alloc+0x11c>
80002722:	58 29       	cp.w	r9,2
80002724:	e0 8a 00 05 	brle	8000272e <udd_ep_alloc+0x36>
80002728:	58 39       	cp.w	r9,3
8000272a:	c7 51       	brne	80002814 <udd_ep_alloc+0x11c>
8000272c:	c0 28       	rjmp	80002730 <udd_ep_alloc+0x38>
8000272e:	0e 96       	mov	r6,r7
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80002730:	5c 7a       	castu.h	r10
80002732:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80002736:	ab 7b       	lsl	r11,0xb
80002738:	a3 66       	lsl	r6,0x2
8000273a:	e2 1b 18 00 	andl	r11,0x1800,COH
8000273e:	e2 16 00 0c 	andl	r6,0xc,COH
80002742:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
80002746:	f0 09 15 02 	lsl	r9,r8,0x2
8000274a:	30 8c       	mov	r12,8
8000274c:	e0 39 ff 00 	sub	r9,130816
80002750:	f4 0c 0c 4c 	max	r12,r10,r12
80002754:	72 07       	ld.w	r7,r9[0x0]
80002756:	e0 6a 04 00 	mov	r10,1024
8000275a:	e0 17 e6 83 	andl	r7,0xe683
8000275e:	f8 0a 0d 4c 	min	r12,r12,r10
80002762:	a1 7c       	lsl	r12,0x1
80002764:	20 1c       	sub	r12,1
80002766:	f8 0c 12 00 	clz	r12,r12
8000276a:	f8 0c 11 1c 	rsub	r12,r12,28
8000276e:	f7 ec 10 4b 	or	r11,r11,r12<<0x4
80002772:	0c 4b       	or	r11,r6
80002774:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002778:	f7 e7 10 07 	or	r7,r11,r7
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
8000277c:	5c 8e       	casts.h	lr
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
8000277e:	93 07       	st.w	r9[0x0],r7
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80002780:	fe 6a 01 0c 	mov	r10,-130804
80002784:	30 39       	mov	r9,3

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
80002786:	fe 6b 00 00 	mov	r11,-131072
8000278a:	30 17       	mov	r7,1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
8000278c:	c1 58       	rjmp	800027b6 <udd_ep_alloc+0xbe>
		if (Is_udd_endpoint_enabled(i)) {
8000278e:	76 76       	ld.w	r6,r11[0x1c]
80002790:	ee 09 09 4c 	lsl	r12,r7,r9
			ep_allocated |= 1 << i;
			udd_disable_endpoint(i);
80002794:	f8 05 11 ff 	rsub	r5,r12,-1
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
80002798:	f9 e6 00 06 	and	r6,r12,r6
8000279c:	c0 b0       	breq	800027b2 <udd_ep_alloc+0xba>
			ep_allocated |= 1 << i;
			udd_disable_endpoint(i);
8000279e:	76 76       	ld.w	r6,r11[0x1c]
800027a0:	eb e6 00 06 	and	r6,r5,r6
800027a4:	97 76       	st.w	r11[0x1c],r6
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
800027a6:	f9 ee 10 0e 	or	lr,r12,lr
			udd_disable_endpoint(i);
			udd_unallocate_memory(i);
800027aa:	74 0c       	ld.w	r12,r10[0x0]
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
		if (Is_udd_endpoint_enabled(i)) {
			ep_allocated |= 1 << i;
800027ac:	5c 8e       	casts.h	lr
			udd_disable_endpoint(i);
			udd_unallocate_memory(i);
800027ae:	a1 dc       	cbr	r12,0x1
800027b0:	95 0c       	st.w	r10[0x0],r12
800027b2:	20 19       	sub	r9,1
800027b4:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800027b6:	f0 09 18 00 	cp.b	r9,r8
800027ba:	fe 9b ff ea 	brhi	8000278e <udd_ep_alloc+0x96>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800027be:	5c 7e       	castu.h	lr
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800027c0:	fe 6a 00 00 	mov	r10,-131072
800027c4:	30 17       	mov	r7,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800027c6:	30 3c       	mov	r12,3
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
800027c8:	fe 66 01 00 	mov	r6,-130816
800027cc:	f0 0b 15 02 	lsl	r11,r8,0x2
			udd_enable_endpoint(i);
800027d0:	ee 08 09 45 	lsl	r5,r7,r8
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
800027d4:	f6 06 00 09 	add	r9,r11,r6
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800027d8:	f0 c6 ff ff 	sub	r6,r8,-1
		if (ep_allocated & (1 << i)) {
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i))
800027dc:	e0 3b fe d0 	sub	r11,130768
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800027e0:	fc 08 08 48 	asr	r8,lr,r8
800027e4:	ed b8 00 00 	bld	r8,0x0
800027e8:	c0 f1       	brne	80002806 <udd_ep_alloc+0x10e>
			udd_allocate_memory(i);
800027ea:	72 08       	ld.w	r8,r9[0x0]
800027ec:	a1 b8       	sbr	r8,0x1
800027ee:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint(i);
800027f0:	74 78       	ld.w	r8,r10[0x1c]
800027f2:	eb e8 10 08 	or	r8,r5,r8
800027f6:	95 78       	st.w	r10[0x1c],r8
			if (!Is_udd_endpoint_configured(i))
800027f8:	76 08       	ld.w	r8,r11[0x0]
800027fa:	ed b8 00 12 	bld	r8,0x12
800027fe:	c0 b1       	brne	80002814 <udd_ep_alloc+0x11c>
				return false;
			udd_enable_endpoint_bank_autoswitch(i);	
80002800:	72 08       	ld.w	r8,r9[0x0]
80002802:	a9 b8       	sbr	r8,0x9
80002804:	93 08       	st.w	r9[0x0],r8
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80002806:	f1 d6 c0 08 	bfextu	r8,r6,0x0,0x8
8000280a:	f8 08 18 00 	cp.b	r8,r12
8000280e:	fe 98 ff dd 	brls	800027c8 <udd_ep_alloc+0xd0>
80002812:	da 2a       	popm	r4-r7,pc,r12=1
80002814:	d8 2a       	popm	r4-r7,pc,r12=0

80002816 <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
80002816:	fe 68 00 00 	mov	r8,-131072
8000281a:	70 09       	ld.w	r9,r8[0x0]
8000281c:	e0 19 ff 80 	andl	r9,0xff80
80002820:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80002822:	30 8c       	mov	r12,8
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
	udd_enable_address();
80002824:	70 09       	ld.w	r9,r8[0x0]
80002826:	a7 b9       	sbr	r9,0x7
80002828:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000282a:	34 0b       	mov	r11,64
8000282c:	fe 69 01 00 	mov	r9,-130816
80002830:	f6 0c 0c 4b 	max	r11,r11,r12
80002834:	72 0a       	ld.w	r10,r9[0x0]
80002836:	e0 6c 04 00 	mov	r12,1024
8000283a:	e0 1a e6 83 	andl	r10,0xe683
8000283e:	f6 0c 0d 4b 	min	r11,r11,r12
80002842:	a1 7b       	lsl	r11,0x1
80002844:	20 1b       	sub	r11,1
80002846:	f6 0b 12 00 	clz	r11,r11
8000284a:	f6 0b 11 1c 	rsub	r11,r11,28
8000284e:	a5 6b       	lsl	r11,0x4
80002850:	e2 1b 19 7c 	andl	r11,0x197c,COH
80002854:	f7 ea 10 0a 	or	r10,r11,r10
80002858:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
8000285a:	72 0a       	ld.w	r10,r9[0x0]
8000285c:	a1 ba       	sbr	r10,0x1
8000285e:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80002860:	70 79       	ld.w	r9,r8[0x1c]
80002862:	a1 a9       	sbr	r9,0x0
80002864:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002866:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000286a:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
8000286c:	fe 69 01 f0 	mov	r9,-130576
80002870:	30 4b       	mov	r11,4
80002872:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80002874:	30 2b       	mov	r11,2
80002876:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80002878:	e0 69 10 00 	mov	r9,4096
8000287c:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000287e:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80002882:	5e fc       	retal	r12

80002884 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002884:	d4 21       	pushm	r4-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002886:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000288a:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
	otg_unfreeze_clock();
8000288c:	fe 67 00 00 	mov	r7,-131072
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002890:	30 1c       	mov	r12,1
80002892:	c5 fe       	rcall	80002550 <udd_sleep_mode>
80002894:	ee f8 08 00 	ld.w	r8,r7[2048]
	otg_unfreeze_clock();
80002898:	af c8       	cbr	r8,0xe
8000289a:	ef 48 08 00 	st.w	r7[2048],r8
8000289e:	6e 08       	ld.w	r8,r7[0x0]
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
800028a0:	a9 c8       	cbr	r8,0x8
800028a2:	8f 08       	st.w	r7[0x0],r8
800028a4:	e0 a0 06 e6 	rcall	80003670 <udc_reset>

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
800028a8:	cb 7f       	rcall	80002816 <udd_reset_ep_ctrl>
	udd_reset_ep_ctrl();	// Reset endpoint control
800028aa:	c8 5e       	rcall	800025b4 <udd_ctrl_init>
800028ac:	30 8b       	mov	r11,8
	udd_ctrl_init();	// Reset endpoint control management
800028ae:	8f 6b       	st.w	r7[0x18],r11
800028b0:	30 19       	mov	r9,1

	// Enable USB line events
	udd_enable_reset_interrupt();
800028b2:	8f 69       	st.w	r7[0x18],r9
800028b4:	31 08       	mov	r8,16
	udd_enable_suspend_interrupt();
800028b6:	8f 68       	st.w	r7[0x18],r8
800028b8:	30 4a       	mov	r10,4
	udd_enable_wake_up_interrupt();
800028ba:	8f 6a       	st.w	r7[0x18],r10
800028bc:	8f 2b       	st.w	r7[0x8],r11
	udd_enable_sof_interrupt();
800028be:	8f 2a       	st.w	r7[0x8],r10
800028c0:	30 2a       	mov	r10,2
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
800028c2:	8f 2a       	st.w	r7[0x8],r10
	udd_ack_sof();
800028c4:	8f 29       	st.w	r7[0x8],r9
	udd_ack_msof();
800028c6:	8f 28       	st.w	r7[0x8],r8
800028c8:	ee f8 08 00 	ld.w	r8,r7[2048]
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
#endif
	udd_ack_wake_up();
800028cc:	af a8       	sbr	r8,0xe
	otg_freeze_clock();
800028ce:	ef 48 08 00 	st.w	r7[2048],r8
800028d2:	e3 b6 00 00 	mtsr	0x0,r6
800028d6:	d8 22       	popm	r4-r7,pc

800028d8 <udd_enable>:
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800028d8:	d4 21       	pushm	r4-r7,lr
800028da:	e0 a0 03 bd 	rcall	80003054 <sysclk_enable_usb>
	cpu_irq_restore(flags);
}
800028de:	e1 b6 00 00 	mfsr	r6,0x0
800028e2:	d3 03       	ssrf	0x10
800028e4:	fe 67 00 00 	mov	r7,-131072
800028e8:	ee f8 08 00 	ld.w	r8,r7[2048]
800028ec:	af d8       	cbr	r8,0xf
800028ee:	ef 48 08 00 	st.w	r7[2048],r8

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
	(void)Is_otg_enabled();
800028f2:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return false;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
800028f6:	30 0a       	mov	r10,0
800028f8:	e0 6b 02 20 	mov	r11,544
800028fc:	fe cc ff 34 	sub	r12,pc,-204
80002900:	fe b0 fc 5e 	rcall	800021bc <INTC_register_interrupt>
	otg_force_device_mode();
80002904:	ee f8 08 00 	ld.w	r8,r7[2048]
80002908:	b9 b8       	sbr	r8,0x19
8000290a:	ef 48 08 00 	st.w	r7[2048],r8
8000290e:	ee f8 08 00 	ld.w	r8,r7[2048]
80002912:	b9 c8       	cbr	r8,0x18
80002914:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
80002918:	ee f8 08 00 	ld.w	r8,r7[2048]
8000291c:	ad c8       	cbr	r8,0xc
8000291e:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80002922:	ee f8 08 00 	ld.w	r8,r7[2048]
80002926:	ad a8       	sbr	r8,0xc
80002928:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
8000292c:	ee f8 08 00 	ld.w	r8,r7[2048]
80002930:	af b8       	sbr	r8,0xf
80002932:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
80002936:	ee f8 08 00 	ld.w	r8,r7[2048]
8000293a:	af c8       	cbr	r8,0xe
8000293c:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80002940:	ee f8 08 00 	ld.w	r8,r7[2048]

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002944:	6e 08       	ld.w	r8,r7[0x0]
80002946:	ad c8       	cbr	r8,0xc
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80002948:	8f 08       	st.w	r7[0x0],r8
8000294a:	6e 08       	ld.w	r8,r7[0x0]
8000294c:	e8 18 0c 00 	orl	r8,0xc00
#  endif
#endif
	udd_enable_vbus_interrupt();
80002950:	8f 08       	st.w	r7[0x0],r8
80002952:	ee f8 08 00 	ld.w	r8,r7[2048]
80002956:	a1 b8       	sbr	r8,0x1
80002958:	ef 48 08 00 	st.w	r7[2048],r8
	otg_freeze_clock();
8000295c:	ee f8 08 00 	ld.w	r8,r7[2048]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002960:	af a8       	sbr	r8,0xe
#  else
	udd_high_speed_disable();
#  endif
#endif
	udd_enable_vbus_interrupt();
	otg_freeze_clock();
80002962:	30 09       	mov	r9,0
80002964:	ef 48 08 00 	st.w	r7[2048],r8

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002968:	49 58       	lddpc	r8,800029bc <udd_enable+0xe4>
		udd_ep_job[i].stall_requested = false;
8000296a:	70 0a       	ld.w	r10,r8[0x0]
8000296c:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002970:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002974:	91 0a       	st.w	r8[0x0],r10
		udd_ep_job[i].stall_requested = false;
80002976:	70 4a       	ld.w	r10,r8[0x10]
80002978:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
8000297c:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80002980:	91 4a       	st.w	r8[0x10],r10
		udd_ep_job[i].stall_requested = false;
80002982:	70 8a       	ld.w	r10,r8[0x20]
80002984:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80002988:	f5 d9 d3 81 	bfins	r10,r9,0x1c,0x1
#  endif
#endif
	udd_enable_vbus_interrupt();
	otg_freeze_clock();
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
8000298c:	91 8a       	st.w	r8[0x20],r10
8000298e:	fe 78 0c 00 	mov	r8,-62464
80002992:	30 1b       	mov	r11,1
80002994:	f0 fa 01 44 	ld.w	r10,r8[324]
80002998:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
8000299c:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
800029a0:	48 88       	lddpc	r8,800029c0 <udd_enable+0xe8>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800029a2:	b0 89       	st.b	r8[0x0],r9
800029a4:	e1 b9 00 00 	mfsr	r9,0x0
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800029a8:	d3 03       	ssrf	0x10
800029aa:	48 78       	lddpc	r8,800029c4 <udd_enable+0xec>
800029ac:	11 ba       	ld.ub	r10,r8[0x3]
800029ae:	2f fa       	sub	r10,-1
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800029b0:	b0 ba       	st.b	r8[0x3],r10
800029b2:	e3 b9 00 00 	mtsr	0x0,r9
800029b6:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
800029ba:	d8 22       	popm	r4-r7,pc
800029bc:	00 00       	add	r0,r0
800029be:	06 e8       	st.h	--r3,r8
800029c0:	00 00       	add	r0,r0
800029c2:	07 18       	ld.sh	r8,r3++
800029c4:	00 00       	add	r0,r0
800029c6:	0c b0       	st.h	r6++,r0

800029c8 <udd_interrupt>:
800029c8:	eb cd 40 fe 	pushm	r1-r7,lr
800029cc:	fe 68 00 00 	mov	r8,-131072
800029d0:	70 19       	ld.w	r9,r8[0x4]
800029d2:	ed b9 00 02 	bld	r9,0x2
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
	if (Is_udd_sof()) {
800029d6:	c0 a1       	brne	800029ea <udd_interrupt+0x22>
		udd_ack_sof();
800029d8:	30 49       	mov	r9,4
800029da:	91 29       	st.w	r8[0x8],r9
		if (Is_udd_full_speed_mode()) {
800029dc:	f0 f8 08 04 	ld.w	r8,r8[2052]
800029e0:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
800029e4:	e0 81 02 98 	brne	80002f14 <udd_interrupt+0x54c>
800029e8:	c0 78       	rjmp	800029f6 <udd_interrupt+0x2e>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
	}
	if (Is_udd_msof()) {
800029ea:	70 19       	ld.w	r9,r8[0x4]
800029ec:	ed b9 00 01 	bld	r9,0x1
800029f0:	c0 71       	brne	800029fe <udd_interrupt+0x36>
		udd_ack_msof();
800029f2:	30 29       	mov	r9,2
800029f4:	91 29       	st.w	r8[0x8],r9
		udc_sof_notify();
800029f6:	e0 a0 05 8f 	rcall	80003514 <udc_sof_notify>
		goto udd_interrupt_end;
800029fa:	e0 8f 02 8d 	bral	80002f14 <udd_interrupt+0x54c>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
800029fe:	70 18       	ld.w	r8,r8[0x4]
80002a00:	ed b8 00 0c 	bld	r8,0xc
80002a04:	e0 81 01 79 	brne	80002cf6 <udd_interrupt+0x32e>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002a08:	fe 68 02 20 	mov	r8,-130528
80002a0c:	31 09       	mov	r9,16
80002a0e:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002a10:	30 89       	mov	r9,8
80002a12:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002a14:	fe 69 01 30 	mov	r9,-130768
80002a18:	72 08       	ld.w	r8,r9[0x0]
80002a1a:	ed b8 00 02 	bld	r8,0x2
80002a1e:	c7 51       	brne	80002b08 <udd_interrupt+0x140>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002a20:	4c 18       	lddpc	r8,80002b24 <udd_interrupt+0x15c>
80002a22:	70 08       	ld.w	r8,r8[0x0]
80002a24:	58 08       	cp.w	r8,0
80002a26:	c0 80       	breq	80002a36 <udd_interrupt+0x6e>


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002a28:	4c 08       	lddpc	r8,80002b28 <udd_interrupt+0x160>
80002a2a:	70 48       	ld.w	r8,r8[0x10]
80002a2c:	58 08       	cp.w	r8,0
80002a2e:	c0 20       	breq	80002a32 <udd_interrupt+0x6a>
		udd_g_ctrlreq.callback();
80002a30:	5d 18       	icall	r8
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002a32:	fe b0 fd c1 	rcall	800025b4 <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80002a36:	fe 68 01 30 	mov	r8,-130768
80002a3a:	70 08       	ld.w	r8,r8[0x0]
80002a3c:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80002a40:	58 88       	cp.w	r8,8
80002a42:	c2 61       	brne	80002a8e <udd_interrupt+0xc6>
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
80002a44:	fc 18 e0 00 	movh	r8,0xe000
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80002a48:	4b 8a       	lddpc	r10,80002b28 <udd_interrupt+0x160>
80002a4a:	fc 19 20 00 	movh	r9,0x2000
80002a4e:	f0 0a 00 0b 	add	r11,r8,r10
80002a52:	11 3c       	ld.ub	r12,r8++
80002a54:	f6 09 0b 0c 	st.b	r11[r9],r12
80002a58:	4b 47       	lddpc	r7,80002b28 <udd_interrupt+0x160>
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80002a5a:	30 8e       	mov	lr,8
80002a5c:	ea 1e e0 00 	orh	lr,0xe000
80002a60:	1c 38       	cp.w	r8,lr
80002a62:	cf 61       	brne	80002a4e <udd_interrupt+0x86>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002a64:	8e 9a       	ld.uh	r10,r7[0x2]
80002a66:	f4 0b 16 08 	lsr	r11,r10,0x8
80002a6a:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a6e:	8e a9       	ld.uh	r9,r7[0x4]
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002a70:	ae 1a       	st.h	r7[0x2],r10
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a72:	f2 0a 16 08 	lsr	r10,r9,0x8
80002a76:	f5 e9 10 89 	or	r9,r10,r9<<0x8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002a7a:	8e b8       	ld.uh	r8,r7[0x6]
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002a7c:	ae 29       	st.h	r7[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002a7e:	f0 09 16 08 	lsr	r9,r8,0x8
80002a82:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80002a86:	ae 38       	st.h	r7[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
80002a88:	e0 a0 06 18 	rcall	800036b8 <udc_process_setup>
80002a8c:	c0 b1       	brne	80002aa2 <udd_interrupt+0xda>

static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
	udd_enable_stall_handshake(0);
80002a8e:	e8 69 00 00 	mov	r9,524288
80002a92:	fe 68 01 f0 	mov	r8,-130576
80002a96:	91 09       	st.w	r8[0x0],r9


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002a98:	30 59       	mov	r9,5
80002a9a:	4a 38       	lddpc	r8,80002b24 <udd_interrupt+0x15c>
80002a9c:	91 09       	st.w	r8[0x0],r9

	// Decode setup request
	if (udc_process_setup() == false) {
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
80002a9e:	30 49       	mov	r9,4
80002aa0:	cc c8       	rjmp	80002c38 <udd_interrupt+0x270>
		return;
	}
	udd_ack_setup_received(0);
80002aa2:	30 49       	mov	r9,4
80002aa4:	fe 68 01 60 	mov	r8,-130720
80002aa8:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002aaa:	30 09       	mov	r9,0
80002aac:	0f 8a       	ld.ub	r10,r7[0x0]
80002aae:	f2 0a 18 00 	cp.b	r10,r9
80002ab2:	c1 04       	brge	80002ad2 <udd_interrupt+0x10a>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80002ab4:	49 e9       	lddpc	r9,80002b2c <udd_interrupt+0x164>
80002ab6:	8e e8       	ld.uh	r8,r7[0xc]
80002ab8:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002abc:	5f 0a       	sreq	r10
80002abe:	b2 8a       	st.b	r9[0x0],r10
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002ac0:	49 c9       	lddpc	r9,80002b30 <udd_interrupt+0x168>
80002ac2:	30 08       	mov	r8,0
80002ac4:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002ac6:	49 c9       	lddpc	r9,80002b34 <udd_interrupt+0x16c>
80002ac8:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002aca:	30 29       	mov	r9,2
80002acc:	49 68       	lddpc	r8,80002b24 <udd_interrupt+0x15c>
80002ace:	91 09       	st.w	r8[0x0],r9
80002ad0:	c2 68       	rjmp	80002b1c <udd_interrupt+0x154>
		udd_ctrl_in_sent();	// Send first data transfer
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002ad2:	8e 3b       	ld.sh	r11,r7[0x6]
80002ad4:	30 09       	mov	r9,0
80002ad6:	49 4a       	lddpc	r10,80002b24 <udd_interrupt+0x15c>
80002ad8:	f2 0b 19 00 	cp.h	r11,r9
80002adc:	c0 41       	brne	80002ae4 <udd_interrupt+0x11c>

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002ade:	30 39       	mov	r9,3
80002ae0:	95 09       	st.w	r10[0x0],r9
80002ae2:	c8 f8       	rjmp	80002c00 <udd_interrupt+0x238>
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002ae4:	49 3b       	lddpc	r11,80002b30 <udd_interrupt+0x168>
80002ae6:	b6 09       	st.h	r11[0x0],r9
		udd_ctrl_payload_nb_trans = 0;
80002ae8:	49 3b       	lddpc	r11,80002b34 <udd_interrupt+0x16c>
80002aea:	b6 09       	st.h	r11[0x0],r9
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002aec:	30 19       	mov	r9,1
80002aee:	95 09       	st.w	r10[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002af0:	31 09       	mov	r9,16
80002af2:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002af4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002af8:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002afa:	fe 6a 01 f0 	mov	r10,-130576
80002afe:	95 09       	st.w	r10[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002b00:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80002b04:	e0 8f 02 08 	bral	80002f14 <udd_interrupt+0x54c>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80002b08:	72 08       	ld.w	r8,r9[0x0]
80002b0a:	ed b8 00 00 	bld	r8,0x0
80002b0e:	c1 51       	brne	80002b38 <udd_interrupt+0x170>
80002b10:	fe 68 01 c0 	mov	r8,-130624
80002b14:	70 08       	ld.w	r8,r8[0x0]
80002b16:	ed b8 00 00 	bld	r8,0x0
80002b1a:	c0 f1       	brne	80002b38 <udd_interrupt+0x170>
		// IN packet sent
		udd_ctrl_in_sent();
80002b1c:	fe b0 fd 66 	rcall	800025e8 <udd_ctrl_in_sent>
80002b20:	e0 8f 01 fa 	bral	80002f14 <udd_interrupt+0x54c>
80002b24:	00 00       	add	r0,r0
80002b26:	07 1c       	ld.sh	r12,r3++
80002b28:	00 00       	add	r0,r0
80002b2a:	0c 98       	mov	r8,r6
80002b2c:	00 00       	add	r0,r0
80002b2e:	07 20       	ld.uh	r0,r3++
80002b30:	00 00       	add	r0,r0
80002b32:	06 e4       	st.h	--r3,r4
80002b34:	00 00       	add	r0,r0
80002b36:	07 1a       	ld.sh	r10,r3++
80002b38:	fe 68 01 30 	mov	r8,-130768
80002b3c:	70 09       	ld.w	r9,r8[0x0]
80002b3e:	ed b9 00 01 	bld	r9,0x1
80002b42:	e0 81 00 9f 	brne	80002c80 <udd_interrupt+0x2b8>
80002b46:	4c ba       	lddpc	r10,80002c70 <udd_interrupt+0x2a8>
		return true;
	}
	if (Is_udd_out_received(0)) {
80002b48:	74 09       	ld.w	r9,r10[0x0]
80002b4a:	58 19       	cp.w	r9,1
80002b4c:	c1 70       	breq	80002b7a <udd_interrupt+0x1b2>
80002b4e:	58 29       	cp.w	r9,2
80002b50:	5f 08       	sreq	r8
80002b52:	58 49       	cp.w	r9,4
80002b54:	5f 09       	sreq	r9
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002b56:	f3 e8 10 08 	or	r8,r9,r8
80002b5a:	c0 80       	breq	80002b6a <udd_interrupt+0x1a2>
80002b5c:	4c 68       	lddpc	r8,80002c74 <udd_interrupt+0x2ac>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80002b5e:	70 48       	ld.w	r8,r8[0x10]
80002b60:	58 08       	cp.w	r8,0
80002b62:	e0 80 01 82 	breq	80002e66 <udd_interrupt+0x49e>
80002b66:	5d 18       	icall	r8
80002b68:	c7 f9       	rjmp	80002e66 <udd_interrupt+0x49e>
80002b6a:	30 58       	mov	r8,5


static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002b6c:	e8 69 00 00 	mov	r9,524288
80002b70:	95 08       	st.w	r10[0x0],r8
80002b72:	fe 68 01 f0 	mov	r8,-130576
		udd_g_ctrlreq.callback();
80002b76:	91 09       	st.w	r8[0x0],r9
80002b78:	c7 79       	rjmp	80002e66 <udd_interrupt+0x49e>


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002b7a:	4b f9       	lddpc	r9,80002c74 <udd_interrupt+0x2ac>
	udd_enable_stall_handshake(0);
80002b7c:	70 08       	ld.w	r8,r8[0x0]
80002b7e:	92 6a       	ld.sh	r10,r9[0xc]


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002b80:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
	udd_enable_stall_handshake(0);
80002b84:	4b d9       	lddpc	r9,80002c78 <udd_interrupt+0x2b0>
80002b86:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002b8a:	92 09       	ld.sh	r9,r9[0x0]
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80002b8c:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80002b90:	f0 0b 00 0b 	add	r11,r8,r11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002b94:	16 3c       	cp.w	r12,r11
80002b96:	c0 44       	brge	80002b9e <udd_interrupt+0x1d6>
80002b98:	f4 09 01 08 	sub	r8,r10,r9
80002b9c:	5c 88       	casts.h	r8
80002b9e:	4b 6a       	lddpc	r10,80002c74 <udd_interrupt+0x2ac>
80002ba0:	74 2b       	ld.w	r11,r10[0x8]
80002ba2:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
80002ba6:	14 0b       	add	r11,r10
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002ba8:	fc 1a e0 00 	movh	r10,0xe000
80002bac:	c0 38       	rjmp	80002bb2 <udd_interrupt+0x1ea>
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80002bae:	15 3c       	ld.ub	r12,r10++
80002bb0:	16 cc       	st.b	r11++,r12
80002bb2:	f9 da c0 08 	bfextu	r12,r10,0x0,0x8
80002bb6:	f0 0c 19 00 	cp.h	r12,r8
80002bba:	cf a3       	brcs	80002bae <udd_interrupt+0x1e6>
80002bbc:	f0 09 00 09 	add	r9,r8,r9
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80002bc0:	4a e7       	lddpc	r7,80002c78 <udd_interrupt+0x2b0>
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80002bc2:	5c 89       	casts.h	r9
80002bc4:	ae 09       	st.h	r7[0x0],r9
80002bc6:	34 0a       	mov	r10,64
80002bc8:	f4 08 19 00 	cp.h	r8,r10
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80002bcc:	c0 c1       	brne	80002be4 <udd_interrupt+0x21c>
80002bce:	4a a8       	lddpc	r8,80002c74 <udd_interrupt+0x2ac>
80002bd0:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80002bd4:	4a a6       	lddpc	r6,80002c7c <udd_interrupt+0x2b4>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80002bd6:	90 bb       	ld.uh	r11,r8[0x6]
80002bd8:	8c 8a       	ld.uh	r10,r6[0x0]
80002bda:	f8 0a 00 0a 	add	r10,r12,r10
80002bde:	14 3b       	cp.w	r11,r10
80002be0:	e0 89 00 1c 	brgt	80002c18 <udd_interrupt+0x250>
80002be4:	4a 48       	lddpc	r8,80002c74 <udd_interrupt+0x2ac>
80002be6:	b0 69       	st.h	r8[0xc],r9
80002be8:	70 5c       	ld.w	r12,r8[0x14]
80002bea:	58 0c       	cp.w	r12,0
80002bec:	c0 30       	breq	80002bf2 <udd_interrupt+0x22a>
80002bee:	5d 1c       	icall	r12
80002bf0:	c1 b0       	breq	80002c26 <udd_interrupt+0x25e>
80002bf2:	30 29       	mov	r9,2
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002bf4:	fe 68 01 60 	mov	r8,-130720
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002bf8:	30 3a       	mov	r10,3
80002bfa:	91 09       	st.w	r8[0x0],r9
80002bfc:	49 d9       	lddpc	r9,80002c70 <udd_interrupt+0x2a8>
			if (!udd_g_ctrlreq.over_under_run()) {
80002bfe:	93 0a       	st.w	r9[0x0],r10
80002c00:	e1 bb 00 00 	mfsr	r11,0x0
				udd_ack_out_received(0);
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002c04:	d3 03       	ssrf	0x10
80002c06:	30 1a       	mov	r10,1

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002c08:	91 0a       	st.w	r8[0x0],r10
				udd_ack_out_received(0);
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002c0a:	fe 69 01 f0 	mov	r9,-130576

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002c0e:	93 0a       	st.w	r9[0x0],r10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c10:	30 8a       	mov	r10,8
80002c12:	91 0a       	st.w	r8[0x0],r10
	cpu_irq_disable();
80002c14:	93 0a       	st.w	r9[0x0],r10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002c16:	c6 58       	rjmp	80002ce0 <udd_interrupt+0x318>
80002c18:	90 6a       	ld.sh	r10,r8[0xc]
	udd_enable_in_send_interrupt(0);
80002c1a:	f2 0a 19 00 	cp.h	r10,r9
80002c1e:	c1 a1       	brne	80002c52 <udd_interrupt+0x28a>
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002c20:	70 5c       	ld.w	r12,r8[0x14]
80002c22:	58 0c       	cp.w	r12,0
	udd_enable_nak_out_interrupt(0);
80002c24:	c0 e1       	brne	80002c40 <udd_interrupt+0x278>
80002c26:	e8 69 00 00 	mov	r9,524288
		udd_ack_out_received(0);
		udd_ctrl_send_zlp_in();
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80002c2a:	fe 68 01 f0 	mov	r8,-130576
80002c2e:	91 09       	st.w	r8[0x0],r9
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80002c30:	30 59       	mov	r9,5
80002c32:	49 08       	lddpc	r8,80002c70 <udd_interrupt+0x2a8>
80002c34:	91 09       	st.w	r8[0x0],r9

static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
	udd_enable_stall_handshake(0);
80002c36:	30 29       	mov	r9,2
80002c38:	fe 68 01 60 	mov	r8,-130720
80002c3c:	91 09       	st.w	r8[0x0],r9
80002c3e:	c6 b9       	rjmp	80002f14 <udd_interrupt+0x54c>


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002c40:	5d 1c       	icall	r12
80002c42:	cf 20       	breq	80002c26 <udd_interrupt+0x25e>
80002c44:	8e 09       	ld.sh	r9,r7[0x0]
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80002c46:	8c 08       	ld.sh	r8,r6[0x0]
80002c48:	f2 08 00 08 	add	r8,r9,r8
80002c4c:	ac 08       	st.h	r6[0x0],r8
80002c4e:	30 08       	mov	r8,0
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80002c50:	ae 08       	st.h	r7[0x0],r8
80002c52:	fe 69 01 60 	mov	r9,-130720
			udd_ack_out_received(0);
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002c56:	30 28       	mov	r8,2
80002c58:	93 08       	st.w	r9[0x0],r8
80002c5a:	31 08       	mov	r8,16
80002c5c:	93 08       	st.w	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80002c5e:	e1 b9 00 00 	mfsr	r9,0x0
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80002c62:	d3 03       	ssrf	0x10
80002c64:	fe 6a 01 f0 	mov	r10,-130576
80002c68:	95 08       	st.w	r10[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80002c6a:	e3 b9 00 00 	mtsr	0x0,r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002c6e:	c4 bb       	rjmp	80002b04 <udd_interrupt+0x13c>
80002c70:	00 00       	add	r0,r0
	cpu_irq_disable();
80002c72:	07 1c       	ld.sh	r12,r3++
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80002c74:	00 00       	add	r0,r0
80002c76:	0c 98       	mov	r8,r6
80002c78:	00 00       	add	r0,r0
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002c7a:	07 1a       	ld.sh	r10,r3++
80002c7c:	00 00       	add	r0,r0
80002c7e:	06 e4       	st.h	--r3,r4
80002c80:	70 09       	ld.w	r9,r8[0x0]
80002c82:	ed b9 00 03 	bld	r9,0x3
80002c86:	c1 01       	brne	80002ca6 <udd_interrupt+0x2de>
80002c88:	30 8a       	mov	r10,8
80002c8a:	fe 69 01 60 	mov	r9,-130720
80002c8e:	93 0a       	st.w	r9[0x0],r10
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80002c90:	70 08       	ld.w	r8,r8[0x0]
80002c92:	ed b8 00 00 	bld	r8,0x0
80002c96:	e0 80 01 3f 	breq	80002f14 <udd_interrupt+0x54c>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80002c9a:	4d 48       	lddpc	r8,80002de8 <udd_interrupt+0x420>
80002c9c:	70 08       	ld.w	r8,r8[0x0]
80002c9e:	58 38       	cp.w	r8,3
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80002ca0:	e0 81 01 3a 	brne	80002f14 <udd_interrupt+0x54c>
80002ca4:	c2 48       	rjmp	80002cec <udd_interrupt+0x324>
80002ca6:	70 09       	ld.w	r9,r8[0x0]
80002ca8:	ed b9 00 04 	bld	r9,0x4
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002cac:	c2 51       	brne	80002cf6 <udd_interrupt+0x32e>
80002cae:	fe 69 01 60 	mov	r9,-130720
80002cb2:	31 0a       	mov	r10,16
80002cb4:	93 0a       	st.w	r9[0x0],r10
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80002cb6:	70 08       	ld.w	r8,r8[0x0]
80002cb8:	ed b8 00 01 	bld	r8,0x1
80002cbc:	e0 80 01 2c 	breq	80002f14 <udd_interrupt+0x54c>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80002cc0:	4c aa       	lddpc	r10,80002de8 <udd_interrupt+0x420>
80002cc2:	74 08       	ld.w	r8,r10[0x0]
80002cc4:	58 18       	cp.w	r8,1
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80002cc6:	c1 01       	brne	80002ce6 <udd_interrupt+0x31e>
80002cc8:	30 3b       	mov	r11,3
80002cca:	95 0b       	st.w	r10[0x0],r11
80002ccc:	e1 bb 00 00 	mfsr	r11,0x0
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80002cd0:	d3 03       	ssrf	0x10
80002cd2:	93 08       	st.w	r9[0x0],r8
80002cd4:	fe 6a 01 f0 	mov	r10,-130576

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002cd8:	95 08       	st.w	r10[0x0],r8
80002cda:	30 88       	mov	r8,8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002cdc:	93 08       	st.w	r9[0x0],r8
80002cde:	95 08       	st.w	r10[0x0],r8
	cpu_irq_disable();
80002ce0:	e3 bb 00 00 	mtsr	0x0,r11
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
	udd_enable_in_send_interrupt(0);
80002ce4:	c1 0b       	rjmp	80002b04 <udd_interrupt+0x13c>
80002ce6:	58 48       	cp.w	r8,4
80002ce8:	e0 81 01 16 	brne	80002f14 <udd_interrupt+0x54c>
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002cec:	e8 69 00 00 	mov	r9,524288
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002cf0:	fe 68 01 f0 	mov	r8,-130576
80002cf4:	ca 4b       	rjmp	80002c3c <udd_interrupt+0x274>

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80002cf6:	4b e7       	lddpc	r7,80002dec <udd_interrupt+0x424>
80002cf8:	fe 69 01 34 	mov	r9,-130764
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002cfc:	0e 9c       	mov	r12,r7
80002cfe:	30 06       	mov	r6,0
80002d00:	fe 6b 00 00 	mov	r11,-131072
80002d04:	fc 13 02 00 	movh	r3,0x200
80002d08:	e0 64 10 00 	mov	r4,4096
80002d0c:	76 45       	ld.w	r5,r11[0x10]
80002d0e:	e6 06 09 4a 	lsl	r10,r3,r6
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002d12:	ec c8 ff ff 	sub	r8,r6,-1
80002d16:	f2 c2 ff 70 	sub	r2,r9,-144
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002d1a:	f5 e5 00 05 	and	r5,r10,r5
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002d1e:	10 96       	mov	r6,r8
80002d20:	fe 6e 00 00 	mov	lr,-131072
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80002d24:	c4 20       	breq	80002da8 <udd_interrupt+0x3e0>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002d26:	76 15       	ld.w	r5,r11[0x4]
80002d28:	f5 e5 00 05 	and	r5,r10,r5
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002d2c:	c3 e0       	breq	80002da8 <udd_interrupt+0x3e0>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80002d2e:	9d 5a       	st.w	lr[0x14],r10
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002d30:	78 09       	ld.w	r9,r12[0x0]
80002d32:	ed b9 00 1d 	bld	r9,0x1d
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80002d36:	c0 31       	brne	80002d3c <udd_interrupt+0x374>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
		
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80002d38:	9d 3a       	st.w	lr[0xc],r10
80002d3a:	c0 a8       	rjmp	80002d4e <udd_interrupt+0x386>
80002d3c:	78 2a       	ld.w	r10,r12[0x8]
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80002d3e:	f0 09 15 04 	lsl	r9,r8,0x4
			if (ptr_job->b_raise_dma) {
80002d42:	e0 39 fd 00 	sub	r9,130304
80002d46:	72 39       	ld.w	r9,r9[0xc]
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
80002d48:	b1 89       	lsr	r9,0x10
80002d4a:	12 1a       	sub	r10,r9
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002d4c:	99 2a       	st.w	r12[0x8],r10
				// In case of manual raise DMA interrupt
				// to process a ZLP packet
				udd_raise_endpoint_dma_interrupt(ep);
			}else{
				// Save number of data no transfered
				nb_remaining = (udd_endpoint_dma_get_status(ep) &
80002d4e:	f0 09 15 02 	lsl	r9,r8,0x2
80002d52:	fe 6b 01 00 	mov	r11,-130816
80002d56:	f2 0b 00 0a 	add	r10,r9,r11
						AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
						>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
				// Update number of data transfered
				ptr_job->buf_size -= nb_remaining;
80002d5a:	74 0a       	ld.w	r10,r10[0x0]
80002d5c:	ed ba 00 08 	bld	r10,0x8
			}

			if (Is_udd_endpoint_in(ep)) {
80002d60:	c4 01       	brne	80002de0 <udd_interrupt+0x418>
80002d62:	78 0a       	ld.w	r10,r12[0x0]
80002d64:	ed ba 00 1e 	bld	r10,0x1e
80002d68:	c3 c1       	brne	80002de0 <udd_interrupt+0x418>
80002d6a:	fe 61 01 60 	mov	r1,-130720
80002d6e:	30 1b       	mov	r11,1
80002d70:	f2 01 00 0a 	add	r10,r9,r1
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
80002d74:	95 0b       	st.w	r10[0x0],r11
80002d76:	fe 6e 01 30 	mov	lr,-130768
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
80002d7a:	fe 61 01 90 	mov	r1,-130672
80002d7e:	f2 0e 00 0a 	add	r10,r9,lr
80002d82:	f2 01 00 0c 	add	r12,r9,r1
					if (Is_udd_write_enabled(ep)) {
80002d86:	74 0a       	ld.w	r10,r10[0x0]
80002d88:	e0 39 fe 10 	sub	r9,130576
						udd_raise_in_send(ep);
80002d8c:	e6 1a 00 01 	andh	r10,0x1,COH
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d90:	f9 fb 1a 00 	st.wne	r12[0x0],r11
						udd_raise_in_send(ep);
80002d94:	30 1a       	mov	r10,1
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d96:	93 0a       	st.w	r9[0x0],r10
						udd_raise_in_send(ep);
					}
					udd_enable_in_send_interrupt(ep);
80002d98:	e0 69 10 00 	mov	r9,4096
				// Transfer complet on IN
				if (ptr_job->b_send_zlp) {
					// Need to send a ZLP after data transfer
					// enable interrupt to wait a free bank to sent ZLP
					udd_ack_in_send(ep);
					if (Is_udd_write_enabled(ep)) {
80002d9c:	f2 08 09 48 	lsl	r8,r9,r8
						udd_raise_in_send(ep);
80002da0:	fe 69 00 00 	mov	r9,-131072
					}
					udd_enable_in_send_interrupt(ep);
80002da4:	93 68       	st.w	r9[0x18],r8
80002da6:	cb 78       	rjmp	80002f14 <udd_interrupt+0x54c>
					udd_enable_endpoint_interrupt(ep);
80002da8:	76 4a       	ld.w	r10,r11[0x10]
80002daa:	e8 08 09 45 	lsl	r5,r4,r8
80002dae:	eb ea 00 0a 	and	r10,r5,r10
80002db2:	c4 50       	breq	80002e3c <udd_interrupt+0x474>
80002db4:	64 0e       	ld.w	lr,r2[0x0]
80002db6:	e0 71 fe d0 	mov	r1,130768
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002dba:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80002dbe:	f2 01 00 0a 	add	r10,r9,r1
80002dc2:	58 0e       	cp.w	lr,0
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002dc4:	c1 60       	breq	80002df0 <udd_interrupt+0x428>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002dc6:	72 0e       	ld.w	lr,r9[0x0]
80002dc8:	ed be 00 00 	bld	lr,0x0
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002dcc:	c1 21       	brne	80002df0 <udd_interrupt+0x428>
			// Call callback to signal end of transfer
			udd_ep_finish_job(ptr_job, false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80002dce:	f2 c8 ff 10 	sub	r8,r9,-240
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80002dd2:	30 1a       	mov	r10,1
80002dd4:	91 0a       	st.w	r8[0x0],r10
80002dd6:	2d 09       	sub	r9,-48
80002dd8:	93 0a       	st.w	r9[0x0],r10
80002dda:	e0 69 40 00 	mov	r9,16384
				udd_disable_in_send_interrupt(ep);
80002dde:	91 09       	st.w	r8[0x0],r9
80002de0:	30 0b       	mov	r11,0
80002de2:	fe b0 fa f1 	rcall	800023c4 <udd_ep_finish_job>
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80002de6:	c9 78       	rjmp	80002f14 <udd_interrupt+0x54c>
80002de8:	00 00       	add	r0,r0
				udd_ack_fifocon(ep);
80002dea:	07 1c       	ld.sh	r12,r3++
80002dec:	00 00       	add	r0,r0
80002dee:	06 e8       	st.h	--r3,r8
				udd_ep_finish_job(ptr_job, false);
80002df0:	64 0e       	ld.w	lr,r2[0x0]
80002df2:	e2 1e 10 00 	andl	lr,0x1000,COH
80002df6:	c2 30       	breq	80002e3c <udd_interrupt+0x474>
80002df8:	72 0e       	ld.w	lr,r9[0x0]
80002dfa:	fd de c1 82 	bfextu	lr,lr,0xc,0x2
80002dfe:	c1 f1       	brne	80002e3c <udd_interrupt+0x474>
80002e00:	fe 6b 02 20 	mov	r11,-130528
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80002e04:	f4 0b 00 08 	add	r8,r10,r11
80002e08:	e0 69 10 00 	mov	r9,4096
80002e0c:	91 09       	st.w	r8[0x0],r9
80002e0e:	fe 68 00 00 	mov	r8,-131072
80002e12:	91 55       	st.w	r8[0x14],r5
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80002e14:	78 08       	ld.w	r8,r12[0x0]
80002e16:	f1 de d3 81 	bfins	r8,lr,0x1c,0x1
80002e1a:	99 08       	st.w	r12[0x0],r8
80002e1c:	fe 68 01 00 	mov	r8,-130816
80002e20:	f4 08 00 09 	add	r9,r10,r8
				udd_disable_endpoint_interrupt(ep);
80002e24:	72 08       	ld.w	r8,r9[0x0]
80002e26:	a9 d8       	cbr	r8,0x9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
80002e28:	93 08       	st.w	r9[0x0],r8
80002e2a:	e0 3a fe 10 	sub	r10,130576
80002e2e:	e8 68 00 00 	mov	r8,524288
				udd_disable_endpoint_bank_autoswitch(ep);
80002e32:	95 08       	st.w	r10[0x0],r8
80002e34:	e4 68 00 00 	mov	r8,262144
80002e38:	95 08       	st.w	r10[0x0],r8
80002e3a:	c6 d8       	rjmp	80002f14 <udd_interrupt+0x54c>
80002e3c:	2f 0c       	sub	r12,-16
				udd_enable_stall_handshake(ep);
80002e3e:	2f c9       	sub	r9,-4
80002e40:	58 38       	cp.w	r8,3
80002e42:	fe 91 ff 65 	brne	80002d0c <udd_interrupt+0x344>
80002e46:	c6 e8       	rjmp	80002f22 <udd_interrupt+0x55a>
				udd_reset_data_toggle(ep);
80002e48:	30 89       	mov	r9,8
80002e4a:	ee c6 ff d0 	sub	r6,r7,-48
80002e4e:	91 29       	st.w	r8[0x8],r9
80002e50:	0e 9c       	mov	r12,r7
80002e52:	30 1b       	mov	r11,1
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80002e54:	2f 07       	sub	r7,-16
80002e56:	fe b0 fa b7 	rcall	800023c4 <udd_ep_finish_job>
80002e5a:	0c 37       	cp.w	r7,r6
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80002e5c:	cf a1       	brne	80002e50 <udd_interrupt+0x488>
#if __ICCAVR32__
#if !defined(AVR32_USBB_IRQ_GROUP)
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
80002e5e:	e0 a0 04 09 	rcall	80003670 <udc_reset>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80002e62:	fe b0 fc da 	rcall	80002816 <udd_reset_ep_ctrl>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
80002e66:	fe b0 fb a7 	rcall	800025b4 <udd_ctrl_init>
80002e6a:	c5 58       	rjmp	80002f14 <udd_interrupt+0x54c>
80002e6c:	70 49       	ld.w	r9,r8[0x10]

static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80002e6e:	ed b9 00 00 	bld	r9,0x0
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80002e72:	c1 41       	brne	80002e9a <udd_interrupt+0x4d2>
80002e74:	70 19       	ld.w	r9,r8[0x4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
80002e76:	ed b9 00 00 	bld	r9,0x0
		// Reset endpoint control management
		udd_ctrl_init();
80002e7a:	c1 01       	brne	80002e9a <udd_interrupt+0x4d2>
80002e7c:	f0 f9 08 00 	ld.w	r9,r8[2048]
		goto udd_interrupt_end;
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80002e80:	af c9       	cbr	r9,0xe
80002e82:	f1 49 08 00 	st.w	r8[2048],r9
80002e86:	30 19       	mov	r9,1
80002e88:	91 59       	st.w	r8[0x14],r9
80002e8a:	31 09       	mov	r9,16
80002e8c:	91 69       	st.w	r8[0x18],r9
80002e8e:	f0 f9 08 00 	ld.w	r9,r8[2048]
		otg_unfreeze_clock();
80002e92:	af a9       	sbr	r9,0xe
80002e94:	f1 49 08 00 	st.w	r8[2048],r9
80002e98:	c2 18       	rjmp	80002eda <udd_interrupt+0x512>
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80002e9a:	fe 68 00 00 	mov	r8,-131072
		udd_enable_wake_up_interrupt();
80002e9e:	70 49       	ld.w	r9,r8[0x10]
80002ea0:	ed b9 00 04 	bld	r9,0x4
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80002ea4:	c1 e1       	brne	80002ee0 <udd_interrupt+0x518>
80002ea6:	70 19       	ld.w	r9,r8[0x4]
80002ea8:	ed b9 00 04 	bld	r9,0x4
80002eac:	c1 a1       	brne	80002ee0 <udd_interrupt+0x518>
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80002eae:	f0 f9 08 00 	ld.w	r9,r8[2048]
80002eb2:	10 9a       	mov	r10,r8
80002eb4:	af c9       	cbr	r9,0xe
80002eb6:	f1 49 08 00 	st.w	r8[2048],r9
80002eba:	c0 58       	rjmp	80002ec4 <udd_interrupt+0x4fc>
80002ebc:	74 18       	ld.w	r8,r10[0x4]
80002ebe:	ed b8 00 00 	bld	r8,0x0
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80002ec2:	c0 60       	breq	80002ece <udd_interrupt+0x506>
80002ec4:	f4 f8 08 04 	ld.w	r8,r10[2052]
80002ec8:	ed b8 00 0e 	bld	r8,0xe
80002ecc:	cf 81       	brne	80002ebc <udd_interrupt+0x4f4>
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80002ece:	fe 68 00 00 	mov	r8,-131072
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
80002ed2:	31 09       	mov	r9,16
80002ed4:	91 59       	st.w	r8[0x14],r9
80002ed6:	30 1c       	mov	r12,1

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80002ed8:	91 6c       	st.w	r8[0x18],r12
80002eda:	fe b0 fb 3b 	rcall	80002550 <udd_sleep_mode>
80002ede:	c1 b8       	rjmp	80002f14 <udd_interrupt+0x54c>
80002ee0:	fe 68 00 00 	mov	r8,-131072
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80002ee4:	f0 f9 08 04 	ld.w	r9,r8[2052]
80002ee8:	ed b9 00 01 	bld	r9,0x1
		udd_enable_suspend_interrupt();
80002eec:	c1 41       	brne	80002f14 <udd_interrupt+0x54c>
		udd_sleep_mode(true);	// Enter in IDLE mode
80002eee:	f0 f9 08 00 	ld.w	r9,r8[2048]
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
80002ef2:	af c9       	cbr	r9,0xe
	}

	if (Is_udd_vbus_transition()) {
80002ef4:	f1 49 08 00 	st.w	r8[2048],r9
80002ef8:	30 29       	mov	r9,2
80002efa:	f1 49 08 08 	st.w	r8[2056],r9
80002efe:	f0 f9 08 00 	ld.w	r9,r8[2048]
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
80002f02:	af a9       	sbr	r9,0xe
80002f04:	f1 49 08 00 	st.w	r8[2048],r9
80002f08:	f0 fc 08 04 	ld.w	r12,r8[2052]
		udd_ack_vbus_transition();
80002f0c:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
80002f10:	e0 a0 05 d0 	rcall	80003ab0 <stdio_usb_vbus_event>
		otg_freeze_clock();
80002f14:	fe 68 00 00 	mov	r8,-131072
80002f18:	f0 f8 08 18 	ld.w	r8,r8[2072]
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_udd_vbus_high());
80002f1c:	e3 cd 40 fe 	ldm	sp++,r1-r7,lr
80002f20:	d6 03       	rete
80002f22:	fe 68 00 00 	mov	r8,-131072
80002f26:	70 1c       	ld.w	r12,r8[0x4]
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80002f28:	e2 1c 00 08 	andl	r12,0x8,COH
80002f2c:	c8 e1       	brne	80002e48 <udd_interrupt+0x480>
80002f2e:	c9 fb       	rjmp	80002e6c <udd_interrupt+0x4a4>

80002f30 <_stext>:
	return;
}
80002f30:	48 dd       	lddpc	sp,80002f64 <udata_clear_loop_end+0x4>
80002f32:	fe c0 d9 32 	sub	r0,pc,-9934
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80002f36:	e3 b0 00 01 	mtsr	0x4,r0
80002f3a:	d5 53       	csrf	0x15
80002f3c:	48 b0       	lddpc	r0,80002f68 <udata_clear_loop_end+0x8>
80002f3e:	48 c1       	lddpc	r1,80002f6c <udata_clear_loop_end+0xc>
80002f40:	02 30       	cp.w	r0,r1
80002f42:	c0 62       	brcc	80002f4e <idata_load_loop_end>
80002f44:	48 b2       	lddpc	r2,80002f70 <udata_clear_loop_end+0x10>

80002f46 <idata_load_loop>:
80002f46:	a5 05       	ld.d	r4,r2++
80002f48:	a1 24       	st.d	r0++,r4
80002f4a:	02 30       	cp.w	r0,r1
80002f4c:	cf d3       	brcs	80002f46 <idata_load_loop>

80002f4e <idata_load_loop_end>:
80002f4e:	48 a0       	lddpc	r0,80002f74 <udata_clear_loop_end+0x14>
80002f50:	48 a1       	lddpc	r1,80002f78 <udata_clear_loop_end+0x18>
80002f52:	02 30       	cp.w	r0,r1
80002f54:	c0 62       	brcc	80002f60 <udata_clear_loop_end>
80002f56:	30 02       	mov	r2,0
80002f58:	30 03       	mov	r3,0

80002f5a <udata_clear_loop>:
80002f5a:	a1 22       	st.d	r0++,r2
80002f5c:	02 30       	cp.w	r0,r1
80002f5e:	cf e3       	brcs	80002f5a <udata_clear_loop>

80002f60 <udata_clear_loop_end>:
80002f60:	fe cf f2 bc 	sub	pc,pc,-3396
80002f64:	00 01       	add	r1,r0
80002f66:	00 00       	add	r0,r0
80002f68:	00 00       	add	r0,r0
80002f6a:	00 08       	add	r8,r0
80002f6c:	00 00       	add	r0,r0
80002f6e:	05 d8       	ld.ub	r8,r2[0x5]
80002f70:	80 00       	ld.sh	r0,r0[0x0]
80002f72:	59 68       	cp.w	r8,22
80002f74:	00 00       	add	r0,r0
80002f76:	05 d8       	ld.ub	r8,r2[0x5]
80002f78:	00 00       	add	r0,r0
80002f7a:	0c c8       	st.b	r6++,r8

80002f7c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80002f7c:	d4 21       	pushm	r4-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f7e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80002f82:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80002f84:	fe 78 0c 00 	mov	r8,-62464
80002f88:	e0 69 03 07 	mov	r9,775
80002f8c:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80002f8e:	70 09       	ld.w	r9,r8[0x0]
80002f90:	a3 a9       	sbr	r9,0x2
80002f92:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002f94:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
80002f98:	71 59       	ld.w	r9,r8[0x54]
80002f9a:	fe 77 0c 00 	mov	r7,-62464
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80002f9e:	e2 19 00 80 	andl	r9,0x80,COH
80002fa2:	cf b0       	breq	80002f98 <sysclk_init+0x1c>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(0);
		osc_wait_ready(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80002fa4:	e0 6c 1b 00 	mov	r12,6912
80002fa8:	ea 1c 00 b7 	orh	r12,0xb7
80002fac:	fe b0 f8 3e 	rcall	80002028 <flashc_set_bus_freq>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fb0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80002fb4:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80002fb6:	6e 08       	ld.w	r8,r7[0x0]
80002fb8:	e0 18 ff fc 	andl	r8,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80002fbc:	a1 a8       	sbr	r8,0x0
	AVR32_PM.mcctrl = mcctrl;
80002fbe:	8f 08       	st.w	r7[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80002fc0:	e3 b9 00 00 	mtsr	0x0,r9
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
80002fc4:	e0 78 00 02 	mov	r8,65538
80002fc8:	8f 28       	st.w	r7[0x8],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80002fca:	30 b8       	mov	r8,11
80002fcc:	ea 18 00 18 	orh	r8,0x18
80002fd0:	8f 48       	st.w	r7[0x10],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_PBBMASK)
	AVR32_PM.pbbmask = SYSCLK_INIT_MINIMAL_PBBMASK | CONFIG_SYSCLK_INIT_PBBMASK;
80002fd2:	30 08       	mov	r8,0
80002fd4:	8f 58       	st.w	r7[0x14],r8
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
80002fd6:	e0 68 0e 03 	mov	r8,3587
80002fda:	8f 38       	st.w	r7[0xc],r8

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80002fdc:	d8 22       	popm	r4-r7,pc
80002fde:	d7 03       	nop

80002fe0 <sysclk_priv_enable_module>:
80002fe0:	e1 b9 00 00 	mfsr	r9,0x0
static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
	cpu_irq_disable();
80002fe4:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80002fe6:	fe 7a 0c 00 	mov	r10,-62464
80002fea:	75 58       	ld.w	r8,r10[0x54]
80002fec:	ed b8 00 06 	bld	r8,0x6
80002ff0:	cf d1       	brne	80002fea <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80002ff2:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002ff4:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
80002ff6:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80002ffa:	e0 2c f3 f8 	sub	r12,62456
80002ffe:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80003000:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003002:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003004:	e3 b9 00 00 	mtsr	0x0,r9

	cpu_irq_restore(flags);
}
80003008:	5e fc       	retal	r12
8000300a:	d7 03       	nop

8000300c <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000300c:	d4 21       	pushm	r4-r7,lr
8000300e:	58 9c       	cp.w	r12,9
80003010:	5f 07       	sreq	r7
80003012:	18 96       	mov	r6,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003014:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80003018:	d3 03       	ssrf	0x10
		pbus_id = 1;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_bus_refcount[pbus_id])
8000301a:	48 e8       	lddpc	r8,80003050 <sysclk_enable_pbb_module+0x44>
8000301c:	f0 07 07 09 	ld.ub	r9,r8[r7]
80003020:	30 08       	mov	r8,0
80003022:	f0 09 18 00 	cp.b	r9,r8
80003026:	c0 91       	brne	80003038 <sysclk_enable_pbb_module+0x2c>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003028:	ee 0b 15 01 	lsl	r11,r7,0x1
8000302c:	30 1c       	mov	r12,1
8000302e:	f9 bb 01 06 	movne	r11,6
80003032:	f9 bb 00 02 	moveq	r11,2
80003036:	cd 5f       	rcall	80002fe0 <sysclk_priv_enable_module>
80003038:	48 68       	lddpc	r8,80003050 <sysclk_enable_pbb_module+0x44>
		sysclk_enable_hsb_module(2 + (4 * pbus_id));
	sysclk_bus_refcount[pbus_id]++;
8000303a:	f0 07 07 09 	ld.ub	r9,r8[r7]
8000303e:	2f f9       	sub	r9,-1
80003040:	f0 07 0b 09 	st.b	r8[r7],r9
80003044:	e3 b5 00 00 	mtsr	0x0,r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003048:	30 3c       	mov	r12,3

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000304a:	0c 9b       	mov	r11,r6
8000304c:	cc af       	rcall	80002fe0 <sysclk_priv_enable_module>
8000304e:	d8 22       	popm	r4-r7,pc
80003050:	00 00       	add	r0,r0
}
80003052:	07 24       	ld.uh	r4,r3++

80003054 <sysclk_enable_usb>:
80003054:	d4 01       	pushm	lr
80003056:	30 1c       	mov	r12,1
80003058:	cd af       	rcall	8000300c <sysclk_enable_pbb_module>
8000305a:	30 3b       	mov	r11,3
8000305c:	30 1c       	mov	r12,1
8000305e:	cc 1f       	rcall	80002fe0 <sysclk_priv_enable_module>
80003060:	e1 ba 00 00 	mfsr	r10,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003064:	d3 03       	ssrf	0x10
80003066:	fe 78 0c 00 	mov	r8,-62464
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
8000306a:	e0 69 03 07 	mov	r9,775
8000306e:	91 a9       	st.w	r8[0x28],r9
80003070:	70 09       	ld.w	r9,r8[0x0]
80003072:	a3 a9       	sbr	r9,0x2
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80003074:	91 09       	st.w	r8[0x0],r9
80003076:	e3 ba 00 00 	mtsr	0x0,r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000307a:	71 59       	ld.w	r9,r8[0x54]
8000307c:	ed b9 00 07 	bld	r9,0x7
80003080:	cf d1       	brne	8000307a <sysclk_enable_usb+0x26>
80003082:	30 49       	mov	r9,4
80003084:	fe 78 0c 00 	mov	r8,-62464
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80003088:	f1 49 00 70 	st.w	r8[112],r9
8000308c:	d8 02       	popm	pc
8000308e:	d7 03       	nop

80003090 <udi_cdc_data_disable>:
	UDI_CDC_DISABLE_EXT();
}

void udi_cdc_data_disable(void)
{
}
80003090:	5e fc       	retal	r12
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
80003092:	d7 03       	nop

80003094 <udi_cdc_comm_setup>:


bool udi_cdc_comm_setup(void)
{
	if (Udd_setup_is_in()) {
80003094:	49 98       	lddpc	r8,800030f8 <udi_cdc_comm_setup+0x64>
80003096:	30 0b       	mov	r11,0
80003098:	11 8a       	ld.ub	r10,r8[0x0]
8000309a:	14 99       	mov	r9,r10
8000309c:	e2 19 00 60 	andl	r9,0x60,COH
800030a0:	f6 0a 18 00 	cp.b	r10,r11
800030a4:	c1 04       	brge	800030c4 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests 
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800030a6:	e0 49 00 20 	cp.w	r9,32
800030aa:	c2 51       	brne	800030f4 <udi_cdc_comm_setup+0x60>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800030ac:	11 9a       	ld.ub	r10,r8[0x1]
800030ae:	32 19       	mov	r9,33
800030b0:	f2 0a 18 00 	cp.b	r10,r9
800030b4:	c2 01       	brne	800030f4 <udi_cdc_comm_setup+0x60>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
800030b6:	90 39       	ld.sh	r9,r8[0x6]
800030b8:	30 7a       	mov	r10,7
800030ba:	f4 09 19 00 	cp.h	r9,r10
800030be:	c1 b1       	brne	800030f4 <udi_cdc_comm_setup+0x60>
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
800030c0:	b0 69       	st.h	r8[0xc],r9
800030c2:	c1 68       	rjmp	800030ee <udi_cdc_comm_setup+0x5a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests  
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800030c4:	e0 49 00 20 	cp.w	r9,32
800030c8:	c1 61       	brne	800030f4 <udi_cdc_comm_setup+0x60>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
800030ca:	11 9a       	ld.ub	r10,r8[0x1]
800030cc:	f2 0a 18 00 	cp.b	r10,r9
800030d0:	c0 60       	breq	800030dc <udi_cdc_comm_setup+0x48>
800030d2:	32 28       	mov	r8,34
800030d4:	f0 0a 18 00 	cp.b	r10,r8
800030d8:	c0 e1       	brne	800030f4 <udi_cdc_comm_setup+0x60>
800030da:	c0 c8       	rjmp	800030f2 <udi_cdc_comm_setup+0x5e>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
800030dc:	90 39       	ld.sh	r9,r8[0x6]
800030de:	30 7a       	mov	r10,7
800030e0:	f4 09 19 00 	cp.h	r9,r10
800030e4:	c0 81       	brne	800030f4 <udi_cdc_comm_setup+0x60>
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
800030e6:	b0 69       	st.h	r8[0xc],r9
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
				udd_g_ctrlreq.callback =
800030e8:	fe c9 ff e4 	sub	r9,pc,-28
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
800030ec:	91 49       	st.w	r8[0x10],r9
800030ee:	48 49       	lddpc	r9,800030fc <udi_cdc_comm_setup+0x68>
						(uint8_t *) &
						udi_cdc_line_coding;
				udd_g_ctrlreq.payload_size =
800030f0:	91 29       	st.w	r8[0x8],r9
						sizeof(udi_cdc_line_coding);
				return true;
800030f2:	5e ff       	retal	1
800030f4:	5e fd       	retal	0
800030f6:	d7 03       	nop
800030f8:	00 00       	add	r0,r0
800030fa:	0c 98       	mov	r8,r6
800030fc:	00 00       	add	r0,r0
800030fe:	07 28       	ld.uh	r8,r3++

80003100 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003100:	5e fd       	retal	0

80003102 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003102:	5e fd       	retal	0

80003104 <udi_cdc_line_coding_received>:

void udi_cdc_line_coding_received(void)
{
	// Send line coding to component associated to CDC
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));
}
80003104:	5e fc       	retal	r12
80003106:	d7 03       	nop

80003108 <udi_cdc_is_tx_ready>:


bool udi_cdc_is_tx_ready(void)
{
	irqflags_t flags;
	if (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS) {
80003108:	49 59       	lddpc	r9,8000315c <udi_cdc_is_tx_ready+0x54>
8000310a:	49 68       	lddpc	r8,80003160 <udi_cdc_is_tx_ready+0x58>
8000310c:	11 8a       	ld.ub	r10,r8[0x0]
8000310e:	f2 0a 04 1a 	ld.sh	r10,r9[r10<<0x1]
80003112:	e0 69 01 40 	mov	r9,320
80003116:	f2 0a 19 00 	cp.h	r10,r9
8000311a:	c0 20       	breq	8000311e <udi_cdc_is_tx_ready+0x16>
8000311c:	5e ff       	retal	1
		return true;
	}
	if (!udi_cdc_tx_both_buf_to_send) {
8000311e:	49 29       	lddpc	r9,80003164 <udi_cdc_is_tx_ready+0x5c>
80003120:	13 8a       	ld.ub	r10,r9[0x0]
80003122:	58 0a       	cp.w	r10,0
80003124:	c1 01       	brne	80003144 <udi_cdc_is_tx_ready+0x3c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003126:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000312a:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
		if (!udi_cdc_tx_trans_ongoing) {
8000312c:	48 fb       	lddpc	r11,80003168 <udi_cdc_is_tx_ready+0x60>
8000312e:	17 8b       	ld.ub	r11,r11[0x0]
80003130:	58 0b       	cp.w	r11,0
80003132:	c0 71       	brne	80003140 <udi_cdc_is_tx_ready+0x38>
			// No transfer on-going
			// then use the other buffer to store data
			udi_cdc_tx_both_buf_to_send = true;
80003134:	30 1b       	mov	r11,1
80003136:	b2 8b       	st.b	r9[0x0],r11
			udi_cdc_tx_buf_sel = (udi_cdc_tx_buf_sel==0)?1:0;
80003138:	11 89       	ld.ub	r9,r8[0x0]
8000313a:	58 09       	cp.w	r9,0
8000313c:	5f 09       	sreq	r9
8000313e:	b0 89       	st.b	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003140:	e3 ba 00 00 	mtsr	0x0,r10
		}
	  	cpu_irq_restore(flags);
	}
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
80003144:	48 78       	lddpc	r8,80003160 <udi_cdc_is_tx_ready+0x58>
80003146:	11 89       	ld.ub	r9,r8[0x0]
80003148:	48 58       	lddpc	r8,8000315c <udi_cdc_is_tx_ready+0x54>
8000314a:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000314e:	e0 68 01 40 	mov	r8,320
80003152:	f0 09 19 00 	cp.h	r9,r8
80003156:	5f 1c       	srne	r12
}
80003158:	5e fc       	retal	r12
8000315a:	d7 03       	nop
8000315c:	00 00       	add	r0,r0
8000315e:	07 30       	ld.ub	r0,r3++
80003160:	00 00       	add	r0,r0
80003162:	07 2f       	ld.uh	pc,r3++
80003164:	00 00       	add	r0,r0
80003166:	0c 41       	or	r1,r6
80003168:	00 00       	add	r0,r0
8000316a:	09 be       	ld.ub	lr,r4[0x3]

8000316c <udi_cdc_putc>:


int udi_cdc_putc(int value)
{
8000316c:	d4 31       	pushm	r0-r7,lr
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000316e:	49 68       	lddpc	r8,800031c4 <udi_cdc_putc+0x58>
	return (udi_cdc_tx_buf_nb[udi_cdc_tx_buf_sel]!=UDI_CDC_TX_BUFFERS);
}


int udi_cdc_putc(int value)
{
80003170:	18 97       	mov	r7,r12
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003172:	11 e9       	ld.ub	r9,r8[0x6]

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
		if (!udi_cdc_running) {
80003174:	49 52       	lddpc	r2,800031c8 <udi_cdc_putc+0x5c>
{
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003176:	30 98       	mov	r8,9
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003178:	49 53       	lddpc	r3,800031cc <udi_cdc_putc+0x60>
{
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
8000317a:	f0 09 18 00 	cp.b	r9,r8
8000317e:	5f 05       	sreq	r5
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
80003180:	49 46       	lddpc	r6,800031d0 <udi_cdc_putc+0x64>
80003182:	49 54       	lddpc	r4,800031d4 <udi_cdc_putc+0x68>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_putc_process_one_byte:
	// Check avaliable space
	if (!udi_cdc_is_tx_ready()) {
80003184:	cc 2f       	rcall	80003108 <udi_cdc_is_tx_ready>
80003186:	c0 51       	brne	80003190 <udi_cdc_putc+0x24>
80003188:	05 8c       	ld.ub	r12,r2[0x0]
		if (!udi_cdc_running) {
8000318a:	58 0c       	cp.w	r12,0
8000318c:	cf c1       	brne	80003184 <udi_cdc_putc+0x18>
8000318e:	d8 32       	popm	r0-r7,pc
80003190:	e1 ba 00 00 	mfsr	r10,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003194:	d3 03       	ssrf	0x10
	cpu_irq_disable();
80003196:	07 88       	ld.ub	r8,r3[0x0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel;
80003198:	ec 08 04 19 	ld.sh	r9,r6[r8<<0x1]
	udi_cdc_tx_buf[buf_sel][udi_cdc_tx_buf_nb[buf_sel]++] = value;
8000319c:	f2 cb ff ff 	sub	r11,r9,-1
800031a0:	5c 79       	castu.h	r9
800031a2:	ec 08 0a 1b 	st.h	r6[r8<<0x1],r11
800031a6:	f0 08 00 28 	add	r8,r8,r8<<0x2
800031aa:	a7 68       	lsl	r8,0x6
800031ac:	f0 09 00 09 	add	r9,r8,r9
800031b0:	e8 09 0b 07 	st.b	r4[r9],r7
800031b4:	e3 ba 00 00 	mtsr	0x0,r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800031b8:	58 05       	cp.w	r5,0
	cpu_irq_restore(flags);

	if (b_databit_9) {
800031ba:	c0 21       	brne	800031be <udi_cdc_putc+0x52>
800031bc:	da 3a       	popm	r0-r7,pc,r12=1
800031be:	a9 47       	asr	r7,0x8
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
800031c0:	30 05       	mov	r5,0
800031c2:	ce 1b       	rjmp	80003184 <udi_cdc_putc+0x18>
800031c4:	00 00       	add	r0,r0
800031c6:	07 28       	ld.uh	r8,r3++
800031c8:	00 00       	add	r0,r0
800031ca:	09 bd       	ld.ub	sp,r4[0x3]
800031cc:	00 00       	add	r0,r0
800031ce:	07 2f       	ld.uh	pc,r3++
800031d0:	00 00       	add	r0,r0
800031d2:	07 30       	ld.ub	r0,r3++
800031d4:	00 00       	add	r0,r0
800031d6:	07 34       	ld.ub	r4,r3++

800031d8 <udi_cdc_rx_start>:
800031d8:	d4 21       	pushm	r4-r7,lr
800031da:	e1 bb 00 00 	mfsr	r11,0x0
800031de:	d3 03       	ssrf	0x10
{
	irqflags_t flags;
	uint8_t buf_sel_trans;

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel;
800031e0:	49 59       	lddpc	r9,80003234 <udi_cdc_rx_start+0x5c>
800031e2:	13 88       	ld.ub	r8,r9[0x0]
	if (udi_cdc_rx_trans_ongoing ||
800031e4:	49 5c       	lddpc	r12,80003238 <udi_cdc_rx_start+0x60>
800031e6:	19 8e       	ld.ub	lr,r12[0x0]
800031e8:	58 0e       	cp.w	lr,0
800031ea:	c0 a1       	brne	800031fe <udi_cdc_rx_start+0x26>
		(udi_cdc_rx_pos < udi_cdc_rx_buf_nb[buf_sel_trans])) {
800031ec:	49 4a       	lddpc	r10,8000323c <udi_cdc_rx_start+0x64>
800031ee:	49 56       	lddpc	r6,80003240 <udi_cdc_rx_start+0x68>
800031f0:	94 07       	ld.sh	r7,r10[0x0]
800031f2:	ec 08 04 16 	ld.sh	r6,r6[r8<<0x1]
800031f6:	ee 06 19 00 	cp.h	r6,r7
800031fa:	e0 88 00 05 	brls	80003204 <udi_cdc_rx_start+0x2c>
800031fe:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
80003202:	d8 2a       	popm	r4-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos = 0;
80003204:	b4 0e       	st.h	r10[0x0],lr
	udi_cdc_rx_buf_sel = (buf_sel_trans==0)?1:0;
80003206:	58 08       	cp.w	r8,0
80003208:	5f 0e       	sreq	lr
8000320a:	b2 8e       	st.b	r9[0x0],lr

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing = true;
8000320c:	30 1e       	mov	lr,1
8000320e:	b8 8e       	st.b	r12[0x0],lr
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003210:	e3 bb 00 00 	mtsr	0x0,r11
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
80003214:	94 0a       	ld.sh	r10,r10[0x0]
	
	if (udi_cdc_is_rx_ready()) {
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
80003216:	f0 08 00 28 	add	r8,r8,r8<<0x2
}


bool udi_cdc_is_rx_ready(void)
{
	return (udi_cdc_rx_pos < udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]);
8000321a:	13 89       	ld.ub	r9,r9[0x0]
	
	if (udi_cdc_is_rx_ready()) {
		UDI_CDC_RX_NOTIFY();
	}

	return udd_ep_run( UDI_CDC_DATA_EP_OUT,
8000321c:	a7 68       	lsl	r8,0x6
8000321e:	48 aa       	lddpc	r10,80003244 <udi_cdc_rx_start+0x6c>
80003220:	e0 69 01 40 	mov	r9,320
80003224:	10 0a       	add	r10,r8
80003226:	30 1b       	mov	r11,1
80003228:	fe c8 ff 68 	sub	r8,pc,-152
8000322c:	30 2c       	mov	r12,2
8000322e:	fe b0 f8 f7 	rcall	8000241c <udd_ep_run>
					true,
					udi_cdc_rx_buf[buf_sel_trans],
					UDI_CDC_RX_BUFFERS,
					udi_cdc_data_recevied);
}
80003232:	d8 22       	popm	r4-r7,pc
80003234:	00 00       	add	r0,r0
80003236:	09 bc       	ld.ub	r12,r4[0x3]
80003238:	00 00       	add	r0,r0
8000323a:	0c 40       	or	r0,r6
8000323c:	00 00       	add	r0,r0
8000323e:	09 b8       	ld.ub	r8,r4[0x3]
80003240:	00 00       	add	r0,r0
80003242:	09 b4       	ld.ub	r4,r4[0x3]
80003244:	00 00       	add	r0,r0
80003246:	09 c0       	ld.ub	r0,r4[0x4]

80003248 <udi_cdc_getc>:
80003248:	d4 31       	pushm	r0-r7,lr
8000324a:	49 88       	lddpc	r8,800032a8 <udi_cdc_getc+0x60>
8000324c:	11 e9       	ld.ub	r9,r8[0x6]
8000324e:	30 98       	mov	r8,9

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
80003250:	49 77       	lddpc	r7,800032ac <udi_cdc_getc+0x64>
int udi_cdc_getc(void)
{
	int rx_data = 0;
	bool b_databit_9;

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);
80003252:	f0 09 18 00 	cp.b	r9,r8
80003256:	5f 04       	sreq	r4
80003258:	30 08       	mov	r8,0

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
8000325a:	49 65       	lddpc	r5,800032b0 <udi_cdc_getc+0x68>
8000325c:	49 61       	lddpc	r1,800032b4 <udi_cdc_getc+0x6c>
		if (!udi_cdc_running) {
8000325e:	49 72       	lddpc	r2,800032b8 <udi_cdc_getc+0x70>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
80003260:	49 73       	lddpc	r3,800032bc <udi_cdc_getc+0x74>
80003262:	c0 48       	rjmp	8000326a <udi_cdc_getc+0x22>
	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
		if (!udi_cdc_running) {
80003264:	05 86       	ld.ub	r6,r2[0x0]
80003266:	58 06       	cp.w	r6,0
80003268:	c1 e0       	breq	800032a4 <udi_cdc_getc+0x5c>

	b_databit_9 = (9 == udi_cdc_line_coding.bDataBits);

udi_cdc_getc_process_one_byte:
	// Check avaliable data
	while (udi_cdc_rx_pos >= udi_cdc_rx_buf_nb[udi_cdc_rx_buf_sel]) {
8000326a:	8e 09       	ld.sh	r9,r7[0x0]
8000326c:	0b 8a       	ld.ub	r10,r5[0x0]
8000326e:	e2 0a 04 1a 	ld.sh	r10,r1[r10<<0x1]
80003272:	f2 0a 19 00 	cp.h	r10,r9
80003276:	fe 98 ff f7 	brls	80003264 <udi_cdc_getc+0x1c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[udi_cdc_rx_buf_sel][udi_cdc_rx_pos];
8000327a:	0b 89       	ld.ub	r9,r5[0x0]
8000327c:	8e 0a       	ld.sh	r10,r7[0x0]
8000327e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003282:	5c 7a       	castu.h	r10
80003284:	a7 69       	lsl	r9,0x6
80003286:	14 09       	add	r9,r10
80003288:	e6 09 07 06 	ld.ub	r6,r3[r9]
8000328c:	f1 e6 10 06 	or	r6,r8,r6
	udi_cdc_rx_pos++;
80003290:	8e 08       	ld.sh	r8,r7[0x0]
80003292:	2f f8       	sub	r8,-1
80003294:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start();
80003296:	ca 1f       	rcall	800031d8 <udi_cdc_rx_start>
80003298:	58 04       	cp.w	r4,0

	if (b_databit_9) {
8000329a:	c0 50       	breq	800032a4 <udi_cdc_getc+0x5c>
8000329c:	ec 08 15 08 	lsl	r8,r6,0x8
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
800032a0:	30 04       	mov	r4,0
800032a2:	ce 4b       	rjmp	8000326a <udi_cdc_getc+0x22>
800032a4:	0c 9c       	mov	r12,r6
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
800032a6:	d8 32       	popm	r0-r7,pc
800032a8:	00 00       	add	r0,r0
800032aa:	07 28       	ld.uh	r8,r3++
800032ac:	00 00       	add	r0,r0
800032ae:	09 b8       	ld.ub	r8,r4[0x3]
800032b0:	00 00       	add	r0,r0
800032b2:	09 bc       	ld.ub	r12,r4[0x3]
800032b4:	00 00       	add	r0,r0
800032b6:	09 b4       	ld.ub	r4,r4[0x3]
800032b8:	00 00       	add	r0,r0
800032ba:	09 bd       	ld.ub	sp,r4[0x3]
800032bc:	00 00       	add	r0,r0
800032be:	09 c0       	ld.ub	r0,r4[0x4]

800032c0 <udi_cdc_data_recevied>:
800032c0:	d4 01       	pushm	lr
800032c2:	58 0c       	cp.w	r12,0
800032c4:	c0 e1       	brne	800032e0 <udi_cdc_data_recevied+0x20>
800032c6:	48 88       	lddpc	r8,800032e4 <udi_cdc_data_recevied+0x24>

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel==0)?1:0;
800032c8:	11 88       	ld.ub	r8,r8[0x0]
	udi_cdc_rx_buf_nb[buf_sel_trans] = n;
800032ca:	58 08       	cp.w	r8,0
800032cc:	f9 b8 00 02 	moveq	r8,2
800032d0:	f9 b8 01 00 	movne	r8,0
800032d4:	48 59       	lddpc	r9,800032e8 <udi_cdc_data_recevied+0x28>
800032d6:	f2 08 0a 0b 	st.h	r9[r8],r11
	udi_cdc_rx_trans_ongoing = false;
800032da:	48 58       	lddpc	r8,800032ec <udi_cdc_data_recevied+0x2c>
800032dc:	b0 8c       	st.b	r8[0x0],r12
	udi_cdc_rx_start();
800032de:	c7 df       	rcall	800031d8 <udi_cdc_rx_start>
800032e0:	d8 02       	popm	pc
800032e2:	d7 03       	nop
800032e4:	00 00       	add	r0,r0
800032e6:	09 bc       	ld.ub	r12,r4[0x3]
800032e8:	00 00       	add	r0,r0
800032ea:	09 b4       	ld.ub	r4,r4[0x3]
800032ec:	00 00       	add	r0,r0
800032ee:	0c 40       	or	r0,r6

800032f0 <udi_cdc_tx_send>:
800032f0:	d4 21       	pushm	r4-r7,lr
800032f2:	4a 98       	lddpc	r8,80003394 <udi_cdc_tx_send+0xa4>
{
	irqflags_t flags;
	uint8_t buf_sel_trans;
	bool b_short_packet;

	if (udi_cdc_tx_trans_ongoing) {
800032f4:	11 88       	ld.ub	r8,r8[0x0]
800032f6:	58 08       	cp.w	r8,0
800032f8:	c4 c1       	brne	80003390 <udi_cdc_tx_send+0xa0>
800032fa:	4a 86       	lddpc	r6,80003398 <udi_cdc_tx_send+0xa8>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
800032fc:	fe b0 f7 b5 	rcall	80002266 <udd_is_high_speed>
80003300:	c0 80       	breq	80003310 <udi_cdc_tx_send+0x20>
		if (udi_cdc_tx_sof_num == udd_get_micro_frame_number()) {
80003302:	8c 07       	ld.sh	r7,r6[0x0]
80003304:	fe b0 f7 cf 	rcall	800022a2 <udd_get_micro_frame_number>
80003308:	f8 07 19 00 	cp.h	r7,r12
8000330c:	c0 81       	brne	8000331c <udi_cdc_tx_send+0x2c>
8000330e:	d8 22       	popm	r4-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num == udd_get_frame_number()) {
80003310:	8c 07       	ld.sh	r7,r6[0x0]
80003312:	fe b0 f7 c2 	rcall	80002296 <udd_get_frame_number>
80003316:	f8 07 19 00 	cp.h	r7,r12
8000331a:	c3 b0       	breq	80003390 <udi_cdc_tx_send+0xa0>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000331c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003320:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save();	// to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel;
80003322:	49 f8       	lddpc	r8,8000339c <udi_cdc_tx_send+0xac>
80003324:	11 87       	ld.ub	r7,r8[0x0]
	if (!udi_cdc_tx_both_buf_to_send) {
80003326:	49 fa       	lddpc	r10,800033a0 <udi_cdc_tx_send+0xb0>
80003328:	15 8a       	ld.ub	r10,r10[0x0]
8000332a:	58 0a       	cp.w	r10,0
8000332c:	c0 51       	brne	80003336 <udi_cdc_tx_send+0x46>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel = (buf_sel_trans==0)?1:0;
8000332e:	58 07       	cp.w	r7,0
80003330:	5f 0a       	sreq	r10
80003332:	b0 8a       	st.b	r8[0x0],r10
80003334:	c0 38       	rjmp	8000333a <udi_cdc_tx_send+0x4a>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
80003336:	58 07       	cp.w	r7,0
80003338:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing = true;
8000333a:	30 1a       	mov	r10,1
8000333c:	49 68       	lddpc	r8,80003394 <udi_cdc_tx_send+0xa4>
8000333e:	b0 8a       	st.b	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003340:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003344:	49 88       	lddpc	r8,800033a4 <udi_cdc_tx_send+0xb4>
80003346:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
8000334a:	e0 68 01 40 	mov	r8,320
8000334e:	f0 09 19 00 	cp.h	r9,r8
80003352:	5f 15       	srne	r5
	if (b_short_packet) {
80003354:	58 05       	cp.w	r5,0
80003356:	c0 c0       	breq	8000336e <udi_cdc_tx_send+0x7e>
80003358:	49 06       	lddpc	r6,80003398 <udi_cdc_tx_send+0xa8>
		if (udd_is_high_speed()) {
8000335a:	fe b0 f7 86 	rcall	80002266 <udd_is_high_speed>
8000335e:	c0 40       	breq	80003366 <udi_cdc_tx_send+0x76>
			udi_cdc_tx_sof_num = udd_get_micro_frame_number();
80003360:	fe b0 f7 a1 	rcall	800022a2 <udd_get_micro_frame_number>
80003364:	c0 38       	rjmp	8000336a <udi_cdc_tx_send+0x7a>
		}else{
			udi_cdc_tx_sof_num = udd_get_frame_number();
80003366:	fe b0 f7 98 	rcall	80002296 <udd_get_frame_number>
8000336a:	ac 0c       	st.h	r6[0x0],r12
8000336c:	c0 38       	rjmp	80003372 <udi_cdc_tx_send+0x82>
		}
	}else{
		udi_cdc_tx_sof_num = 0; // Force next transfer without wait SOF
8000336e:	48 b8       	lddpc	r8,80003398 <udi_cdc_tx_send+0xa8>
80003370:	b0 05       	st.h	r8[0x0],r5
	}

	// Send the buffer with enable of short packet
	udd_ep_run( UDI_CDC_DATA_EP_IN,
80003372:	48 d8       	lddpc	r8,800033a4 <udi_cdc_tx_send+0xb4>
80003374:	48 da       	lddpc	r10,800033a8 <udi_cdc_tx_send+0xb8>
80003376:	f0 07 05 19 	ld.uh	r9,r8[r7<<0x1]
8000337a:	0a 9b       	mov	r11,r5
8000337c:	ee 07 00 27 	add	r7,r7,r7<<0x2
80003380:	fe c8 ff d4 	sub	r8,pc,-44
80003384:	a7 67       	lsl	r7,0x6
80003386:	e0 6c 00 81 	mov	r12,129
8000338a:	0e 0a       	add	r10,r7
8000338c:	fe b0 f8 48 	rcall	8000241c <udd_ep_run>
80003390:	d8 22       	popm	r4-r7,pc
80003392:	d7 03       	nop
80003394:	00 00       	add	r0,r0
80003396:	09 be       	ld.ub	lr,r4[0x3]
80003398:	00 00       	add	r0,r0
8000339a:	09 ba       	ld.ub	r10,r4[0x3]
8000339c:	00 00       	add	r0,r0
8000339e:	07 2f       	ld.uh	pc,r3++
800033a0:	00 00       	add	r0,r0
800033a2:	0c 41       	or	r1,r6
800033a4:	00 00       	add	r0,r0
800033a6:	07 30       	ld.ub	r0,r3++
800033a8:	00 00       	add	r0,r0
800033aa:	07 34       	ld.ub	r4,r3++

800033ac <udi_cdc_data_sent>:
800033ac:	d4 01       	pushm	lr
800033ae:	58 0c       	cp.w	r12,0
800033b0:	c1 01       	brne	800033d0 <udi_cdc_data_sent+0x24>
800033b2:	48 9a       	lddpc	r10,800033d4 <udi_cdc_data_sent+0x28>
800033b4:	48 99       	lddpc	r9,800033d8 <udi_cdc_data_sent+0x2c>
800033b6:	13 89       	ld.ub	r9,r9[0x0]
800033b8:	58 09       	cp.w	r9,0
800033ba:	f9 b9 00 02 	moveq	r9,2
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
800033be:	f9 b9 01 00 	movne	r9,0
	udi_cdc_tx_both_buf_to_send = false;
800033c2:	b4 8c       	st.b	r10[0x0],r12
{
	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[(udi_cdc_tx_buf_sel==0)?1:0] = 0;
800033c4:	48 6a       	lddpc	r10,800033dc <udi_cdc_data_sent+0x30>
800033c6:	f4 09 0a 0c 	st.h	r10[r9],r12
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_trans_ongoing = false;
800033ca:	48 69       	lddpc	r9,800033e0 <udi_cdc_data_sent+0x34>
800033cc:	b2 8c       	st.b	r9[0x0],r12
	udi_cdc_tx_send();
800033ce:	c9 1f       	rcall	800032f0 <udi_cdc_tx_send>
800033d0:	d8 02       	popm	pc
800033d2:	d7 03       	nop
800033d4:	00 00       	add	r0,r0
800033d6:	0c 41       	or	r1,r6
800033d8:	00 00       	add	r0,r0
800033da:	07 2f       	ld.uh	pc,r3++
800033dc:	00 00       	add	r0,r0
800033de:	07 30       	ld.ub	r0,r3++
800033e0:	00 00       	add	r0,r0
800033e2:	09 be       	ld.ub	lr,r4[0x3]

800033e4 <udi_cdc_data_sof_notify>:
800033e4:	d4 01       	pushm	lr
800033e6:	c8 5f       	rcall	800032f0 <udi_cdc_tx_send>
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
	udi_cdc_tx_send();
800033e8:	d8 02       	popm	pc
}
800033ea:	d7 03       	nop

800033ec <udi_cdc_data_enable>:
800033ec:	d4 21       	pushm	r4-r7,lr
800033ee:	48 e9       	lddpc	r9,80003424 <udi_cdc_data_enable+0x38>
}

bool udi_cdc_data_enable(void)
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
800033f0:	30 08       	mov	r8,0
800033f2:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_both_buf_to_send = false;
800033f4:	48 d9       	lddpc	r9,80003428 <udi_cdc_data_enable+0x3c>
800033f6:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_buf_sel = 0;
	udi_cdc_tx_buf_nb[0] = 0;
800033f8:	48 d9       	lddpc	r9,8000342c <udi_cdc_data_enable+0x40>
800033fa:	30 07       	mov	r7,0
	udi_cdc_tx_buf_nb[1] = 0;
800033fc:	b2 17       	st.h	r9[0x2],r7
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_buf_sel = 0;
	udi_cdc_tx_buf_nb[0] = 0;
800033fe:	b2 07       	st.h	r9[0x0],r7
bool udi_cdc_data_enable(void)
{
	// Initialize TX management
	udi_cdc_tx_trans_ongoing = false;
	udi_cdc_tx_both_buf_to_send = false;
	udi_cdc_tx_buf_sel = 0;
80003400:	48 c9       	lddpc	r9,80003430 <udi_cdc_data_enable+0x44>
80003402:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_buf_nb[0] = 0;
	udi_cdc_tx_buf_nb[1] = 0;
	udi_cdc_tx_sof_num = 0;
80003404:	48 c8       	lddpc	r8,80003434 <udi_cdc_data_enable+0x48>
80003406:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send();
80003408:	c7 4f       	rcall	800032f0 <udi_cdc_tx_send>
8000340a:	48 c8       	lddpc	r8,80003438 <udi_cdc_data_enable+0x4c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing = false;
8000340c:	b0 87       	st.b	r8[0x0],r7
8000340e:	48 c8       	lddpc	r8,8000343c <udi_cdc_data_enable+0x50>
	udi_cdc_rx_buf_sel = 0;
80003410:	b0 87       	st.b	r8[0x0],r7
80003412:	48 c8       	lddpc	r8,80003440 <udi_cdc_data_enable+0x54>
	udi_cdc_rx_buf_nb[0] = 0;
80003414:	b0 07       	st.h	r8[0x0],r7
80003416:	48 c8       	lddpc	r8,80003444 <udi_cdc_data_enable+0x58>
	udi_cdc_rx_pos = 0;
80003418:	b0 07       	st.h	r8[0x0],r7
8000341a:	cd fe       	rcall	800031d8 <udi_cdc_rx_start>
	udi_cdc_running = udi_cdc_rx_start();
8000341c:	48 b8       	lddpc	r8,80003448 <udi_cdc_data_enable+0x5c>
8000341e:	b0 8c       	st.b	r8[0x0],r12
80003420:	11 8c       	ld.ub	r12,r8[0x0]
80003422:	d8 22       	popm	r4-r7,pc
	return udi_cdc_running;
80003424:	00 00       	add	r0,r0
}
80003426:	09 be       	ld.ub	lr,r4[0x3]
80003428:	00 00       	add	r0,r0
8000342a:	0c 41       	or	r1,r6
8000342c:	00 00       	add	r0,r0
8000342e:	07 30       	ld.ub	r0,r3++
80003430:	00 00       	add	r0,r0
80003432:	07 2f       	ld.uh	pc,r3++
80003434:	00 00       	add	r0,r0
80003436:	09 ba       	ld.ub	r10,r4[0x3]
80003438:	00 00       	add	r0,r0
8000343a:	0c 40       	or	r0,r6
8000343c:	00 00       	add	r0,r0
8000343e:	09 bc       	ld.ub	r12,r4[0x3]
80003440:	00 00       	add	r0,r0
80003442:	09 b4       	ld.ub	r4,r4[0x3]
80003444:	00 00       	add	r0,r0
80003446:	09 b8       	ld.ub	r8,r4[0x3]
80003448:	00 00       	add	r0,r0
8000344a:	09 bd       	ld.ub	sp,r4[0x3]

8000344c <udi_cdc_comm_disable>:
8000344c:	d4 01       	pushm	lr
8000344e:	30 09       	mov	r9,0
80003450:	48 38       	lddpc	r8,8000345c <udi_cdc_comm_disable+0x10>
80003452:	b0 89       	st.b	r8[0x0],r9
80003454:	e0 a0 03 28 	rcall	80003aa4 <stdio_usb_disable>

void udi_cdc_comm_disable(void)
{
	udi_cdc_running = false;
	UDI_CDC_DISABLE_EXT();
}
80003458:	d8 02       	popm	pc
8000345a:	d7 03       	nop
8000345c:	00 00       	add	r0,r0
8000345e:	09 bd       	ld.ub	sp,r4[0x3]

80003460 <udi_cdc_comm_enable>:
80003460:	d4 01       	pushm	lr
80003462:	48 b8       	lddpc	r8,8000348c <udi_cdc_comm_enable+0x2c>


bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
80003464:	30 09       	mov	r9,0
80003466:	48 ba       	lddpc	r10,80003490 <udi_cdc_comm_enable+0x30>
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003468:	b0 89       	st.b	r8[0x0],r9


bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
8000346a:	b4 09       	st.h	r10[0x0],r9
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
8000346c:	b0 d9       	st.b	r8[0x5],r9
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
	uid_cdc_state_msg.value = CPU_TO_LE16(0);

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
8000346e:	b0 c9       	st.b	r8[0x4],r9

bool udi_cdc_comm_enable(void)
{
	// Initialize control signal management
	udi_cdc_state = CPU_TO_LE16(0);
	uid_cdc_state_msg.value = CPU_TO_LE16(0);
80003470:	48 9a       	lddpc	r10,80003494 <udi_cdc_comm_enable+0x34>
80003472:	b4 49       	st.h	r10[0x8],r9

	udi_cdc_line_coding.dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
80003474:	30 09       	mov	r9,0
80003476:	b0 b9       	st.b	r8[0x3],r9
80003478:	3c 29       	mov	r9,-62
8000347a:	b0 99       	st.b	r8[0x1],r9
8000347c:	30 19       	mov	r9,1
8000347e:	b0 a9       	st.b	r8[0x2],r9
	udi_cdc_line_coding.bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
	udi_cdc_line_coding.bParityType = UDI_CDC_DEFAULT_PARITY;
	udi_cdc_line_coding.bDataBits = UDI_CDC_DEFAULT_DATABITS;
80003480:	30 89       	mov	r9,8
80003482:	b0 e9       	st.b	r8[0x6],r9
	UDI_CDC_SET_CODING_EXT((&udi_cdc_line_coding));

	// Call application callback
	// to initialize memories or indicate that interface is enabled
	return UDI_CDC_ENABLE_EXT();
80003484:	e0 a0 03 08 	rcall	80003a94 <stdio_usb_enable>
}
80003488:	d8 02       	popm	pc
8000348a:	d7 03       	nop
8000348c:	00 00       	add	r0,r0
8000348e:	07 28       	ld.uh	r8,r3++
80003490:	00 00       	add	r0,r0
80003492:	0c 42       	or	r2,r6
80003494:	00 00       	add	r0,r0
80003496:	00 30       	cp.w	r0,r0

80003498 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003498:	d4 01       	pushm	lr
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
8000349a:	49 c8       	lddpc	r8,80003508 <udc_update_iface_desc+0x70>
8000349c:	11 89       	ld.ub	r9,r8[0x0]
8000349e:	30 08       	mov	r8,0
800034a0:	f0 09 18 00 	cp.b	r9,r8
800034a4:	c3 10       	breq	80003506 <udc_update_iface_desc+0x6e>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
800034a6:	49 a8       	lddpc	r8,8000350c <udc_update_iface_desc+0x74>
800034a8:	70 08       	ld.w	r8,r8[0x0]
800034aa:	70 08       	ld.w	r8,r8[0x0]
800034ac:	11 c9       	ld.ub	r9,r8[0x4]
800034ae:	f8 09 18 00 	cp.b	r9,r12
800034b2:	e0 88 00 2a 	brls	80003506 <udc_update_iface_desc+0x6e>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
800034b6:	49 79       	lddpc	r9,80003510 <udc_update_iface_desc+0x78>
800034b8:	93 08       	st.w	r9[0x0],r8
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
800034ba:	11 aa       	ld.ub	r10,r8[0x2]
800034bc:	11 b9       	ld.ub	r9,r8[0x3]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800034be:	30 4e       	mov	lr,4
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
800034c0:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800034c4:	f2 0a 16 08 	lsr	r10,r9,0x8
800034c8:	f5 e9 10 89 	or	r9,r10,r9<<0x8
800034cc:	5c 79       	castu.h	r9
800034ce:	f0 09 00 09 	add	r9,r8,r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800034d2:	c1 38       	rjmp	800034f8 <udc_update_iface_desc+0x60>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800034d4:	11 9a       	ld.ub	r10,r8[0x1]
800034d6:	fc 0a 18 00 	cp.b	r10,lr
800034da:	c0 d1       	brne	800034f4 <udc_update_iface_desc+0x5c>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
800034dc:	11 aa       	ld.ub	r10,r8[0x2]
800034de:	f8 0a 18 00 	cp.b	r10,r12
800034e2:	c0 91       	brne	800034f4 <udc_update_iface_desc+0x5c>
					&& (setting_num ==
							udc_ptr_iface->
800034e4:	11 ba       	ld.ub	r10,r8[0x3]
800034e6:	f6 0a 18 00 	cp.b	r10,r11
800034ea:	c0 51       	brne	800034f4 <udc_update_iface_desc+0x5c>
800034ec:	48 99       	lddpc	r9,80003510 <udc_update_iface_desc+0x78>
800034ee:	30 1c       	mov	r12,1
800034f0:	93 08       	st.w	r9[0x0],r8
800034f2:	d8 02       	popm	pc
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
800034f4:	11 8a       	ld.ub	r10,r8[0x0]
800034f6:	14 08       	add	r8,r10
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800034f8:	10 39       	cp.w	r9,r8
800034fa:	fe 9b ff ed 	brhi	800034d4 <udc_update_iface_desc+0x3c>
800034fe:	48 59       	lddpc	r9,80003510 <udc_update_iface_desc+0x78>
80003500:	30 0c       	mov	r12,0
80003502:	93 08       	st.w	r9[0x0],r8
80003504:	d8 02       	popm	pc
80003506:	d8 0a       	popm	pc,r12=0
80003508:	00 00       	add	r0,r0
8000350a:	0c 50       	eor	r0,r6
8000350c:	00 00       	add	r0,r0
8000350e:	0c 48       	or	r8,r6
80003510:	00 00       	add	r0,r0
80003512:	0c 54       	eor	r4,r6

80003514 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80003514:	d4 21       	pushm	r4-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80003516:	48 e8       	lddpc	r8,8000354c <udc_sof_notify+0x38>
80003518:	11 89       	ld.ub	r9,r8[0x0]
8000351a:	30 08       	mov	r8,0
8000351c:	f0 09 18 00 	cp.b	r9,r8
80003520:	c1 40       	breq	80003548 <udc_sof_notify+0x34>
80003522:	30 07       	mov	r7,0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003524:	48 b6       	lddpc	r6,80003550 <udc_sof_notify+0x3c>
80003526:	c0 a8       	rjmp	8000353a <udc_sof_notify+0x26>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80003528:	70 18       	ld.w	r8,r8[0x4]
8000352a:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
8000352e:	70 48       	ld.w	r8,r8[0x10]
80003530:	58 08       	cp.w	r8,0
80003532:	c0 20       	breq	80003536 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80003534:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003536:	2f f7       	sub	r7,-1
80003538:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000353a:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000353c:	70 09       	ld.w	r9,r8[0x0]
8000353e:	13 c9       	ld.ub	r9,r9[0x4]
80003540:	ee 09 18 00 	cp.b	r9,r7
80003544:	fe 9b ff f2 	brhi	80003528 <udc_sof_notify+0x14>
80003548:	d8 22       	popm	r4-r7,pc
8000354a:	d7 03       	nop
8000354c:	00 00       	add	r0,r0
8000354e:	0c 50       	eor	r0,r6
80003550:	00 00       	add	r0,r0
80003552:	0c 48       	or	r8,r6

80003554 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80003554:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80003556:	48 48       	lddpc	r8,80003564 <udc_valid_address+0x10>
80003558:	11 bc       	ld.ub	r12,r8[0x3]
8000355a:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000355e:	fe b0 f6 85 	rcall	80002268 <udd_set_address>
}
80003562:	d8 02       	popm	pc
80003564:	00 00       	add	r0,r0
80003566:	0c 98       	mov	r8,r6

80003568 <udc_iface_enable>:
80003568:	d4 31       	pushm	r0-r7,lr
8000356a:	18 96       	mov	r6,r12
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
8000356c:	c9 6f       	rcall	80003498 <udc_update_iface_desc>
8000356e:	c3 c0       	breq	800035e6 <udc_iface_enable+0x7e>
80003570:	49 e8       	lddpc	r8,800035e8 <udc_iface_enable+0x80>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003572:	49 f3       	lddpc	r3,800035ec <udc_iface_enable+0x84>
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003574:	70 07       	ld.w	r7,r8[0x0]

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003576:	30 44       	mov	r4,4
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80003578:	30 55       	mov	r5,5
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
8000357a:	66 0a       	ld.w	r10,r3[0x0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000357c:	74 08       	ld.w	r8,r10[0x0]
8000357e:	11 ac       	ld.ub	r12,r8[0x2]
80003580:	11 bb       	ld.ub	r11,r8[0x3]
80003582:	0f 89       	ld.ub	r9,r7[0x0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003584:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80003588:	ee 09 00 09 	add	r9,r7,r9
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000358c:	f6 0c 16 08 	lsr	r12,r11,0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80003590:	f9 eb 10 8b 	or	r11,r12,r11<<0x8
80003594:	5c 7b       	castu.h	r11
80003596:	16 08       	add	r8,r11
80003598:	c0 a8       	rjmp	800035ac <udc_iface_enable+0x44>
8000359a:	13 9c       	ld.ub	r12,r9[0x1]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
8000359c:	e8 0c 18 00 	cp.b	r12,r4
800035a0:	c0 90       	breq	800035b2 <udc_iface_enable+0x4a>
800035a2:	ea 0c 18 00 	cp.b	r12,r5
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
800035a6:	c0 70       	breq	800035b4 <udc_iface_enable+0x4c>
800035a8:	13 8b       	ld.ub	r11,r9[0x0]
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800035aa:	16 09       	add	r9,r11
800035ac:	12 38       	cp.w	r8,r9
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
800035ae:	fe 9b ff f6 	brhi	8000359a <udc_iface_enable+0x32>
800035b2:	30 09       	mov	r9,0
800035b4:	12 97       	mov	r7,r9

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800035b6:	58 09       	cp.w	r9,0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
800035b8:	c1 10       	breq	800035da <udc_iface_enable+0x72>
800035ba:	13 ca       	ld.ub	r10,r9[0x4]
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
800035bc:	13 d8       	ld.ub	r8,r9[0x5]
800035be:	13 ac       	ld.ub	r12,r9[0x2]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
800035c0:	f1 ea 10 88 	or	r8,r8,r10<<0x8
800035c4:	13 bb       	ld.ub	r11,r9[0x3]
800035c6:	f0 09 16 08 	lsr	r9,r8,0x8
800035ca:	f3 e8 10 88 	or	r8,r9,r8<<0x8
800035ce:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800035d2:	fe b0 f8 93 	rcall	800026f8 <udd_ep_alloc>
800035d6:	cd 21       	brne	8000357a <udc_iface_enable+0x12>
800035d8:	c0 78       	rjmp	800035e6 <udc_iface_enable+0x7e>
800035da:	74 18       	ld.w	r8,r10[0x4]
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
800035dc:	f0 06 03 28 	ld.w	r8,r8[r6<<0x2]
800035e0:	70 0c       	ld.w	r12,r8[0x0]
800035e2:	5d 1c       	icall	r12
800035e4:	d8 32       	popm	r0-r7,pc
800035e6:	d8 3a       	popm	r0-r7,pc,r12=0
800035e8:	00 00       	add	r0,r0
800035ea:	0c 54       	eor	r4,r6
800035ec:	00 00       	add	r0,r0
800035ee:	0c 48       	or	r8,r6

800035f0 <udc_iface_disable>:
800035f0:	d4 31       	pushm	r0-r7,lr
800035f2:	30 0b       	mov	r11,0
800035f4:	18 95       	mov	r5,r12
800035f6:	c5 1f       	rcall	80003498 <udc_update_iface_desc>
800035f8:	c3 70       	breq	80003666 <udc_iface_disable+0x76>
800035fa:	49 c6       	lddpc	r6,80003668 <udc_iface_disable+0x78>
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800035fc:	6c 08       	ld.w	r8,r6[0x0]
800035fe:	70 18       	ld.w	r8,r8[0x4]
80003600:	f0 05 03 27 	ld.w	r7,r8[r5<<0x2]
80003604:	6e 3c       	ld.w	r12,r7[0xc]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80003606:	5d 1c       	icall	r12
80003608:	18 9b       	mov	r11,r12
8000360a:	0a 9c       	mov	r12,r5
8000360c:	c4 6f       	rcall	80003498 <udc_update_iface_desc>
8000360e:	c2 c0       	breq	80003666 <udc_iface_disable+0x76>
80003610:	49 78       	lddpc	r8,8000366c <udc_iface_disable+0x7c>
80003612:	30 43       	mov	r3,4
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003614:	70 05       	ld.w	r5,r8[0x0]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80003616:	30 54       	mov	r4,5
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003618:	6c 08       	ld.w	r8,r6[0x0]
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
8000361a:	70 09       	ld.w	r9,r8[0x0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000361c:	13 ab       	ld.ub	r11,r9[0x2]
8000361e:	13 ba       	ld.ub	r10,r9[0x3]
80003620:	0b 88       	ld.ub	r8,r5[0x0]
80003622:	f5 eb 10 8a 	or	r10,r10,r11<<0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
80003626:	ea 08 00 08 	add	r8,r5,r8
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000362a:	f4 0b 16 08 	lsr	r11,r10,0x8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000362e:	f7 ea 10 8a 	or	r10,r11,r10<<0x8
80003632:	5c 7a       	castu.h	r10
80003634:	14 09       	add	r9,r10
80003636:	c0 a8       	rjmp	8000364a <udc_iface_disable+0x5a>
80003638:	11 9b       	ld.ub	r11,r8[0x1]
8000363a:	e6 0b 18 00 	cp.b	r11,r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
8000363e:	c0 90       	breq	80003650 <udc_iface_disable+0x60>
80003640:	e8 0b 18 00 	cp.b	r11,r4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
80003644:	c0 70       	breq	80003652 <udc_iface_disable+0x62>
80003646:	11 8a       	ld.ub	r10,r8[0x0]
80003648:	14 08       	add	r8,r10
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000364a:	10 39       	cp.w	r9,r8
8000364c:	fe 9b ff f6 	brhi	80003638 <udc_iface_disable+0x48>
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003650:	30 08       	mov	r8,0
80003652:	10 95       	mov	r5,r8
80003654:	58 08       	cp.w	r8,0
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003656:	c0 50       	breq	80003660 <udc_iface_disable+0x70>
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
80003658:	11 ac       	ld.ub	r12,r8[0x2]
8000365a:	fe b0 f6 c5 	rcall	800023e4 <udd_ep_free>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000365e:	cd db       	rjmp	80003618 <udc_iface_disable+0x28>
80003660:	6e 18       	ld.w	r8,r7[0x4]
		}
80003662:	5d 18       	icall	r8
	}
#endif

	// Disable interface
	udi_api->disable();
80003664:	da 3a       	popm	r0-r7,pc,r12=1
80003666:	d8 3a       	popm	r0-r7,pc,r12=0
80003668:	00 00       	add	r0,r0
	return true;
8000366a:	0c 48       	or	r8,r6
8000366c:	00 00       	add	r0,r0
8000366e:	0c 54       	eor	r4,r6

80003670 <udc_reset>:
80003670:	d4 21       	pushm	r4-r7,lr
80003672:	48 f8       	lddpc	r8,800036ac <udc_reset+0x3c>
80003674:	11 89       	ld.ub	r9,r8[0x0]
80003676:	30 08       	mov	r8,0
80003678:	f0 09 18 00 	cp.b	r9,r8
 */
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
8000367c:	c0 f0       	breq	8000369a <udc_reset+0x2a>
8000367e:	30 07       	mov	r7,0
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003680:	48 c6       	lddpc	r6,800036b0 <udc_reset+0x40>
80003682:	c0 58       	rjmp	8000368c <udc_reset+0x1c>
				iface_num++) {
			udc_iface_disable(iface_num);
80003684:	0e 9c       	mov	r12,r7
80003686:	cb 5f       	rcall	800035f0 <udc_iface_disable>
80003688:	2f f7       	sub	r7,-1
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000368a:	5c 57       	castu.b	r7
8000368c:	6c 08       	ld.w	r8,r6[0x0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000368e:	70 08       	ld.w	r8,r8[0x0]
80003690:	11 c8       	ld.ub	r8,r8[0x4]
80003692:	ee 08 18 00 	cp.b	r8,r7
80003696:	fe 9b ff f7 	brhi	80003684 <udc_reset+0x14>
8000369a:	30 09       	mov	r9,0
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000369c:	48 48       	lddpc	r8,800036ac <udc_reset+0x3c>
8000369e:	b0 89       	st.b	r8[0x0],r9
800036a0:	e0 69 01 00 	mov	r9,256
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
800036a4:	48 48       	lddpc	r8,800036b4 <udc_reset+0x44>
800036a6:	b0 09       	st.h	r8[0x0],r9
800036a8:	d8 22       	popm	r4-r7,pc
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
800036aa:	d7 03       	nop
800036ac:	00 00       	add	r0,r0
800036ae:	0c 50       	eor	r0,r6
800036b0:	00 00       	add	r0,r0
800036b2:	0c 48       	or	r8,r6
800036b4:	00 00       	add	r0,r0
800036b6:	0c 4e       	or	lr,r6

800036b8 <udc_process_setup>:
800036b8:	d4 21       	pushm	r4-r7,lr
800036ba:	4c c8       	lddpc	r8,800037e8 <udc_process_setup+0x130>
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
800036bc:	30 0a       	mov	r10,0
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
800036be:	30 09       	mov	r9,0
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;
800036c0:	91 5a       	st.w	r8[0x14],r10
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
800036c2:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
800036c4:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
800036c6:	11 86       	ld.ub	r6,r8[0x0]
800036c8:	f2 06 18 00 	cp.b	r6,r9
800036cc:	c0 64       	brge	800036d8 <udc_process_setup+0x20>
		if (udd_g_ctrlreq.req.wLength == 0)
800036ce:	90 38       	ld.sh	r8,r8[0x6]
800036d0:	f2 08 19 00 	cp.h	r8,r9
800036d4:	e0 80 01 b3 	breq	80003a3a <udc_process_setup+0x382>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
800036d8:	0c 9b       	mov	r11,r6
800036da:	e2 1b 00 60 	andl	r11,0x60,COH
800036de:	e0 81 01 87 	brne	800039ec <udc_process_setup+0x334>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
800036e2:	16 98       	mov	r8,r11
800036e4:	f6 06 18 00 	cp.b	r6,r11
800036e8:	e0 84 00 d9 	brge	8000389a <udc_process_setup+0x1e2>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
800036ec:	4b f7       	lddpc	r7,800037e8 <udc_process_setup+0x130>
800036ee:	8e 39       	ld.sh	r9,r7[0x6]
800036f0:	58 09       	cp.w	r9,0
800036f2:	e0 80 01 7d 	breq	800039ec <udc_process_setup+0x334>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800036f6:	ed d6 c0 05 	bfextu	r6,r6,0x0,0x5
800036fa:	e0 81 00 8d 	brne	80003814 <udc_process_setup+0x15c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800036fe:	0f 9a       	ld.ub	r10,r7[0x1]
80003700:	30 6b       	mov	r11,6
80003702:	f6 0a 18 00 	cp.b	r10,r11
80003706:	c1 10       	breq	80003728 <udc_process_setup+0x70>
80003708:	30 8b       	mov	r11,8
8000370a:	f6 0a 18 00 	cp.b	r10,r11
8000370e:	c7 b0       	breq	80003804 <udc_process_setup+0x14c>
80003710:	f0 0a 18 00 	cp.b	r10,r8
80003714:	e0 81 01 6c 	brne	800039ec <udc_process_setup+0x334>
80003718:	30 28       	mov	r8,2
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
8000371a:	f0 09 19 00 	cp.h	r9,r8
8000371e:	e0 81 01 67 	brne	800039ec <udc_process_setup+0x334>
80003722:	30 2b       	mov	r11,2
		return false;

	udd_set_setup_payload(
80003724:	4b 2c       	lddpc	r12,800037ec <udc_process_setup+0x134>
80003726:	c9 f8       	rjmp	80003864 <udc_process_setup+0x1ac>
80003728:	8e 1a       	ld.sh	r10,r7[0x2]
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000372a:	30 2b       	mov	r11,2

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000372c:	f1 da c0 10 	bfextu	r8,r10,0x0,0x10
80003730:	f0 06 16 08 	lsr	r6,r8,0x8
80003734:	f6 06 18 00 	cp.b	r6,r11
80003738:	c0 f0       	breq	80003756 <udc_process_setup+0x9e>
8000373a:	30 3a       	mov	r10,3
8000373c:	f4 06 18 00 	cp.b	r6,r10
80003740:	c2 80       	breq	80003790 <udc_process_setup+0xd8>
80003742:	30 18       	mov	r8,1
80003744:	f0 06 18 00 	cp.b	r6,r8
80003748:	e0 81 01 52 	brne	800039ec <udc_process_setup+0x334>
8000374c:	4a 98       	lddpc	r8,800037f0 <udc_process_setup+0x138>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000374e:	70 08       	ld.w	r8,r8[0x0]
80003750:	10 9c       	mov	r12,r8
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003752:	11 8b       	ld.ub	r11,r8[0x0]
80003754:	c3 f8       	rjmp	800037d2 <udc_process_setup+0x11a>
80003756:	f1 da c0 08 	bfextu	r8,r10,0x0,0x8
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000375a:	4a 69       	lddpc	r9,800037f0 <udc_process_setup+0x138>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000375c:	72 0a       	ld.w	r10,r9[0x0]
8000375e:	f5 3a 00 11 	ld.ub	r10,r10[17]
80003762:	f0 0a 18 00 	cp.b	r10,r8
80003766:	e0 88 01 43 	brls	800039ec <udc_process_setup+0x334>
8000376a:	72 19       	ld.w	r9,r9[0x4]
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000376c:	f2 08 03 38 	ld.w	r8,r9[r8<<0x3]
80003770:	11 a9       	ld.ub	r9,r8[0x2]
80003772:	10 9c       	mov	r12,r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80003774:	11 b8       	ld.ub	r8,r8[0x3]
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003776:	f1 e9 10 88 	or	r8,r8,r9<<0x8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
8000377a:	f0 09 16 08 	lsr	r9,r8,0x8
8000377e:	f3 e8 10 88 	or	r8,r9,r8<<0x8
80003782:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003786:	fe b0 f5 95 	rcall	800022b0 <udd_set_setup_payload>
8000378a:	6e 28       	ld.w	r8,r7[0x8]
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000378c:	b0 96       	st.b	r8[0x1],r6
8000378e:	c2 48       	rjmp	800037d6 <udc_process_setup+0x11e>
80003790:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80003794:	58 18       	cp.w	r8,1
80003796:	c0 60       	breq	800037a2 <udc_process_setup+0xea>
80003798:	58 28       	cp.w	r8,2
8000379a:	c0 a0       	breq	800037ae <udc_process_setup+0xf6>
8000379c:	58 08       	cp.w	r8,0
8000379e:	c0 50       	breq	800037a8 <udc_process_setup+0xf0>
800037a0:	c2 69       	rjmp	800039ec <udc_process_setup+0x334>
800037a2:	30 98       	mov	r8,9
800037a4:	49 4a       	lddpc	r10,800037f4 <udc_process_setup+0x13c>
800037a6:	c0 68       	rjmp	800037b2 <udc_process_setup+0xfa>
800037a8:	30 4b       	mov	r11,4
	case 0:
		udd_set_setup_payload(
800037aa:	49 4c       	lddpc	r12,800037f8 <udc_process_setup+0x140>
800037ac:	c1 38       	rjmp	800037d2 <udc_process_setup+0x11a>
800037ae:	30 38       	mov	r8,3
800037b0:	49 3a       	lddpc	r10,800037fc <udc_process_setup+0x144>
800037b2:	49 4b       	lddpc	r11,80003800 <udc_process_setup+0x148>
800037b4:	14 99       	mov	r9,r10
800037b6:	2f eb       	sub	r11,-2
800037b8:	13 3c       	ld.ub	r12,r9++
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
800037ba:	a9 6c       	lsl	r12,0x8
800037bc:	16 bc       	st.h	r11++,r12
800037be:	f2 0a 01 0c 	sub	r12,r9,r10
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
800037c2:	f0 0c 18 00 	cp.b	r12,r8
800037c6:	cf 93       	brcs	800037b8 <udc_process_setup+0x100>
800037c8:	2f f8       	sub	r8,-1
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
800037ca:	48 ec       	lddpc	r12,80003800 <udc_process_setup+0x148>
800037cc:	a1 78       	lsl	r8,0x1
800037ce:	10 9b       	mov	r11,r8
		udd_set_setup_payload(
800037d0:	b8 88       	st.b	r12[0x0],r8
	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
800037d2:	fe b0 f5 6f 	rcall	800022b0 <udd_set_setup_payload>
		udd_set_setup_payload(
800037d6:	48 58       	lddpc	r8,800037e8 <udc_process_setup+0x130>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
800037d8:	90 39       	ld.sh	r9,r8[0x6]
800037da:	90 6a       	ld.sh	r10,r8[0xc]
800037dc:	f2 0a 19 00 	cp.h	r10,r9
800037e0:	e0 88 01 2e 	brls	80003a3c <udc_process_setup+0x384>
800037e4:	b0 69       	st.h	r8[0xc],r9
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
800037e6:	c2 b9       	rjmp	80003a3c <udc_process_setup+0x384>
800037e8:	00 00       	add	r0,r0
800037ea:	0c 98       	mov	r8,r6
800037ec:	00 00       	add	r0,r0
800037ee:	0c 4e       	or	lr,r6
800037f0:	00 00       	add	r0,r0
800037f2:	00 90       	mov	r0,r0
800037f4:	00 00       	add	r0,r0
800037f6:	00 b0       	st.h	r0++,r0
800037f8:	00 00       	add	r0,r0
800037fa:	00 d0       	st.w	--r0,r0
800037fc:	00 00       	add	r0,r0
800037fe:	00 ac       	st.w	r0++,r12
80003800:	00 00       	add	r0,r0
80003802:	00 bc       	st.h	r0++,r12
80003804:	30 18       	mov	r8,1
80003806:	f0 09 19 00 	cp.h	r9,r8
8000380a:	e0 81 00 f1 	brne	800039ec <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
8000380e:	30 1b       	mov	r11,1
80003810:	4c 8c       	lddpc	r12,80003930 <udc_process_setup+0x278>
80003812:	c2 98       	rjmp	80003864 <udc_process_setup+0x1ac>
80003814:	58 16       	cp.w	r6,1
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80003816:	c2 a1       	brne	8000386a <udc_process_setup+0x1b2>
80003818:	0f 9c       	ld.ub	r12,r7[0x1]
8000381a:	30 aa       	mov	r10,10
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000381c:	f4 0c 18 00 	cp.b	r12,r10
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003820:	e0 81 00 e6 	brne	800039ec <udc_process_setup+0x334>
80003824:	ec 09 19 00 	cp.h	r9,r6
80003828:	e0 81 00 e2 	brne	800039ec <udc_process_setup+0x334>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
8000382c:	4c 19       	lddpc	r9,80003930 <udc_process_setup+0x278>
8000382e:	13 89       	ld.ub	r9,r9[0x0]
80003830:	f6 09 18 00 	cp.b	r9,r11
		return false;	// Error in request
	if (!udc_num_configuration)
80003834:	e0 80 00 dc 	breq	800039ec <udc_process_setup+0x334>
80003838:	4b f8       	lddpc	r8,80003934 <udc_process_setup+0x27c>
8000383a:	0f d7       	ld.ub	r7,r7[0x5]
8000383c:	70 06       	ld.w	r6,r8[0x0]
8000383e:	6c 08       	ld.w	r8,r6[0x0]
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003840:	11 c8       	ld.ub	r8,r8[0x4]
		return false;	// Error in request
	if (!udc_num_configuration)
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003842:	ee 08 18 00 	cp.b	r8,r7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003846:	e0 88 00 d3 	brls	800039ec <udc_process_setup+0x334>
8000384a:	0e 9c       	mov	r12,r7
8000384c:	c2 6e       	rcall	80003498 <udc_update_iface_desc>
8000384e:	e0 80 00 cf 	breq	800039ec <udc_process_setup+0x334>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003852:	6c 18       	ld.w	r8,r6[0x4]
80003854:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003858:	70 3c       	ld.w	r12,r8[0xc]
8000385a:	5d 1c       	icall	r12
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000385c:	4b 78       	lddpc	r8,80003938 <udc_process_setup+0x280>
8000385e:	30 1b       	mov	r11,1
80003860:	b0 8c       	st.b	r8[0x0],r12
80003862:	10 9c       	mov	r12,r8
80003864:	fe b0 f5 26 	rcall	800022b0 <udd_set_setup_payload>
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80003868:	c3 48       	rjmp	800038d0 <udc_process_setup+0x218>
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000386a:	58 26       	cp.w	r6,2
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000386c:	e0 81 00 c0 	brne	800039ec <udc_process_setup+0x334>
80003870:	0f 9a       	ld.ub	r10,r7[0x1]
80003872:	f6 0a 18 00 	cp.b	r10,r11
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80003876:	e0 81 00 bb 	brne	800039ec <udc_process_setup+0x334>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000387a:	ec 09 19 00 	cp.h	r9,r6
8000387e:	e0 81 00 b7 	brne	800039ec <udc_process_setup+0x334>
80003882:	0f dc       	ld.ub	r12,r7[0x5]
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
80003884:	fe b0 f5 1c 	rcall	800022bc <udd_ep_is_halted>
80003888:	4a d8       	lddpc	r8,8000393c <udc_process_setup+0x284>
8000388a:	e0 69 01 00 	mov	r9,256
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000388e:	0c 9b       	mov	r11,r6
80003890:	58 0c       	cp.w	r12,0
80003892:	f9 b9 00 00 	moveq	r9,0
80003896:	b0 09       	st.h	r8[0x0],r9
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80003898:	ce 5b       	rjmp	80003862 <udc_process_setup+0x1aa>
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000389a:	ef d6 c0 05 	bfextu	r7,r6,0x0,0x5
8000389e:	c6 51       	brne	80003968 <udc_process_setup+0x2b0>
800038a0:	4a 86       	lddpc	r6,80003940 <udc_process_setup+0x288>
800038a2:	30 59       	mov	r9,5
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800038a4:	0d 98       	ld.ub	r8,r6[0x1]
800038a6:	f2 08 18 00 	cp.b	r8,r9
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800038aa:	c0 b0       	breq	800038c0 <udc_process_setup+0x208>
800038ac:	30 99       	mov	r9,9
800038ae:	f2 08 18 00 	cp.b	r8,r9
800038b2:	c2 10       	breq	800038f4 <udc_process_setup+0x23c>
800038b4:	30 19       	mov	r9,1
800038b6:	f2 08 18 00 	cp.b	r8,r9
800038ba:	e0 81 00 99 	brne	800039ec <udc_process_setup+0x334>
800038be:	c0 a8       	rjmp	800038d2 <udc_process_setup+0x21a>
800038c0:	8c 38       	ld.sh	r8,r6[0x6]
800038c2:	ee 08 19 00 	cp.h	r8,r7
800038c6:	e0 81 00 93 	brne	800039ec <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
800038ca:	fe c8 03 76 	sub	r8,pc,886
800038ce:	8d 48       	st.w	r6[0x10],r8
800038d0:	da 2a       	popm	r4-r7,pc,r12=1
800038d2:	8c 38       	ld.sh	r8,r6[0x6]
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
800038d4:	ee 08 19 00 	cp.h	r8,r7
800038d8:	e0 81 00 8a 	brne	800039ec <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
800038dc:	8c 19       	ld.sh	r9,r6[0x2]
800038de:	30 18       	mov	r8,1
800038e0:	f0 09 19 00 	cp.h	r9,r8
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
800038e4:	e0 81 00 84 	brne	800039ec <udc_process_setup+0x334>
800038e8:	49 79       	lddpc	r9,80003944 <udc_process_setup+0x28c>
800038ea:	30 1c       	mov	r12,1
800038ec:	92 08       	ld.sh	r8,r9[0x0]
800038ee:	a9 d8       	cbr	r8,0x9
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
800038f0:	b2 08       	st.h	r9[0x0],r8
800038f2:	d8 22       	popm	r4-r7,pc
800038f4:	8c 39       	ld.sh	r9,r6[0x6]
800038f6:	ee 09 19 00 	cp.h	r9,r7
800038fa:	c7 91       	brne	800039ec <udc_process_setup+0x334>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
800038fc:	fe b0 f4 c7 	rcall	8000228a <udd_getaddress>
80003900:	c7 60       	breq	800039ec <udc_process_setup+0x334>
80003902:	49 25       	lddpc	r5,80003948 <udc_process_setup+0x290>
80003904:	0d b9       	ld.ub	r9,r6[0x3]
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
80003906:	6a 08       	ld.w	r8,r5[0x0]
80003908:	f1 38 00 11 	ld.ub	r8,r8[17]
8000390c:	10 39       	cp.w	r9,r8
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000390e:	e0 89 00 6f 	brgt	800039ec <udc_process_setup+0x334>
80003912:	ca fe       	rcall	80003670 <udc_reset>
80003914:	0d b8       	ld.ub	r8,r6[0x3]
80003916:	48 79       	lddpc	r9,80003930 <udc_process_setup+0x278>
80003918:	b2 88       	st.b	r9[0x0],r8
8000391a:	58 08       	cp.w	r8,0
8000391c:	e0 80 00 90 	breq	80003a3c <udc_process_setup+0x384>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
80003920:	20 18       	sub	r8,1

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80003922:	6a 19       	ld.w	r9,r5[0x4]
80003924:	48 46       	lddpc	r6,80003934 <udc_process_setup+0x27c>
80003926:	f2 08 00 38 	add	r8,r9,r8<<0x3
	if (udc_num_configuration == 0) {
8000392a:	8d 08       	st.w	r6[0x0],r8
8000392c:	c1 68       	rjmp	80003958 <udc_process_setup+0x2a0>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000392e:	d7 03       	nop
80003930:	00 00       	add	r0,r0
80003932:	0c 50       	eor	r0,r6
80003934:	00 00       	add	r0,r0
80003936:	0c 48       	or	r8,r6
80003938:	00 00       	add	r0,r0
8000393a:	0c 4c       	or	r12,r6
8000393c:	00 00       	add	r0,r0
8000393e:	0c 44       	or	r4,r6
80003940:	00 00       	add	r0,r0
80003942:	0c 98       	mov	r8,r6
80003944:	00 00       	add	r0,r0
80003946:	0c 4e       	or	lr,r6
80003948:	00 00       	add	r0,r0
8000394a:	00 90       	mov	r0,r0
8000394c:	0e 9c       	mov	r12,r7
8000394e:	30 0b       	mov	r11,0
80003950:	c0 ce       	rcall	80003568 <udc_iface_enable>
80003952:	c4 d0       	breq	800039ec <udc_process_setup+0x334>
80003954:	2f f7       	sub	r7,-1
80003956:	5c 57       	castu.b	r7
80003958:	6c 08       	ld.w	r8,r6[0x0]
8000395a:	70 08       	ld.w	r8,r8[0x0]
8000395c:	11 c8       	ld.ub	r8,r8[0x4]
8000395e:	ee 08 18 00 	cp.b	r8,r7
80003962:	fe 9b ff f5 	brhi	8000394c <udc_process_setup+0x294>
80003966:	c6 b8       	rjmp	80003a3c <udc_process_setup+0x384>
80003968:	58 17       	cp.w	r7,1
8000396a:	c1 b1       	brne	800039a0 <udc_process_setup+0x2e8>
8000396c:	4b 59       	lddpc	r9,80003a40 <udc_process_setup+0x388>
8000396e:	30 ba       	mov	r10,11
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80003970:	13 9c       	ld.ub	r12,r9[0x1]
80003972:	f4 0c 18 00 	cp.b	r12,r10
80003976:	c3 b1       	brne	800039ec <udc_process_setup+0x334>
80003978:	92 3a       	ld.sh	r10,r9[0x6]
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000397a:	f6 0a 19 00 	cp.h	r10,r11
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000397e:	c3 71       	brne	800039ec <udc_process_setup+0x334>
80003980:	4b 1a       	lddpc	r10,80003a44 <udc_process_setup+0x38c>
80003982:	15 8a       	ld.ub	r10,r10[0x0]
80003984:	f6 0a 18 00 	cp.b	r10,r11
80003988:	c3 20       	breq	800039ec <udc_process_setup+0x334>
8000398a:	13 d7       	ld.ub	r7,r9[0x5]
8000398c:	92 16       	ld.sh	r6,r9[0x2]
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000398e:	0e 9c       	mov	r12,r7
80003990:	c3 0e       	rcall	800035f0 <udc_iface_disable>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80003992:	c2 d0       	breq	800039ec <udc_process_setup+0x334>
80003994:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80003998:	0e 9c       	mov	r12,r7
8000399a:	fe b0 fd e7 	rcall	80003568 <udc_iface_enable>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
8000399e:	c2 58       	rjmp	800039e8 <udc_process_setup+0x330>
800039a0:	58 27       	cp.w	r7,2
800039a2:	c2 51       	brne	800039ec <udc_process_setup+0x334>
800039a4:	4a 78       	lddpc	r8,80003a40 <udc_process_setup+0x388>
		return false;	// Error in request
	if (!udc_num_configuration)
800039a6:	30 1a       	mov	r10,1
800039a8:	11 99       	ld.ub	r9,r8[0x1]
800039aa:	f4 09 18 00 	cp.b	r9,r10
800039ae:	c0 60       	breq	800039ba <udc_process_setup+0x302>

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num))
800039b0:	30 3a       	mov	r10,3
	if (!udc_num_configuration)
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800039b2:	f4 09 18 00 	cp.b	r9,r10

	// Disable current setting
	if (!udc_iface_disable(iface_num))
800039b6:	c1 b1       	brne	800039ec <udc_process_setup+0x334>
800039b8:	c0 d8       	rjmp	800039d2 <udc_process_setup+0x31a>
800039ba:	90 39       	ld.sh	r9,r8[0x6]
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
800039bc:	f6 09 19 00 	cp.h	r9,r11
800039c0:	c1 61       	brne	800039ec <udc_process_setup+0x334>
800039c2:	90 1a       	ld.sh	r10,r8[0x2]
800039c4:	f2 0a 19 00 	cp.h	r10,r9
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800039c8:	c1 21       	brne	800039ec <udc_process_setup+0x334>
800039ca:	11 dc       	ld.ub	r12,r8[0x5]
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800039cc:	fe b0 f4 c0 	rcall	8000234c <udd_ep_clear_halt>
800039d0:	c0 c8       	rjmp	800039e8 <udc_process_setup+0x330>
800039d2:	90 39       	ld.sh	r9,r8[0x6]
800039d4:	f6 09 19 00 	cp.h	r9,r11
800039d8:	c0 a1       	brne	800039ec <udc_process_setup+0x334>
800039da:	90 1a       	ld.sh	r10,r8[0x2]
800039dc:	f2 0a 19 00 	cp.h	r10,r9
800039e0:	c0 61       	brne	800039ec <udc_process_setup+0x334>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
800039e2:	11 dc       	ld.ub	r12,r8[0x5]
800039e4:	fe b0 f4 76 	rcall	800022d0 <udd_ep_set_halt>
800039e8:	58 0c       	cp.w	r12,0
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
800039ea:	c2 91       	brne	80003a3c <udc_process_setup+0x384>
800039ec:	49 58       	lddpc	r8,80003a40 <udc_process_setup+0x388>
800039ee:	11 89       	ld.ub	r9,r8[0x0]
800039f0:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800039f4:	58 19       	cp.w	r9,1
800039f6:	c2 21       	brne	80003a3a <udc_process_setup+0x382>
800039f8:	49 39       	lddpc	r9,80003a44 <udc_process_setup+0x38c>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
800039fa:	13 8a       	ld.ub	r10,r9[0x0]
800039fc:	30 09       	mov	r9,0
800039fe:	f2 0a 18 00 	cp.b	r10,r9
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80003a02:	c1 c0       	breq	80003a3a <udc_process_setup+0x382>
80003a04:	11 d7       	ld.ub	r7,r8[0x5]
80003a06:	49 18       	lddpc	r8,80003a48 <udc_process_setup+0x390>
80003a08:	70 06       	ld.w	r6,r8[0x0]
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80003a0a:	6c 08       	ld.w	r8,r6[0x0]
80003a0c:	11 c8       	ld.ub	r8,r8[0x4]
80003a0e:	ee 08 18 00 	cp.b	r8,r7
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80003a12:	e0 88 00 14 	brls	80003a3a <udc_process_setup+0x382>
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80003a16:	30 0b       	mov	r11,0
80003a18:	0e 9c       	mov	r12,r7
80003a1a:	fe b0 fd 3f 	rcall	80003498 <udc_update_iface_desc>
80003a1e:	c0 e0       	breq	80003a3a <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80003a20:	6c 18       	ld.w	r8,r6[0x4]
80003a22:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
80003a26:	6c 3c       	ld.w	r12,r6[0xc]
80003a28:	5d 1c       	icall	r12
80003a2a:	18 9b       	mov	r11,r12
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80003a2c:	0e 9c       	mov	r12,r7
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80003a2e:	fe b0 fd 35 	rcall	80003498 <udc_update_iface_desc>
80003a32:	c0 40       	breq	80003a3a <udc_process_setup+0x382>
80003a34:	6c 2c       	ld.w	r12,r6[0x8]
80003a36:	5d 1c       	icall	r12
80003a38:	d8 22       	popm	r4-r7,pc
80003a3a:	d8 2a       	popm	r4-r7,pc,r12=0
80003a3c:	da 2a       	popm	r4-r7,pc,r12=1
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80003a3e:	d7 03       	nop
80003a40:	00 00       	add	r0,r0
80003a42:	0c 98       	mov	r8,r6
80003a44:	00 00       	add	r0,r0
80003a46:	0c 50       	eor	r0,r6
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003a48:	00 00       	add	r0,r0
80003a4a:	0c 48       	or	r8,r6

80003a4c <_read>:
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80003a4c:	d4 31       	pushm	r0-r7,lr
80003a4e:	20 1d       	sub	sp,4
80003a50:	16 97       	mov	r7,r11
80003a52:	14 92       	mov	r2,r10
	int nChars = 0;

	if (file != 0)
80003a54:	58 0c       	cp.w	r12,0
80003a56:	c0 30       	breq	80003a5c <_read+0x10>
80003a58:	3f f6       	mov	r6,-1
80003a5a:	c1 58       	rjmp	80003a84 <_read+0x38>
80003a5c:	18 96       	mov	r6,r12
		return -1;

	for (; len > 0; --len) {
		int c;
		ptr_get(stdio_base,&c);
80003a5e:	48 c3       	lddpc	r3,80003a8c <_read+0x40>
80003a60:	48 c4       	lddpc	r4,80003a90 <_read+0x44>
80003a62:	1a 95       	mov	r5,sp
80003a64:	c0 b8       	rjmp	80003a7a <_read+0x2e>
80003a66:	68 08       	ld.w	r8,r4[0x0]
80003a68:	66 0c       	ld.w	r12,r3[0x0]
80003a6a:	1a 9b       	mov	r11,sp
80003a6c:	5d 18       	icall	r8
		if (c < 0)
80003a6e:	40 08       	lddsp	r8,sp[0x0]
80003a70:	58 08       	cp.w	r8,0
80003a72:	c0 95       	brlt	80003a84 <_read+0x38>
		break;
		*ptr++ = c;
80003a74:	ee 06 0b 08 	st.b	r7[r6],r8
		++nChars;
80003a78:	2f f6       	sub	r6,-1
// GCC AVR32 implementation
#elif (defined(__GNUC__) && !defined(XMEGA))


int __attribute__((weak))
_read (int file, char * ptr, int len)
80003a7a:	e4 06 01 08 	sub	r8,r2,r6
	int nChars = 0;

	if (file != 0)
		return -1;

	for (; len > 0; --len) {
80003a7e:	58 08       	cp.w	r8,0
80003a80:	fe 99 ff f3 	brgt	80003a66 <_read+0x1a>
		break;
		*ptr++ = c;
		++nChars;
	}
	return nChars;
}
80003a84:	0c 9c       	mov	r12,r6
80003a86:	2f fd       	sub	sp,-4
80003a88:	d8 32       	popm	r0-r7,pc
80003a8a:	d7 03       	nop
80003a8c:	00 00       	add	r0,r0
80003a8e:	0c c0       	st.b	r6++,r0
80003a90:	00 00       	add	r0,r0
80003a92:	0c b8       	st.h	r6++,r8

80003a94 <stdio_usb_enable>:
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003a94:	30 19       	mov	r9,1
80003a96:	48 38       	lddpc	r8,80003aa0 <stdio_usb_enable+0xc>
	return true;
}
80003a98:	30 1c       	mov	r12,1
	}
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80003a9a:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80003a9c:	5e fc       	retal	r12
80003a9e:	d7 03       	nop
80003aa0:	00 00       	add	r0,r0
80003aa2:	0c 58       	eor	r8,r6

80003aa4 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
80003aa4:	30 09       	mov	r9,0
80003aa6:	48 28       	lddpc	r8,80003aac <stdio_usb_disable+0x8>
80003aa8:	b0 89       	st.b	r8[0x0],r9
}
80003aaa:	5e fc       	retal	r12
80003aac:	00 00       	add	r0,r0
80003aae:	0c 58       	eor	r8,r6

80003ab0 <stdio_usb_vbus_event>:
	
	*data = udi_cdc_getc ();
}

void stdio_usb_vbus_event(bool b_high)
{
80003ab0:	d4 01       	pushm	lr
	if (b_high) {
80003ab2:	58 0c       	cp.w	r12,0
80003ab4:	c0 40       	breq	80003abc <stdio_usb_vbus_event+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80003ab6:	fe b0 f6 e7 	rcall	80002884 <udd_attach>
80003aba:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80003abc:	fe b0 f5 6e 	rcall	80002598 <udd_detach>
80003ac0:	d8 02       	popm	pc
80003ac2:	d7 03       	nop

80003ac4 <stdio_usb_init>:
80003ac4:	d4 01       	pushm	lr
80003ac6:	48 a8       	lddpc	r8,80003aec <stdio_usb_init+0x28>
80003ac8:	fe c9 ff ac 	sub	r9,pc,-84
}

void stdio_usb_init (volatile void * usart)
{
	stdio_base = usart;
	ptr_put = stdio_usb_putchar;
80003acc:	91 0c       	st.w	r8[0x0],r12
80003ace:	48 98       	lddpc	r8,80003af0 <stdio_usb_init+0x2c>
	ptr_get = stdio_usb_getchar;
80003ad0:	91 09       	st.w	r8[0x0],r9
80003ad2:	fe c9 ff da 	sub	r9,pc,-38

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80003ad6:	48 88       	lddpc	r8,80003af4 <stdio_usb_init+0x30>
80003ad8:	91 09       	st.w	r8[0x0],r9
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
80003ada:	fe b0 f6 ff 	rcall	800028d8 <udd_enable>
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();

	if (! udc_include_vbus_monitoring ()) {
80003ade:	fe b0 f3 c3 	rcall	80002264 <udd_include_vbus_monitoring>
		stdio_usb_vbus_event (true);
80003ae2:	c0 31       	brne	80003ae8 <stdio_usb_init+0x24>
80003ae4:	30 1c       	mov	r12,1
80003ae6:	ce 5f       	rcall	80003ab0 <stdio_usb_vbus_event>
80003ae8:	d8 02       	popm	pc
80003aea:	d7 03       	nop
80003aec:	00 00       	add	r0,r0
80003aee:	0c c0       	st.b	r6++,r0
80003af0:	00 00       	add	r0,r0
80003af2:	0c bc       	st.h	r6++,r12
80003af4:	00 00       	add	r0,r0
80003af6:	0c b8       	st.h	r6++,r8

80003af8 <stdio_usb_getchar>:
80003af8:	d4 21       	pushm	r4-r7,lr
80003afa:	48 88       	lddpc	r8,80003b18 <stdio_usb_getchar+0x20>
80003afc:	16 97       	mov	r7,r11
80003afe:	11 89       	ld.ub	r9,r8[0x0]
80003b00:	30 08       	mov	r8,0
80003b02:	f0 09 18 00 	cp.b	r9,r8
80003b06:	c0 41       	brne	80003b0e <stdio_usb_getchar+0x16>
{
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		*data = 0;  // -1
80003b08:	30 08       	mov	r8,0
80003b0a:	97 08       	st.w	r11[0x0],r8
		return;
80003b0c:	d8 22       	popm	r4-r7,pc
	}
	
	*data = udi_cdc_getc ();
80003b0e:	fe b0 fb 9d 	rcall	80003248 <udi_cdc_getc>
80003b12:	8f 0c       	st.w	r7[0x0],r12
80003b14:	d8 22       	popm	r4-r7,pc
80003b16:	d7 03       	nop
80003b18:	00 00       	add	r0,r0
80003b1a:	0c 58       	eor	r8,r6

80003b1c <stdio_usb_putchar>:
80003b1c:	d4 01       	pushm	lr
80003b1e:	48 78       	lddpc	r8,80003b38 <stdio_usb_putchar+0x1c>
int stdio_usb_putchar (volatile void * usart, int data)
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80003b20:	11 89       	ld.ub	r9,r8[0x0]
80003b22:	30 08       	mov	r8,0
80003b24:	f0 09 18 00 	cp.b	r9,r8
80003b28:	c0 60       	breq	80003b34 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc (data) ? 0 : -1;
80003b2a:	16 9c       	mov	r12,r11
80003b2c:	fe b0 fb 20 	rcall	8000316c <udi_cdc_putc>
80003b30:	c0 21       	brne	80003b34 <stdio_usb_putchar+0x18>
80003b32:	dc 0a       	popm	pc,r12=-1
80003b34:	d8 0a       	popm	pc,r12=0
80003b36:	d7 03       	nop
80003b38:	00 00       	add	r0,r0
80003b3a:	0c 58       	eor	r8,r6

80003b3c <_write>:

#elif (defined(__GNUC__) && !defined(XMEGA))

	int __attribute__((weak))
	_write (int file, char * ptr, int len)
	{
80003b3c:	d4 31       	pushm	r0-r7,lr
80003b3e:	16 97       	mov	r7,r11
80003b40:	14 93       	mov	r3,r10
		int nChars = 0;
	
		if ( (file != 1)
80003b42:	20 1c       	sub	r12,1
80003b44:	58 2c       	cp.w	r12,2
80003b46:	e0 8b 00 10 	brhi	80003b66 <_write+0x2a>
80003b4a:	30 06       	mov	r6,0
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003b4c:	48 84       	lddpc	r4,80003b6c <_write+0x30>
80003b4e:	48 95       	lddpc	r5,80003b70 <_write+0x34>
80003b50:	c0 88       	rjmp	80003b60 <_write+0x24>
80003b52:	ee 06 07 0b 	ld.ub	r11,r7[r6]
80003b56:	68 0c       	ld.w	r12,r4[0x0]
				return -1;
			}
			++nChars;
80003b58:	2f f6       	sub	r6,-1
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
			if (ptr_put(stdio_base, *ptr++) < 0) {
80003b5a:	6a 08       	ld.w	r8,r5[0x0]
80003b5c:	5d 18       	icall	r8
80003b5e:	c0 45       	brlt	80003b66 <_write+0x2a>
	
		if ( (file != 1)
			&& (file != 2) && (file!=3))
		return -1;
	
		for (; len != 0; --len) {
80003b60:	0c 33       	cp.w	r3,r6
80003b62:	cf 81       	brne	80003b52 <_write+0x16>
80003b64:	c0 28       	rjmp	80003b68 <_write+0x2c>
80003b66:	3f f6       	mov	r6,-1
				return -1;
			}
			++nChars;
		}
		return nChars;
	}
80003b68:	0c 9c       	mov	r12,r6
80003b6a:	d8 32       	popm	r0-r7,pc
80003b6c:	00 00       	add	r0,r0
80003b6e:	0c c0       	st.b	r6++,r0
80003b70:	00 00       	add	r0,r0
80003b72:	0c bc       	st.h	r6++,r12

80003b74 <busy_delay_init>:

//_____ D E C L A R A T I O N S ____________________________________________

void busy_delay_init(unsigned long fcpu_hz)
{
    s_fcpu_hz = fcpu_hz;
80003b74:	48 28       	lddpc	r8,80003b7c <busy_delay_init+0x8>
80003b76:	91 0c       	st.w	r8[0x0],r12
}
80003b78:	5e fc       	retal	r12
80003b7a:	d7 03       	nop
80003b7c:	00 00       	add	r0,r0
80003b7e:	0c 5c       	eor	r12,r6

80003b80 <busy_delay_us>:
{
    cpu_delay_ms(delay, s_fcpu_hz);
}

void busy_delay_us(unsigned long delay)
{
80003b80:	d4 01       	pushm	lr
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80003b82:	49 18       	lddpc	r8,80003bc4 <busy_delay_us+0x44>
80003b84:	70 0b       	ld.w	r11,r8[0x0]
80003b86:	ee 78 42 3f 	mov	r8,999999
80003b8a:	f8 0b 06 4a 	mulu.d	r10,r12,r11
80003b8e:	30 09       	mov	r9,0
80003b90:	10 0a       	add	r10,r8
80003b92:	f6 09 00 4b 	adc	r11,r11,r9
80003b96:	ee 78 42 40 	mov	r8,1000000
80003b9a:	30 09       	mov	r9,0
80003b9c:	cc 8c       	rcall	80003d2c <__avr32_udiv64>
80003b9e:	e1 b8 00 42 	mfsr	r8,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003ba2:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003ba6:	e1 b9 00 42 	mfsr	r9,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003baa:	14 38       	cp.w	r8,r10
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003bac:	e0 88 00 05 	brls	80003bb6 <busy_delay_us+0x36>
80003bb0:	10 39       	cp.w	r9,r8
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003bb2:	cf a2       	brcc	80003ba6 <busy_delay_us+0x26>
80003bb4:	c0 38       	rjmp	80003bba <busy_delay_us+0x3a>
80003bb6:	10 39       	cp.w	r9,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003bb8:	c0 43       	brcs	80003bc0 <busy_delay_us+0x40>
80003bba:	14 39       	cp.w	r9,r10
80003bbc:	fe 98 ff f5 	brls	80003ba6 <busy_delay_us+0x26>
80003bc0:	d8 02       	popm	pc
80003bc2:	d7 03       	nop
80003bc4:	00 00       	add	r0,r0
80003bc6:	0c 5c       	eor	r12,r6

80003bc8 <busy_delay_ms>:
80003bc8:	d4 01       	pushm	lr
80003bca:	49 18       	lddpc	r8,80003c0c <busy_delay_ms+0x44>
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80003bcc:	70 0b       	ld.w	r11,r8[0x0]
80003bce:	e0 68 03 e7 	mov	r8,999
80003bd2:	f8 0b 06 4a 	mulu.d	r10,r12,r11
80003bd6:	30 09       	mov	r9,0
80003bd8:	10 0a       	add	r10,r8
80003bda:	f6 09 00 4b 	adc	r11,r11,r9
80003bde:	e0 68 03 e8 	mov	r8,1000
80003be2:	30 09       	mov	r9,0
80003be4:	ca 4c       	rcall	80003d2c <__avr32_udiv64>
80003be6:	e1 b8 00 42 	mfsr	r8,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003bea:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003bee:	e1 b9 00 42 	mfsr	r9,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003bf2:	14 38       	cp.w	r8,r10
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003bf4:	e0 88 00 05 	brls	80003bfe <busy_delay_ms+0x36>
80003bf8:	10 39       	cp.w	r9,r8
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003bfa:	cf a2       	brcc	80003bee <busy_delay_ms+0x26>
80003bfc:	c0 38       	rjmp	80003c02 <busy_delay_ms+0x3a>
80003bfe:	10 39       	cp.w	r9,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003c00:	c0 43       	brcs	80003c08 <busy_delay_ms+0x40>
80003c02:	14 39       	cp.w	r9,r10
80003c04:	fe 98 ff f5 	brls	80003bee <busy_delay_ms+0x26>
80003c08:	d8 02       	popm	pc
80003c0a:	d7 03       	nop
80003c0c:	00 00       	add	r0,r0
80003c0e:	0c 5c       	eor	r12,r6

80003c10 <init>:
#define RESPONSE_C  AVR32_PIN_PB00


__attribute__((__interrupt__)) static void interrupt_J3(void);

void init(){
80003c10:	d4 21       	pushm	r4-r7,lr
    sysclk_init();
80003c12:	fe b0 f9 b5 	rcall	80002f7c <sysclk_init>
    board_init();
80003c16:	fe b0 f1 f7 	rcall	80002004 <board_init>
    busy_delay_init(BOARD_OSC0_HZ);
80003c1a:	e0 6c 1b 00 	mov	r12,6912
80003c1e:	ea 1c 00 b7 	orh	r12,0xb7
80003c22:	ca 9f       	rcall	80003b74 <busy_delay_init>
80003c24:	30 0b       	mov	r11,0

	gpio_configure_pin (TEST_A, GPIO_DIR_INPUT);
80003c26:	31 fc       	mov	r12,31
80003c28:	fe b0 f2 14 	rcall	80002050 <gpio_configure_pin>
80003c2c:	30 3b       	mov	r11,3
	gpio_configure_pin (RESPONSE_A, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003c2e:	31 ec       	mov	r12,30
80003c30:	fe b0 f2 10 	rcall	80002050 <gpio_configure_pin>
80003c34:	30 0b       	mov	r11,0
	
	gpio_configure_pin (TEST_B, GPIO_DIR_INPUT);
80003c36:	31 dc       	mov	r12,29
80003c38:	fe b0 f2 0c 	rcall	80002050 <gpio_configure_pin>
80003c3c:	30 3b       	mov	r11,3
	gpio_configure_pin (RESPONSE_B, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003c3e:	31 cc       	mov	r12,28
80003c40:	fe b0 f2 08 	rcall	80002050 <gpio_configure_pin>
80003c44:	30 0b       	mov	r11,0
	
	gpio_configure_pin (TEST_C, GPIO_DIR_INPUT);
80003c46:	31 bc       	mov	r12,27
80003c48:	fe b0 f2 04 	rcall	80002050 <gpio_configure_pin>
80003c4c:	30 3b       	mov	r11,3
	gpio_configure_pin (RESPONSE_C, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003c4e:	32 0c       	mov	r12,32
80003c50:	fe b0 f2 00 	rcall	80002050 <gpio_configure_pin>
80003c54:	30 0b       	mov	r11,0
	
	gpio_enable_pin_interrupt(TEST_A, GPIO_PIN_CHANGE);
80003c56:	31 fc       	mov	r12,31
80003c58:	fe b0 f2 84 	rcall	80002160 <gpio_enable_pin_interrupt>
80003c5c:	30 0b       	mov	r11,0
	gpio_enable_pin_interrupt(TEST_B, GPIO_PIN_CHANGE);
80003c5e:	31 dc       	mov	r12,29
80003c60:	fe b0 f2 80 	rcall	80002160 <gpio_enable_pin_interrupt>
80003c64:	30 0b       	mov	r11,0
	gpio_enable_pin_interrupt(TEST_C, GPIO_PIN_CHANGE);
80003c66:	31 bc       	mov	r12,27
80003c68:	fe b0 f2 7c 	rcall	80002160 <gpio_enable_pin_interrupt>
80003c6c:	d3 03       	ssrf	0x10
    
    cpu_irq_disable();
80003c6e:	fe b0 f2 bd 	rcall	800021e8 <INTC_init_interrupts>
    INTC_init_interrupts();
80003c72:	30 1a       	mov	r10,1
    INTC_register_interrupt(&interrupt_J3, AVR32_GPIO_IRQ_3, AVR32_INTC_INT1);
80003c74:	34 3b       	mov	r11,67
80003c76:	fe cc ff b6 	sub	r12,pc,-74
80003c7a:	fe b0 f2 a1 	rcall	800021bc <INTC_register_interrupt>
    cpu_irq_enable();
80003c7e:	d5 03       	csrf	0x10
    
    stdio_usb_init(&CONFIG_USART_IF);
80003c80:	fe 7c 1c 00 	mov	r12,-58368
80003c84:	c2 0f       	rcall	80003ac4 <stdio_usb_init>
80003c86:	48 77       	lddpc	r7,80003ca0 <init+0x90>

    #if defined(__GNUC__) && defined(__AVR32__)
        setbuf(stdout, NULL);
80003c88:	6e 08       	ld.w	r8,r7[0x0]
80003c8a:	30 0b       	mov	r11,0
80003c8c:	70 1c       	ld.w	r12,r8[0x4]
80003c8e:	e0 a0 02 55 	rcall	80004138 <setbuf>
80003c92:	6e 08       	ld.w	r8,r7[0x0]
        setbuf(stdin,  NULL);
80003c94:	30 0b       	mov	r11,0
80003c96:	70 0c       	ld.w	r12,r8[0x0]
80003c98:	e0 a0 02 50 	rcall	80004138 <setbuf>
80003c9c:	d8 22       	popm	r4-r7,pc
    #endif
}
80003c9e:	d7 03       	nop
80003ca0:	00 00       	add	r0,r0
80003ca2:	01 c4       	ld.ub	r4,r0[0x4]

80003ca4 <main>:
80003ca4:	d4 01       	pushm	lr
80003ca6:	cb 5f       	rcall	80003c10 <init>
80003ca8:	32 3c       	mov	r12,35
80003caa:	fe b0 f2 51 	rcall	8000214c <gpio_toggle_pin>
80003cae:	48 4c       	lddpc	r12,80003cbc <main+0x18>
80003cb0:	e0 a0 02 3c 	rcall	80004128 <puts>
80003cb4:	e0 6c 01 f4 	mov	r12,500
80003cb8:	c8 8f       	rcall	80003bc8 <busy_delay_ms>
80003cba:	cf 7b       	rjmp	80003ca8 <main+0x4>
80003cbc:	80 00       	ld.sh	r0,r0[0x0]
80003cbe:	58 f0       	cp.w	r0,15

80003cc0 <interrupt_J3>:
80003cc0:	d4 01       	pushm	lr
80003cc2:	31 fc       	mov	r12,31
80003cc4:	fe b0 f2 6f 	rcall	800021a2 <gpio_get_pin_interrupt_flag>
80003cc8:	58 1c       	cp.w	r12,1
80003cca:	c0 c1       	brne	80003ce2 <interrupt_J3+0x22>
    while(1){
        gpio_toggle_pin(LED0_GPIO);

        printf("tick\n");
        
        busy_delay_ms(500);
80003ccc:	31 fc       	mov	r12,31
80003cce:	fe b0 f2 20 	rcall	8000210e <gpio_get_pin_value>
80003cd2:	c0 51       	brne	80003cdc <interrupt_J3+0x1c>
}

__attribute__((__interrupt__)) static void interrupt_J3(void){
	if (gpio_get_pin_interrupt_flag(TEST_A) == 1){
		if (gpio_get_pin_value(TEST_A) == LOW)
			gpio_set_pin_low(RESPONSE_A);
80003cd4:	31 ec       	mov	r12,30
80003cd6:	fe b0 f2 31 	rcall	80002138 <gpio_set_pin_low>
80003cda:	c0 48       	rjmp	80003ce2 <interrupt_J3+0x22>
		else
			gpio_set_pin_high(RESPONSE_A);
80003cdc:	31 ec       	mov	r12,30
80003cde:	fe b0 f2 23 	rcall	80002124 <gpio_set_pin_high>
	}
	if (gpio_get_pin_interrupt_flag(TEST_B) == 1){
80003ce2:	31 dc       	mov	r12,29
80003ce4:	fe b0 f2 5f 	rcall	800021a2 <gpio_get_pin_interrupt_flag>
80003ce8:	58 1c       	cp.w	r12,1
80003cea:	c0 e1       	brne	80003d06 <interrupt_J3+0x46>
		// task_d
		busy_delay_us(100);
80003cec:	36 4c       	mov	r12,100
80003cee:	c4 9f       	rcall	80003b80 <busy_delay_us>
80003cf0:	31 dc       	mov	r12,29
		if (gpio_get_pin_value(TEST_B) == LOW)
80003cf2:	fe b0 f2 0e 	rcall	8000210e <gpio_get_pin_value>
80003cf6:	c0 51       	brne	80003d00 <interrupt_J3+0x40>
80003cf8:	31 cc       	mov	r12,28
		gpio_set_pin_low(RESPONSE_B);
80003cfa:	fe b0 f2 1f 	rcall	80002138 <gpio_set_pin_low>
80003cfe:	c0 48       	rjmp	80003d06 <interrupt_J3+0x46>
80003d00:	31 cc       	mov	r12,28
		else
		gpio_set_pin_high(RESPONSE_B);
80003d02:	fe b0 f2 11 	rcall	80002124 <gpio_set_pin_high>
80003d06:	31 bc       	mov	r12,27
	}
	if (gpio_get_pin_interrupt_flag(TEST_C) == 1){
80003d08:	fe b0 f2 4d 	rcall	800021a2 <gpio_get_pin_interrupt_flag>
80003d0c:	58 1c       	cp.w	r12,1
80003d0e:	c0 c1       	brne	80003d26 <interrupt_J3+0x66>
80003d10:	31 bc       	mov	r12,27
		if (gpio_get_pin_value(TEST_C) == LOW)
80003d12:	fe b0 f1 fe 	rcall	8000210e <gpio_get_pin_value>
80003d16:	c0 51       	brne	80003d20 <interrupt_J3+0x60>
80003d18:	32 0c       	mov	r12,32
		gpio_set_pin_low(RESPONSE_C);
80003d1a:	fe b0 f2 0f 	rcall	80002138 <gpio_set_pin_low>
80003d1e:	c0 48       	rjmp	80003d26 <interrupt_J3+0x66>
80003d20:	32 0c       	mov	r12,32
		else
		gpio_set_pin_high(RESPONSE_C);
80003d22:	fe b0 f2 01 	rcall	80002124 <gpio_set_pin_high>
80003d26:	d4 02       	popm	lr
	}
}
80003d28:	d6 03       	rete
80003d2a:	d7 03       	nop

80003d2c <__avr32_udiv64>:
80003d2c:	d4 31       	pushm	r0-r7,lr
80003d2e:	1a 97       	mov	r7,sp
80003d30:	20 3d       	sub	sp,12
80003d32:	10 9c       	mov	r12,r8
80003d34:	12 9e       	mov	lr,r9
80003d36:	14 93       	mov	r3,r10
80003d38:	58 09       	cp.w	r9,0
80003d3a:	e0 81 00 bd 	brne	80003eb4 <__avr32_udiv64+0x188>
80003d3e:	16 38       	cp.w	r8,r11
80003d40:	e0 88 00 40 	brls	80003dc0 <__avr32_udiv64+0x94>
80003d44:	f0 08 12 00 	clz	r8,r8
80003d48:	c0 d0       	breq	80003d62 <__avr32_udiv64+0x36>
80003d4a:	f6 08 09 4b 	lsl	r11,r11,r8
80003d4e:	f0 09 11 20 	rsub	r9,r8,32
80003d52:	f8 08 09 4c 	lsl	r12,r12,r8
80003d56:	f4 09 0a 49 	lsr	r9,r10,r9
80003d5a:	f4 08 09 43 	lsl	r3,r10,r8
80003d5e:	f3 eb 10 0b 	or	r11,r9,r11
80003d62:	f8 0e 16 10 	lsr	lr,r12,0x10
80003d66:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80003d6a:	f6 0e 0d 00 	divu	r0,r11,lr
80003d6e:	e6 0b 16 10 	lsr	r11,r3,0x10
80003d72:	00 99       	mov	r9,r0
80003d74:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003d78:	e0 0a 02 48 	mul	r8,r0,r10
80003d7c:	10 3b       	cp.w	r11,r8
80003d7e:	c0 a2       	brcc	80003d92 <__avr32_udiv64+0x66>
80003d80:	20 19       	sub	r9,1
80003d82:	18 0b       	add	r11,r12
80003d84:	18 3b       	cp.w	r11,r12
80003d86:	c0 63       	brcs	80003d92 <__avr32_udiv64+0x66>
80003d88:	10 3b       	cp.w	r11,r8
80003d8a:	f7 b9 03 01 	sublo	r9,1
80003d8e:	f7 dc e3 0b 	addcs	r11,r11,r12
80003d92:	f6 08 01 01 	sub	r1,r11,r8
80003d96:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003d9a:	e2 0e 0d 00 	divu	r0,r1,lr
80003d9e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003da2:	00 98       	mov	r8,r0
80003da4:	e0 0a 02 4a 	mul	r10,r0,r10
80003da8:	14 33       	cp.w	r3,r10
80003daa:	c0 82       	brcc	80003dba <__avr32_udiv64+0x8e>
80003dac:	20 18       	sub	r8,1
80003dae:	18 03       	add	r3,r12
80003db0:	18 33       	cp.w	r3,r12
80003db2:	c0 43       	brcs	80003dba <__avr32_udiv64+0x8e>
80003db4:	14 33       	cp.w	r3,r10
80003db6:	f7 b8 03 01 	sublo	r8,1
80003dba:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80003dbe:	cd f8       	rjmp	80003f7c <__avr32_udiv64+0x250>
80003dc0:	58 08       	cp.w	r8,0
80003dc2:	c0 51       	brne	80003dcc <__avr32_udiv64+0xa0>
80003dc4:	30 19       	mov	r9,1
80003dc6:	f2 08 0d 08 	divu	r8,r9,r8
80003dca:	10 9c       	mov	r12,r8
80003dcc:	f8 06 12 00 	clz	r6,r12
80003dd0:	c0 41       	brne	80003dd8 <__avr32_udiv64+0xac>
80003dd2:	18 1b       	sub	r11,r12
80003dd4:	30 19       	mov	r9,1
80003dd6:	c4 08       	rjmp	80003e56 <__avr32_udiv64+0x12a>
80003dd8:	ec 01 11 20 	rsub	r1,r6,32
80003ddc:	f4 01 0a 49 	lsr	r9,r10,r1
80003de0:	f8 06 09 4c 	lsl	r12,r12,r6
80003de4:	f6 06 09 48 	lsl	r8,r11,r6
80003de8:	f6 01 0a 41 	lsr	r1,r11,r1
80003dec:	f3 e8 10 08 	or	r8,r9,r8
80003df0:	f8 03 16 10 	lsr	r3,r12,0x10
80003df4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80003df8:	e2 03 0d 00 	divu	r0,r1,r3
80003dfc:	f0 0b 16 10 	lsr	r11,r8,0x10
80003e00:	00 9e       	mov	lr,r0
80003e02:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003e06:	e0 05 02 49 	mul	r9,r0,r5
80003e0a:	12 3b       	cp.w	r11,r9
80003e0c:	c0 a2       	brcc	80003e20 <__avr32_udiv64+0xf4>
80003e0e:	20 1e       	sub	lr,1
80003e10:	18 0b       	add	r11,r12
80003e12:	18 3b       	cp.w	r11,r12
80003e14:	c0 63       	brcs	80003e20 <__avr32_udiv64+0xf4>
80003e16:	12 3b       	cp.w	r11,r9
80003e18:	f7 be 03 01 	sublo	lr,1
80003e1c:	f7 dc e3 0b 	addcs	r11,r11,r12
80003e20:	12 1b       	sub	r11,r9
80003e22:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80003e26:	f6 03 0d 02 	divu	r2,r11,r3
80003e2a:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80003e2e:	04 99       	mov	r9,r2
80003e30:	e4 05 02 4b 	mul	r11,r2,r5
80003e34:	16 38       	cp.w	r8,r11
80003e36:	c0 a2       	brcc	80003e4a <__avr32_udiv64+0x11e>
80003e38:	20 19       	sub	r9,1
80003e3a:	18 08       	add	r8,r12
80003e3c:	18 38       	cp.w	r8,r12
80003e3e:	c0 63       	brcs	80003e4a <__avr32_udiv64+0x11e>
80003e40:	16 38       	cp.w	r8,r11
80003e42:	f7 b9 03 01 	sublo	r9,1
80003e46:	f1 dc e3 08 	addcs	r8,r8,r12
80003e4a:	f4 06 09 43 	lsl	r3,r10,r6
80003e4e:	f0 0b 01 0b 	sub	r11,r8,r11
80003e52:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80003e56:	f8 06 16 10 	lsr	r6,r12,0x10
80003e5a:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80003e5e:	f6 06 0d 00 	divu	r0,r11,r6
80003e62:	e6 0b 16 10 	lsr	r11,r3,0x10
80003e66:	00 9a       	mov	r10,r0
80003e68:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003e6c:	e0 0e 02 48 	mul	r8,r0,lr
80003e70:	10 3b       	cp.w	r11,r8
80003e72:	c0 a2       	brcc	80003e86 <__avr32_udiv64+0x15a>
80003e74:	20 1a       	sub	r10,1
80003e76:	18 0b       	add	r11,r12
80003e78:	18 3b       	cp.w	r11,r12
80003e7a:	c0 63       	brcs	80003e86 <__avr32_udiv64+0x15a>
80003e7c:	10 3b       	cp.w	r11,r8
80003e7e:	f7 ba 03 01 	sublo	r10,1
80003e82:	f7 dc e3 0b 	addcs	r11,r11,r12
80003e86:	f6 08 01 01 	sub	r1,r11,r8
80003e8a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80003e8e:	e2 06 0d 00 	divu	r0,r1,r6
80003e92:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80003e96:	00 98       	mov	r8,r0
80003e98:	e0 0e 02 4b 	mul	r11,r0,lr
80003e9c:	16 33       	cp.w	r3,r11
80003e9e:	c0 82       	brcc	80003eae <__avr32_udiv64+0x182>
80003ea0:	20 18       	sub	r8,1
80003ea2:	18 03       	add	r3,r12
80003ea4:	18 33       	cp.w	r3,r12
80003ea6:	c0 43       	brcs	80003eae <__avr32_udiv64+0x182>
80003ea8:	16 33       	cp.w	r3,r11
80003eaa:	f7 b8 03 01 	sublo	r8,1
80003eae:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80003eb2:	c6 98       	rjmp	80003f84 <__avr32_udiv64+0x258>
80003eb4:	16 39       	cp.w	r9,r11
80003eb6:	e0 8b 00 65 	brhi	80003f80 <__avr32_udiv64+0x254>
80003eba:	f2 09 12 00 	clz	r9,r9
80003ebe:	c0 b1       	brne	80003ed4 <__avr32_udiv64+0x1a8>
80003ec0:	10 3a       	cp.w	r10,r8
80003ec2:	5f 2a       	srhs	r10
80003ec4:	1c 3b       	cp.w	r11,lr
80003ec6:	5f b8       	srhi	r8
80003ec8:	10 4a       	or	r10,r8
80003eca:	f2 0a 18 00 	cp.b	r10,r9
80003ece:	c5 90       	breq	80003f80 <__avr32_udiv64+0x254>
80003ed0:	30 18       	mov	r8,1
80003ed2:	c5 98       	rjmp	80003f84 <__avr32_udiv64+0x258>
80003ed4:	f0 09 09 46 	lsl	r6,r8,r9
80003ed8:	f2 03 11 20 	rsub	r3,r9,32
80003edc:	fc 09 09 4e 	lsl	lr,lr,r9
80003ee0:	f0 03 0a 48 	lsr	r8,r8,r3
80003ee4:	f6 09 09 4c 	lsl	r12,r11,r9
80003ee8:	f4 03 0a 42 	lsr	r2,r10,r3
80003eec:	ef 46 ff f4 	st.w	r7[-12],r6
80003ef0:	f6 03 0a 43 	lsr	r3,r11,r3
80003ef4:	18 42       	or	r2,r12
80003ef6:	f1 ee 10 0c 	or	r12,r8,lr
80003efa:	f8 01 16 10 	lsr	r1,r12,0x10
80003efe:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80003f02:	e6 01 0d 04 	divu	r4,r3,r1
80003f06:	e4 03 16 10 	lsr	r3,r2,0x10
80003f0a:	08 9e       	mov	lr,r4
80003f0c:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80003f10:	e8 06 02 48 	mul	r8,r4,r6
80003f14:	10 33       	cp.w	r3,r8
80003f16:	c0 a2       	brcc	80003f2a <__avr32_udiv64+0x1fe>
80003f18:	20 1e       	sub	lr,1
80003f1a:	18 03       	add	r3,r12
80003f1c:	18 33       	cp.w	r3,r12
80003f1e:	c0 63       	brcs	80003f2a <__avr32_udiv64+0x1fe>
80003f20:	10 33       	cp.w	r3,r8
80003f22:	f7 be 03 01 	sublo	lr,1
80003f26:	e7 dc e3 03 	addcs	r3,r3,r12
80003f2a:	10 13       	sub	r3,r8
80003f2c:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80003f30:	e6 01 0d 00 	divu	r0,r3,r1
80003f34:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80003f38:	00 98       	mov	r8,r0
80003f3a:	e0 06 02 46 	mul	r6,r0,r6
80003f3e:	0c 3b       	cp.w	r11,r6
80003f40:	c0 a2       	brcc	80003f54 <__avr32_udiv64+0x228>
80003f42:	20 18       	sub	r8,1
80003f44:	18 0b       	add	r11,r12
80003f46:	18 3b       	cp.w	r11,r12
80003f48:	c0 63       	brcs	80003f54 <__avr32_udiv64+0x228>
80003f4a:	0c 3b       	cp.w	r11,r6
80003f4c:	f7 dc e3 0b 	addcs	r11,r11,r12
80003f50:	f7 b8 03 01 	sublo	r8,1
80003f54:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80003f58:	ee f4 ff f4 	ld.w	r4,r7[-12]
80003f5c:	0c 1b       	sub	r11,r6
80003f5e:	f0 04 06 42 	mulu.d	r2,r8,r4
80003f62:	06 95       	mov	r5,r3
80003f64:	16 35       	cp.w	r5,r11
80003f66:	e0 8b 00 0a 	brhi	80003f7a <__avr32_udiv64+0x24e>
80003f6a:	5f 0b       	sreq	r11
80003f6c:	f4 09 09 49 	lsl	r9,r10,r9
80003f70:	12 32       	cp.w	r2,r9
80003f72:	5f b9       	srhi	r9
80003f74:	f7 e9 00 09 	and	r9,r11,r9
80003f78:	c0 60       	breq	80003f84 <__avr32_udiv64+0x258>
80003f7a:	20 18       	sub	r8,1
80003f7c:	30 09       	mov	r9,0
80003f7e:	c0 38       	rjmp	80003f84 <__avr32_udiv64+0x258>
80003f80:	30 09       	mov	r9,0
80003f82:	12 98       	mov	r8,r9
80003f84:	10 9a       	mov	r10,r8
80003f86:	12 93       	mov	r3,r9
80003f88:	10 92       	mov	r2,r8
80003f8a:	12 9b       	mov	r11,r9
80003f8c:	2f dd       	sub	sp,-12
80003f8e:	d8 32       	popm	r0-r7,pc

80003f90 <memcpy>:
80003f90:	58 8a       	cp.w	r10,8
80003f92:	c2 f5       	brlt	80003ff0 <memcpy+0x60>
80003f94:	f9 eb 10 09 	or	r9,r12,r11
80003f98:	e2 19 00 03 	andl	r9,0x3,COH
80003f9c:	e0 81 00 97 	brne	800040ca <memcpy+0x13a>
80003fa0:	e0 4a 00 20 	cp.w	r10,32
80003fa4:	c3 b4       	brge	8000401a <memcpy+0x8a>
80003fa6:	f4 08 14 02 	asr	r8,r10,0x2
80003faa:	f0 09 11 08 	rsub	r9,r8,8
80003fae:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80003fb2:	76 69       	ld.w	r9,r11[0x18]
80003fb4:	99 69       	st.w	r12[0x18],r9
80003fb6:	76 59       	ld.w	r9,r11[0x14]
80003fb8:	99 59       	st.w	r12[0x14],r9
80003fba:	76 49       	ld.w	r9,r11[0x10]
80003fbc:	99 49       	st.w	r12[0x10],r9
80003fbe:	76 39       	ld.w	r9,r11[0xc]
80003fc0:	99 39       	st.w	r12[0xc],r9
80003fc2:	76 29       	ld.w	r9,r11[0x8]
80003fc4:	99 29       	st.w	r12[0x8],r9
80003fc6:	76 19       	ld.w	r9,r11[0x4]
80003fc8:	99 19       	st.w	r12[0x4],r9
80003fca:	76 09       	ld.w	r9,r11[0x0]
80003fcc:	99 09       	st.w	r12[0x0],r9
80003fce:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80003fd2:	f8 08 00 28 	add	r8,r12,r8<<0x2
80003fd6:	e0 1a 00 03 	andl	r10,0x3
80003fda:	f4 0a 11 04 	rsub	r10,r10,4
80003fde:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003fe2:	17 a9       	ld.ub	r9,r11[0x2]
80003fe4:	b0 a9       	st.b	r8[0x2],r9
80003fe6:	17 99       	ld.ub	r9,r11[0x1]
80003fe8:	b0 99       	st.b	r8[0x1],r9
80003fea:	17 89       	ld.ub	r9,r11[0x0]
80003fec:	b0 89       	st.b	r8[0x0],r9
80003fee:	5e fc       	retal	r12
80003ff0:	f4 0a 11 09 	rsub	r10,r10,9
80003ff4:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003ff8:	17 f9       	ld.ub	r9,r11[0x7]
80003ffa:	b8 f9       	st.b	r12[0x7],r9
80003ffc:	17 e9       	ld.ub	r9,r11[0x6]
80003ffe:	b8 e9       	st.b	r12[0x6],r9
80004000:	17 d9       	ld.ub	r9,r11[0x5]
80004002:	b8 d9       	st.b	r12[0x5],r9
80004004:	17 c9       	ld.ub	r9,r11[0x4]
80004006:	b8 c9       	st.b	r12[0x4],r9
80004008:	17 b9       	ld.ub	r9,r11[0x3]
8000400a:	b8 b9       	st.b	r12[0x3],r9
8000400c:	17 a9       	ld.ub	r9,r11[0x2]
8000400e:	b8 a9       	st.b	r12[0x2],r9
80004010:	17 99       	ld.ub	r9,r11[0x1]
80004012:	b8 99       	st.b	r12[0x1],r9
80004014:	17 89       	ld.ub	r9,r11[0x0]
80004016:	b8 89       	st.b	r12[0x0],r9
80004018:	5e fc       	retal	r12
8000401a:	eb cd 40 c0 	pushm	r6-r7,lr
8000401e:	18 99       	mov	r9,r12
80004020:	22 0a       	sub	r10,32
80004022:	b7 07       	ld.d	r6,r11++
80004024:	b3 26       	st.d	r9++,r6
80004026:	b7 07       	ld.d	r6,r11++
80004028:	b3 26       	st.d	r9++,r6
8000402a:	b7 07       	ld.d	r6,r11++
8000402c:	b3 26       	st.d	r9++,r6
8000402e:	b7 07       	ld.d	r6,r11++
80004030:	b3 26       	st.d	r9++,r6
80004032:	22 0a       	sub	r10,32
80004034:	cf 74       	brge	80004022 <memcpy+0x92>
80004036:	2f 0a       	sub	r10,-16
80004038:	c0 65       	brlt	80004044 <memcpy+0xb4>
8000403a:	b7 07       	ld.d	r6,r11++
8000403c:	b3 26       	st.d	r9++,r6
8000403e:	b7 07       	ld.d	r6,r11++
80004040:	b3 26       	st.d	r9++,r6
80004042:	21 0a       	sub	r10,16
80004044:	5c 3a       	neg	r10
80004046:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000404a:	d7 03       	nop
8000404c:	d7 03       	nop
8000404e:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004052:	f3 66 00 0e 	st.b	r9[14],r6
80004056:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000405a:	f3 66 00 0d 	st.b	r9[13],r6
8000405e:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004062:	f3 66 00 0c 	st.b	r9[12],r6
80004066:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000406a:	f3 66 00 0b 	st.b	r9[11],r6
8000406e:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004072:	f3 66 00 0a 	st.b	r9[10],r6
80004076:	f7 36 00 09 	ld.ub	r6,r11[9]
8000407a:	f3 66 00 09 	st.b	r9[9],r6
8000407e:	f7 36 00 08 	ld.ub	r6,r11[8]
80004082:	f3 66 00 08 	st.b	r9[8],r6
80004086:	f7 36 00 07 	ld.ub	r6,r11[7]
8000408a:	f3 66 00 07 	st.b	r9[7],r6
8000408e:	f7 36 00 06 	ld.ub	r6,r11[6]
80004092:	f3 66 00 06 	st.b	r9[6],r6
80004096:	f7 36 00 05 	ld.ub	r6,r11[5]
8000409a:	f3 66 00 05 	st.b	r9[5],r6
8000409e:	f7 36 00 04 	ld.ub	r6,r11[4]
800040a2:	f3 66 00 04 	st.b	r9[4],r6
800040a6:	f7 36 00 03 	ld.ub	r6,r11[3]
800040aa:	f3 66 00 03 	st.b	r9[3],r6
800040ae:	f7 36 00 02 	ld.ub	r6,r11[2]
800040b2:	f3 66 00 02 	st.b	r9[2],r6
800040b6:	f7 36 00 01 	ld.ub	r6,r11[1]
800040ba:	f3 66 00 01 	st.b	r9[1],r6
800040be:	f7 36 00 00 	ld.ub	r6,r11[0]
800040c2:	f3 66 00 00 	st.b	r9[0],r6
800040c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800040ca:	20 1a       	sub	r10,1
800040cc:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800040d0:	f8 0a 0b 09 	st.b	r12[r10],r9
800040d4:	cf b1       	brne	800040ca <memcpy+0x13a>
800040d6:	5e fc       	retal	r12

800040d8 <_puts_r>:
800040d8:	d4 21       	pushm	r4-r7,lr
800040da:	20 7d       	sub	sp,28
800040dc:	16 96       	mov	r6,r11
800040de:	18 97       	mov	r7,r12
800040e0:	16 9c       	mov	r12,r11
800040e2:	cb 9c       	rcall	80004254 <strlen>
800040e4:	f8 c8 ff ff 	sub	r8,r12,-1
800040e8:	50 68       	stdsp	sp[0x18],r8
800040ea:	48 f8       	lddpc	r8,80004124 <_puts_r+0x4c>
800040ec:	50 28       	stdsp	sp[0x8],r8
800040ee:	30 18       	mov	r8,1
800040f0:	50 06       	stdsp	sp[0x0],r6
800040f2:	50 38       	stdsp	sp[0xc],r8
800040f4:	50 1c       	stdsp	sp[0x4],r12
800040f6:	30 28       	mov	r8,2
800040f8:	50 4d       	stdsp	sp[0x10],sp
800040fa:	50 58       	stdsp	sp[0x14],r8
800040fc:	58 07       	cp.w	r7,0
800040fe:	c0 60       	breq	8000410a <_puts_r+0x32>
80004100:	6e 68       	ld.w	r8,r7[0x18]
80004102:	58 08       	cp.w	r8,0
80004104:	c0 31       	brne	8000410a <_puts_r+0x32>
80004106:	0e 9c       	mov	r12,r7
80004108:	c8 ed       	rcall	80004424 <__sinit>
8000410a:	0e 9c       	mov	r12,r7
8000410c:	fa ca ff f0 	sub	r10,sp,-16
80004110:	6e 1b       	ld.w	r11,r7[0x4]
80004112:	e0 a0 02 ed 	rcall	800046ec <__sfvwrite_r>
80004116:	f9 bc 01 ff 	movne	r12,-1
8000411a:	f9 bc 00 0a 	moveq	r12,10
8000411e:	2f 9d       	sub	sp,-28
80004120:	d8 22       	popm	r4-r7,pc
80004122:	d7 03       	nop
80004124:	80 00       	ld.sh	r0,r0[0x0]
80004126:	59 00       	cp.w	r0,16

80004128 <puts>:
80004128:	d4 01       	pushm	lr
8000412a:	48 38       	lddpc	r8,80004134 <puts+0xc>
8000412c:	18 9b       	mov	r11,r12
8000412e:	70 0c       	ld.w	r12,r8[0x0]
80004130:	cd 4f       	rcall	800040d8 <_puts_r>
80004132:	d8 02       	popm	pc
80004134:	00 00       	add	r0,r0
80004136:	01 c4       	ld.ub	r4,r0[0x4]

80004138 <setbuf>:
80004138:	d4 01       	pushm	lr
8000413a:	e0 69 04 00 	mov	r9,1024
8000413e:	58 0b       	cp.w	r11,0
80004140:	f9 ba 00 02 	moveq	r10,2
80004144:	f9 ba 01 00 	movne	r10,0
80004148:	c0 2c       	rcall	8000414c <setvbuf>
8000414a:	d8 02       	popm	pc

8000414c <setvbuf>:
8000414c:	d4 31       	pushm	r0-r7,lr
8000414e:	4b e8       	lddpc	r8,80004244 <setvbuf+0xf8>
80004150:	18 97       	mov	r7,r12
80004152:	16 96       	mov	r6,r11
80004154:	14 95       	mov	r5,r10
80004156:	12 94       	mov	r4,r9
80004158:	70 0c       	ld.w	r12,r8[0x0]
8000415a:	58 0c       	cp.w	r12,0
8000415c:	c0 50       	breq	80004166 <setvbuf+0x1a>
8000415e:	78 68       	ld.w	r8,r12[0x18]
80004160:	58 08       	cp.w	r8,0
80004162:	c0 21       	brne	80004166 <setvbuf+0x1a>
80004164:	c6 0d       	rcall	80004424 <__sinit>
80004166:	4b 98       	lddpc	r8,80004248 <setvbuf+0xfc>
80004168:	10 37       	cp.w	r7,r8
8000416a:	c0 51       	brne	80004174 <setvbuf+0x28>
8000416c:	4b 68       	lddpc	r8,80004244 <setvbuf+0xf8>
8000416e:	70 08       	ld.w	r8,r8[0x0]
80004170:	70 07       	ld.w	r7,r8[0x0]
80004172:	c0 e8       	rjmp	8000418e <setvbuf+0x42>
80004174:	4b 68       	lddpc	r8,8000424c <setvbuf+0x100>
80004176:	10 37       	cp.w	r7,r8
80004178:	c0 51       	brne	80004182 <setvbuf+0x36>
8000417a:	4b 38       	lddpc	r8,80004244 <setvbuf+0xf8>
8000417c:	70 08       	ld.w	r8,r8[0x0]
8000417e:	70 17       	ld.w	r7,r8[0x4]
80004180:	c0 78       	rjmp	8000418e <setvbuf+0x42>
80004182:	4b 48       	lddpc	r8,80004250 <setvbuf+0x104>
80004184:	10 37       	cp.w	r7,r8
80004186:	c0 41       	brne	8000418e <setvbuf+0x42>
80004188:	4a f8       	lddpc	r8,80004244 <setvbuf+0xf8>
8000418a:	70 08       	ld.w	r8,r8[0x0]
8000418c:	70 27       	ld.w	r7,r8[0x8]
8000418e:	58 25       	cp.w	r5,2
80004190:	5f b8       	srhi	r8
80004192:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80004196:	c0 20       	breq	8000419a <setvbuf+0x4e>
80004198:	dc 3a       	popm	r0-r7,pc,r12=-1
8000419a:	4a b3       	lddpc	r3,80004244 <setvbuf+0xf8>
8000419c:	0e 9b       	mov	r11,r7
8000419e:	66 0c       	ld.w	r12,r3[0x0]
800041a0:	c6 6c       	rcall	8000426c <_fflush_r>
800041a2:	30 08       	mov	r8,0
800041a4:	8f 68       	st.w	r7[0x18],r8
800041a6:	8f 18       	st.w	r7[0x4],r8
800041a8:	8e 68       	ld.sh	r8,r7[0xc]
800041aa:	ed b8 00 07 	bld	r8,0x7
800041ae:	c0 41       	brne	800041b6 <setvbuf+0x6a>
800041b0:	66 0c       	ld.w	r12,r3[0x0]
800041b2:	6e 4b       	ld.w	r11,r7[0x10]
800041b4:	cd 4d       	rcall	8000455c <_free_r>
800041b6:	8e 68       	ld.sh	r8,r7[0xc]
800041b8:	e0 18 ff 7c 	andl	r8,0xff7c
800041bc:	ae 68       	st.h	r7[0xc],r8
800041be:	58 25       	cp.w	r5,2
800041c0:	c0 31       	brne	800041c6 <setvbuf+0x7a>
800041c2:	30 0c       	mov	r12,0
800041c4:	c1 38       	rjmp	800041ea <setvbuf+0x9e>
800041c6:	58 06       	cp.w	r6,0
800041c8:	c2 11       	brne	8000420a <setvbuf+0xbe>
800041ca:	e0 63 04 00 	mov	r3,1024
800041ce:	58 04       	cp.w	r4,0
800041d0:	e6 04 17 00 	moveq	r4,r3
800041d4:	08 9c       	mov	r12,r4
800041d6:	e0 a0 04 01 	rcall	800049d8 <malloc>
800041da:	18 96       	mov	r6,r12
800041dc:	c1 41       	brne	80004204 <setvbuf+0xb8>
800041de:	06 9c       	mov	r12,r3
800041e0:	e0 a0 03 fc 	rcall	800049d8 <malloc>
800041e4:	18 96       	mov	r6,r12
800041e6:	c0 e1       	brne	80004202 <setvbuf+0xb6>
800041e8:	3f fc       	mov	r12,-1
800041ea:	8e 68       	ld.sh	r8,r7[0xc]
800041ec:	a1 b8       	sbr	r8,0x1
800041ee:	ae 68       	st.h	r7[0xc],r8
800041f0:	ee c8 ff b9 	sub	r8,r7,-71
800041f4:	8f 48       	st.w	r7[0x10],r8
800041f6:	8f 08       	st.w	r7[0x0],r8
800041f8:	30 08       	mov	r8,0
800041fa:	8f 28       	st.w	r7[0x8],r8
800041fc:	30 18       	mov	r8,1
800041fe:	8f 58       	st.w	r7[0x14],r8
80004200:	d8 32       	popm	r0-r7,pc
80004202:	06 94       	mov	r4,r3
80004204:	8e 68       	ld.sh	r8,r7[0xc]
80004206:	a7 b8       	sbr	r8,0x7
80004208:	ae 68       	st.h	r7[0xc],r8
8000420a:	58 15       	cp.w	r5,1
8000420c:	c0 71       	brne	8000421a <setvbuf+0xce>
8000420e:	8e 68       	ld.sh	r8,r7[0xc]
80004210:	a1 a8       	sbr	r8,0x0
80004212:	ae 68       	st.h	r7[0xc],r8
80004214:	e8 08 11 00 	rsub	r8,r4,0
80004218:	8f 68       	st.w	r7[0x18],r8
8000421a:	48 b8       	lddpc	r8,80004244 <setvbuf+0xf8>
8000421c:	fe c9 fe 9c 	sub	r9,pc,-356
80004220:	70 08       	ld.w	r8,r8[0x0]
80004222:	8f 46       	st.w	r7[0x10],r6
80004224:	91 a9       	st.w	r8[0x28],r9
80004226:	8f 06       	st.w	r7[0x0],r6
80004228:	8f 54       	st.w	r7[0x14],r4
8000422a:	8e 68       	ld.sh	r8,r7[0xc]
8000422c:	10 9c       	mov	r12,r8
8000422e:	e2 1c 00 08 	andl	r12,0x8,COH
80004232:	c0 70       	breq	80004240 <setvbuf+0xf4>
80004234:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004238:	30 0c       	mov	r12,0
8000423a:	f9 b4 01 00 	movne	r4,0
8000423e:	8f 24       	st.w	r7[0x8],r4
80004240:	d8 32       	popm	r0-r7,pc
80004242:	d7 03       	nop
80004244:	00 00       	add	r0,r0
80004246:	01 c4       	ld.ub	r4,r0[0x4]
80004248:	80 00       	ld.sh	r0,r0[0x0]
8000424a:	59 04       	cp.w	r4,16
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	59 24       	cp.w	r4,18
80004250:	80 00       	ld.sh	r0,r0[0x0]
80004252:	59 44       	cp.w	r4,20

80004254 <strlen>:
80004254:	30 09       	mov	r9,0
80004256:	18 98       	mov	r8,r12
80004258:	c0 28       	rjmp	8000425c <strlen+0x8>
8000425a:	2f f8       	sub	r8,-1
8000425c:	11 8a       	ld.ub	r10,r8[0x0]
8000425e:	f2 0a 18 00 	cp.b	r10,r9
80004262:	cf c1       	brne	8000425a <strlen+0x6>
80004264:	f0 0c 01 0c 	sub	r12,r8,r12
80004268:	5e fc       	retal	r12
8000426a:	d7 03       	nop

8000426c <_fflush_r>:
8000426c:	d4 21       	pushm	r4-r7,lr
8000426e:	16 97       	mov	r7,r11
80004270:	18 96       	mov	r6,r12
80004272:	76 48       	ld.w	r8,r11[0x10]
80004274:	58 08       	cp.w	r8,0
80004276:	c7 c0       	breq	8000436e <_fflush_r+0x102>
80004278:	58 0c       	cp.w	r12,0
8000427a:	c0 50       	breq	80004284 <_fflush_r+0x18>
8000427c:	78 68       	ld.w	r8,r12[0x18]
8000427e:	58 08       	cp.w	r8,0
80004280:	c0 21       	brne	80004284 <_fflush_r+0x18>
80004282:	cd 1c       	rcall	80004424 <__sinit>
80004284:	4b b8       	lddpc	r8,80004370 <_fflush_r+0x104>
80004286:	10 37       	cp.w	r7,r8
80004288:	c0 31       	brne	8000428e <_fflush_r+0x22>
8000428a:	6c 07       	ld.w	r7,r6[0x0]
8000428c:	c0 a8       	rjmp	800042a0 <_fflush_r+0x34>
8000428e:	4b a8       	lddpc	r8,80004374 <_fflush_r+0x108>
80004290:	10 37       	cp.w	r7,r8
80004292:	c0 31       	brne	80004298 <_fflush_r+0x2c>
80004294:	6c 17       	ld.w	r7,r6[0x4]
80004296:	c0 58       	rjmp	800042a0 <_fflush_r+0x34>
80004298:	4b 88       	lddpc	r8,80004378 <_fflush_r+0x10c>
8000429a:	10 37       	cp.w	r7,r8
8000429c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800042a0:	8e 6a       	ld.sh	r10,r7[0xc]
800042a2:	14 98       	mov	r8,r10
800042a4:	ed ba 00 03 	bld	r10,0x3
800042a8:	c4 20       	breq	8000432c <_fflush_r+0xc0>
800042aa:	ab ba       	sbr	r10,0xb
800042ac:	ae 6a       	st.h	r7[0xc],r10
800042ae:	6e 18       	ld.w	r8,r7[0x4]
800042b0:	58 08       	cp.w	r8,0
800042b2:	e0 89 00 06 	brgt	800042be <_fflush_r+0x52>
800042b6:	6f 08       	ld.w	r8,r7[0x40]
800042b8:	58 08       	cp.w	r8,0
800042ba:	e0 8a 00 5a 	brle	8000436e <_fflush_r+0x102>
800042be:	6e b8       	ld.w	r8,r7[0x2c]
800042c0:	58 08       	cp.w	r8,0
800042c2:	c5 60       	breq	8000436e <_fflush_r+0x102>
800042c4:	e2 1a 10 00 	andl	r10,0x1000,COH
800042c8:	c0 30       	breq	800042ce <_fflush_r+0x62>
800042ca:	6f 55       	ld.w	r5,r7[0x54]
800042cc:	c0 f8       	rjmp	800042ea <_fflush_r+0x7e>
800042ce:	30 19       	mov	r9,1
800042d0:	6e 8b       	ld.w	r11,r7[0x20]
800042d2:	0c 9c       	mov	r12,r6
800042d4:	5d 18       	icall	r8
800042d6:	18 95       	mov	r5,r12
800042d8:	5b fc       	cp.w	r12,-1
800042da:	c0 81       	brne	800042ea <_fflush_r+0x7e>
800042dc:	6c 38       	ld.w	r8,r6[0xc]
800042de:	59 d8       	cp.w	r8,29
800042e0:	c4 70       	breq	8000436e <_fflush_r+0x102>
800042e2:	8e 68       	ld.sh	r8,r7[0xc]
800042e4:	a7 a8       	sbr	r8,0x6
800042e6:	ae 68       	st.h	r7[0xc],r8
800042e8:	d8 22       	popm	r4-r7,pc
800042ea:	8e 68       	ld.sh	r8,r7[0xc]
800042ec:	ed b8 00 02 	bld	r8,0x2
800042f0:	c0 91       	brne	80004302 <_fflush_r+0x96>
800042f2:	6e 18       	ld.w	r8,r7[0x4]
800042f4:	10 15       	sub	r5,r8
800042f6:	6e d8       	ld.w	r8,r7[0x34]
800042f8:	58 08       	cp.w	r8,0
800042fa:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800042fe:	eb d8 e1 15 	subne	r5,r5,r8
80004302:	6e b8       	ld.w	r8,r7[0x2c]
80004304:	0c 9c       	mov	r12,r6
80004306:	30 09       	mov	r9,0
80004308:	0a 9a       	mov	r10,r5
8000430a:	6e 8b       	ld.w	r11,r7[0x20]
8000430c:	5d 18       	icall	r8
8000430e:	8e 68       	ld.sh	r8,r7[0xc]
80004310:	0a 3c       	cp.w	r12,r5
80004312:	c2 61       	brne	8000435e <_fflush_r+0xf2>
80004314:	ab d8       	cbr	r8,0xb
80004316:	30 0c       	mov	r12,0
80004318:	6e 49       	ld.w	r9,r7[0x10]
8000431a:	ae 68       	st.h	r7[0xc],r8
8000431c:	8f 1c       	st.w	r7[0x4],r12
8000431e:	8f 09       	st.w	r7[0x0],r9
80004320:	ed b8 00 0c 	bld	r8,0xc
80004324:	c2 51       	brne	8000436e <_fflush_r+0x102>
80004326:	ef 45 00 54 	st.w	r7[84],r5
8000432a:	d8 22       	popm	r4-r7,pc
8000432c:	6e 45       	ld.w	r5,r7[0x10]
8000432e:	58 05       	cp.w	r5,0
80004330:	c1 f0       	breq	8000436e <_fflush_r+0x102>
80004332:	6e 04       	ld.w	r4,r7[0x0]
80004334:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80004338:	8f 05       	st.w	r7[0x0],r5
8000433a:	f9 b8 01 00 	movne	r8,0
8000433e:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80004342:	0a 14       	sub	r4,r5
80004344:	8f 28       	st.w	r7[0x8],r8
80004346:	c1 18       	rjmp	80004368 <_fflush_r+0xfc>
80004348:	08 99       	mov	r9,r4
8000434a:	0a 9a       	mov	r10,r5
8000434c:	6e a8       	ld.w	r8,r7[0x28]
8000434e:	6e 8b       	ld.w	r11,r7[0x20]
80004350:	0c 9c       	mov	r12,r6
80004352:	5d 18       	icall	r8
80004354:	18 14       	sub	r4,r12
80004356:	58 0c       	cp.w	r12,0
80004358:	e0 89 00 07 	brgt	80004366 <_fflush_r+0xfa>
8000435c:	8e 68       	ld.sh	r8,r7[0xc]
8000435e:	a7 a8       	sbr	r8,0x6
80004360:	3f fc       	mov	r12,-1
80004362:	ae 68       	st.h	r7[0xc],r8
80004364:	d8 22       	popm	r4-r7,pc
80004366:	18 05       	add	r5,r12
80004368:	58 04       	cp.w	r4,0
8000436a:	fe 99 ff ef 	brgt	80004348 <_fflush_r+0xdc>
8000436e:	d8 2a       	popm	r4-r7,pc,r12=0
80004370:	80 00       	ld.sh	r0,r0[0x0]
80004372:	59 04       	cp.w	r4,16
80004374:	80 00       	ld.sh	r0,r0[0x0]
80004376:	59 24       	cp.w	r4,18
80004378:	80 00       	ld.sh	r0,r0[0x0]
8000437a:	59 44       	cp.w	r4,20

8000437c <__sfp_lock_acquire>:
8000437c:	5e fc       	retal	r12

8000437e <__sfp_lock_release>:
8000437e:	5e fc       	retal	r12

80004380 <_cleanup_r>:
80004380:	d4 01       	pushm	lr
80004382:	fe cb ee e6 	sub	r11,pc,-4378
80004386:	e0 a0 03 03 	rcall	8000498c <_fwalk>
8000438a:	d8 02       	popm	pc

8000438c <__sfmoreglue>:
8000438c:	d4 21       	pushm	r4-r7,lr
8000438e:	16 95       	mov	r5,r11
80004390:	f6 06 10 5c 	mul	r6,r11,92
80004394:	ec cb ff f4 	sub	r11,r6,-12
80004398:	e0 a0 03 28 	rcall	800049e8 <_malloc_r>
8000439c:	18 97       	mov	r7,r12
8000439e:	c0 90       	breq	800043b0 <__sfmoreglue+0x24>
800043a0:	99 15       	st.w	r12[0x4],r5
800043a2:	30 0b       	mov	r11,0
800043a4:	2f 4c       	sub	r12,-12
800043a6:	0c 9a       	mov	r10,r6
800043a8:	8f 2c       	st.w	r7[0x8],r12
800043aa:	8f 0b       	st.w	r7[0x0],r11
800043ac:	e0 a0 05 5e 	rcall	80004e68 <memset>
800043b0:	0e 9c       	mov	r12,r7
800043b2:	d8 22       	popm	r4-r7,pc

800043b4 <__sfp>:
800043b4:	d4 21       	pushm	r4-r7,lr
800043b6:	49 b8       	lddpc	r8,80004420 <__sfp+0x6c>
800043b8:	18 96       	mov	r6,r12
800043ba:	70 07       	ld.w	r7,r8[0x0]
800043bc:	6e 68       	ld.w	r8,r7[0x18]
800043be:	58 08       	cp.w	r8,0
800043c0:	c0 31       	brne	800043c6 <__sfp+0x12>
800043c2:	0e 9c       	mov	r12,r7
800043c4:	c3 0c       	rcall	80004424 <__sinit>
800043c6:	ee c7 ff 28 	sub	r7,r7,-216
800043ca:	30 05       	mov	r5,0
800043cc:	6e 2c       	ld.w	r12,r7[0x8]
800043ce:	6e 18       	ld.w	r8,r7[0x4]
800043d0:	c0 68       	rjmp	800043dc <__sfp+0x28>
800043d2:	98 69       	ld.sh	r9,r12[0xc]
800043d4:	ea 09 19 00 	cp.h	r9,r5
800043d8:	c1 10       	breq	800043fa <__sfp+0x46>
800043da:	2a 4c       	sub	r12,-92
800043dc:	20 18       	sub	r8,1
800043de:	cf a7       	brpl	800043d2 <__sfp+0x1e>
800043e0:	6e 08       	ld.w	r8,r7[0x0]
800043e2:	58 08       	cp.w	r8,0
800043e4:	c0 61       	brne	800043f0 <__sfp+0x3c>
800043e6:	30 4b       	mov	r11,4
800043e8:	0c 9c       	mov	r12,r6
800043ea:	cd 1f       	rcall	8000438c <__sfmoreglue>
800043ec:	8f 0c       	st.w	r7[0x0],r12
800043ee:	c0 30       	breq	800043f4 <__sfp+0x40>
800043f0:	6e 07       	ld.w	r7,r7[0x0]
800043f2:	ce db       	rjmp	800043cc <__sfp+0x18>
800043f4:	30 c8       	mov	r8,12
800043f6:	8d 38       	st.w	r6[0xc],r8
800043f8:	d8 22       	popm	r4-r7,pc
800043fa:	30 08       	mov	r8,0
800043fc:	f9 48 00 4c 	st.w	r12[76],r8
80004400:	99 08       	st.w	r12[0x0],r8
80004402:	99 28       	st.w	r12[0x8],r8
80004404:	99 18       	st.w	r12[0x4],r8
80004406:	99 48       	st.w	r12[0x10],r8
80004408:	99 58       	st.w	r12[0x14],r8
8000440a:	99 68       	st.w	r12[0x18],r8
8000440c:	99 d8       	st.w	r12[0x34],r8
8000440e:	99 e8       	st.w	r12[0x38],r8
80004410:	f9 48 00 48 	st.w	r12[72],r8
80004414:	3f f8       	mov	r8,-1
80004416:	b8 78       	st.h	r12[0xe],r8
80004418:	30 18       	mov	r8,1
8000441a:	b8 68       	st.h	r12[0xc],r8
8000441c:	d8 22       	popm	r4-r7,pc
8000441e:	d7 03       	nop
80004420:	80 00       	ld.sh	r0,r0[0x0]
80004422:	58 fc       	cp.w	r12,15

80004424 <__sinit>:
80004424:	d4 21       	pushm	r4-r7,lr
80004426:	18 96       	mov	r6,r12
80004428:	78 67       	ld.w	r7,r12[0x18]
8000442a:	58 07       	cp.w	r7,0
8000442c:	c4 91       	brne	800044be <__sinit+0x9a>
8000442e:	fe c8 00 ae 	sub	r8,pc,174
80004432:	30 15       	mov	r5,1
80004434:	99 a8       	st.w	r12[0x28],r8
80004436:	f9 47 00 d8 	st.w	r12[216],r7
8000443a:	f9 47 00 dc 	st.w	r12[220],r7
8000443e:	f9 47 00 e0 	st.w	r12[224],r7
80004442:	99 65       	st.w	r12[0x18],r5
80004444:	cb 8f       	rcall	800043b4 <__sfp>
80004446:	8d 0c       	st.w	r6[0x0],r12
80004448:	0c 9c       	mov	r12,r6
8000444a:	cb 5f       	rcall	800043b4 <__sfp>
8000444c:	8d 1c       	st.w	r6[0x4],r12
8000444e:	0c 9c       	mov	r12,r6
80004450:	cb 2f       	rcall	800043b4 <__sfp>
80004452:	6c 09       	ld.w	r9,r6[0x0]
80004454:	30 48       	mov	r8,4
80004456:	93 07       	st.w	r9[0x0],r7
80004458:	b2 68       	st.h	r9[0xc],r8
8000445a:	93 17       	st.w	r9[0x4],r7
8000445c:	93 27       	st.w	r9[0x8],r7
8000445e:	6c 18       	ld.w	r8,r6[0x4]
80004460:	b2 77       	st.h	r9[0xe],r7
80004462:	93 47       	st.w	r9[0x10],r7
80004464:	93 57       	st.w	r9[0x14],r7
80004466:	93 67       	st.w	r9[0x18],r7
80004468:	93 89       	st.w	r9[0x20],r9
8000446a:	91 07       	st.w	r8[0x0],r7
8000446c:	91 17       	st.w	r8[0x4],r7
8000446e:	91 27       	st.w	r8[0x8],r7
80004470:	fe ce f2 c4 	sub	lr,pc,-3388
80004474:	fe cb f2 f4 	sub	r11,pc,-3340
80004478:	93 9e       	st.w	r9[0x24],lr
8000447a:	93 ab       	st.w	r9[0x28],r11
8000447c:	fe ca f3 1c 	sub	r10,pc,-3300
80004480:	fe c4 f3 28 	sub	r4,pc,-3288
80004484:	93 ba       	st.w	r9[0x2c],r10
80004486:	93 c4       	st.w	r9[0x30],r4
80004488:	30 99       	mov	r9,9
8000448a:	b0 69       	st.h	r8[0xc],r9
8000448c:	b0 75       	st.h	r8[0xe],r5
8000448e:	91 c4       	st.w	r8[0x30],r4
80004490:	91 47       	st.w	r8[0x10],r7
80004492:	91 57       	st.w	r8[0x14],r7
80004494:	91 67       	st.w	r8[0x18],r7
80004496:	91 88       	st.w	r8[0x20],r8
80004498:	91 9e       	st.w	r8[0x24],lr
8000449a:	91 ab       	st.w	r8[0x28],r11
8000449c:	91 ba       	st.w	r8[0x2c],r10
8000449e:	8d 2c       	st.w	r6[0x8],r12
800044a0:	31 28       	mov	r8,18
800044a2:	99 07       	st.w	r12[0x0],r7
800044a4:	b8 68       	st.h	r12[0xc],r8
800044a6:	99 17       	st.w	r12[0x4],r7
800044a8:	99 27       	st.w	r12[0x8],r7
800044aa:	30 28       	mov	r8,2
800044ac:	b8 78       	st.h	r12[0xe],r8
800044ae:	99 c4       	st.w	r12[0x30],r4
800044b0:	99 67       	st.w	r12[0x18],r7
800044b2:	99 9e       	st.w	r12[0x24],lr
800044b4:	99 ab       	st.w	r12[0x28],r11
800044b6:	99 ba       	st.w	r12[0x2c],r10
800044b8:	99 47       	st.w	r12[0x10],r7
800044ba:	99 57       	st.w	r12[0x14],r7
800044bc:	99 8c       	st.w	r12[0x20],r12
800044be:	d8 22       	popm	r4-r7,pc

800044c0 <_malloc_trim_r>:
800044c0:	d4 21       	pushm	r4-r7,lr
800044c2:	16 95       	mov	r5,r11
800044c4:	18 97       	mov	r7,r12
800044c6:	e0 a0 04 d8 	rcall	80004e76 <__malloc_lock>
800044ca:	4a 24       	lddpc	r4,80004550 <_malloc_trim_r+0x90>
800044cc:	68 28       	ld.w	r8,r4[0x8]
800044ce:	70 16       	ld.w	r6,r8[0x4]
800044d0:	e0 16 ff fc 	andl	r6,0xfffc
800044d4:	ec c8 ff 91 	sub	r8,r6,-111
800044d8:	f0 05 01 05 	sub	r5,r8,r5
800044dc:	e0 15 ff 80 	andl	r5,0xff80
800044e0:	ea c5 00 80 	sub	r5,r5,128
800044e4:	e0 45 00 7f 	cp.w	r5,127
800044e8:	e0 8a 00 23 	brle	8000452e <_malloc_trim_r+0x6e>
800044ec:	30 0b       	mov	r11,0
800044ee:	0e 9c       	mov	r12,r7
800044f0:	e0 a0 06 24 	rcall	80005138 <_sbrk_r>
800044f4:	68 28       	ld.w	r8,r4[0x8]
800044f6:	0c 08       	add	r8,r6
800044f8:	10 3c       	cp.w	r12,r8
800044fa:	c1 a1       	brne	8000452e <_malloc_trim_r+0x6e>
800044fc:	ea 0b 11 00 	rsub	r11,r5,0
80004500:	0e 9c       	mov	r12,r7
80004502:	e0 a0 06 1b 	rcall	80005138 <_sbrk_r>
80004506:	5b fc       	cp.w	r12,-1
80004508:	c1 71       	brne	80004536 <_malloc_trim_r+0x76>
8000450a:	30 0b       	mov	r11,0
8000450c:	0e 9c       	mov	r12,r7
8000450e:	e0 a0 06 15 	rcall	80005138 <_sbrk_r>
80004512:	68 28       	ld.w	r8,r4[0x8]
80004514:	f8 08 01 09 	sub	r9,r12,r8
80004518:	58 f9       	cp.w	r9,15
8000451a:	e0 8a 00 0a 	brle	8000452e <_malloc_trim_r+0x6e>
8000451e:	a1 a9       	sbr	r9,0x0
80004520:	91 19       	st.w	r8[0x4],r9
80004522:	48 d8       	lddpc	r8,80004554 <_malloc_trim_r+0x94>
80004524:	70 09       	ld.w	r9,r8[0x0]
80004526:	48 d8       	lddpc	r8,80004558 <_malloc_trim_r+0x98>
80004528:	f8 09 01 09 	sub	r9,r12,r9
8000452c:	91 09       	st.w	r8[0x0],r9
8000452e:	0e 9c       	mov	r12,r7
80004530:	e0 a0 04 a4 	rcall	80004e78 <__malloc_unlock>
80004534:	d8 2a       	popm	r4-r7,pc,r12=0
80004536:	68 28       	ld.w	r8,r4[0x8]
80004538:	0a 16       	sub	r6,r5
8000453a:	a1 a6       	sbr	r6,0x0
8000453c:	91 16       	st.w	r8[0x4],r6
8000453e:	48 78       	lddpc	r8,80004558 <_malloc_trim_r+0x98>
80004540:	70 09       	ld.w	r9,r8[0x0]
80004542:	0a 19       	sub	r9,r5
80004544:	0e 9c       	mov	r12,r7
80004546:	91 09       	st.w	r8[0x0],r9
80004548:	e0 a0 04 98 	rcall	80004e78 <__malloc_unlock>
8000454c:	da 2a       	popm	r4-r7,pc,r12=1
8000454e:	d7 03       	nop
80004550:	00 00       	add	r0,r0
80004552:	01 c8       	ld.ub	r8,r0[0x4]
80004554:	00 00       	add	r0,r0
80004556:	05 d4       	ld.ub	r4,r2[0x5]
80004558:	00 00       	add	r0,r0
8000455a:	0c 6c       	and	r12,r6

8000455c <_free_r>:
8000455c:	d4 21       	pushm	r4-r7,lr
8000455e:	16 96       	mov	r6,r11
80004560:	18 97       	mov	r7,r12
80004562:	58 0b       	cp.w	r11,0
80004564:	e0 80 00 c2 	breq	800046e8 <_free_r+0x18c>
80004568:	e0 a0 04 87 	rcall	80004e76 <__malloc_lock>
8000456c:	20 86       	sub	r6,8
8000456e:	4c ba       	lddpc	r10,80004698 <_free_r+0x13c>
80004570:	6c 18       	ld.w	r8,r6[0x4]
80004572:	74 2e       	ld.w	lr,r10[0x8]
80004574:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80004578:	a1 c8       	cbr	r8,0x0
8000457a:	ec 08 00 09 	add	r9,r6,r8
8000457e:	72 1b       	ld.w	r11,r9[0x4]
80004580:	e0 1b ff fc 	andl	r11,0xfffc
80004584:	1c 39       	cp.w	r9,lr
80004586:	c1 c1       	brne	800045be <_free_r+0x62>
80004588:	f6 08 00 08 	add	r8,r11,r8
8000458c:	58 0c       	cp.w	r12,0
8000458e:	c0 81       	brne	8000459e <_free_r+0x42>
80004590:	6c 09       	ld.w	r9,r6[0x0]
80004592:	12 16       	sub	r6,r9
80004594:	12 08       	add	r8,r9
80004596:	6c 3b       	ld.w	r11,r6[0xc]
80004598:	6c 29       	ld.w	r9,r6[0x8]
8000459a:	97 29       	st.w	r11[0x8],r9
8000459c:	93 3b       	st.w	r9[0xc],r11
8000459e:	10 99       	mov	r9,r8
800045a0:	95 26       	st.w	r10[0x8],r6
800045a2:	a1 a9       	sbr	r9,0x0
800045a4:	8d 19       	st.w	r6[0x4],r9
800045a6:	4b e9       	lddpc	r9,8000469c <_free_r+0x140>
800045a8:	72 09       	ld.w	r9,r9[0x0]
800045aa:	12 38       	cp.w	r8,r9
800045ac:	c0 53       	brcs	800045b6 <_free_r+0x5a>
800045ae:	4b d8       	lddpc	r8,800046a0 <_free_r+0x144>
800045b0:	0e 9c       	mov	r12,r7
800045b2:	70 0b       	ld.w	r11,r8[0x0]
800045b4:	c8 6f       	rcall	800044c0 <_malloc_trim_r>
800045b6:	0e 9c       	mov	r12,r7
800045b8:	e0 a0 04 60 	rcall	80004e78 <__malloc_unlock>
800045bc:	d8 22       	popm	r4-r7,pc
800045be:	93 1b       	st.w	r9[0x4],r11
800045c0:	58 0c       	cp.w	r12,0
800045c2:	c0 30       	breq	800045c8 <_free_r+0x6c>
800045c4:	30 0c       	mov	r12,0
800045c6:	c1 08       	rjmp	800045e6 <_free_r+0x8a>
800045c8:	6c 0e       	ld.w	lr,r6[0x0]
800045ca:	f4 c5 ff f8 	sub	r5,r10,-8
800045ce:	1c 16       	sub	r6,lr
800045d0:	1c 08       	add	r8,lr
800045d2:	6c 2e       	ld.w	lr,r6[0x8]
800045d4:	0a 3e       	cp.w	lr,r5
800045d6:	f9 bc 00 01 	moveq	r12,1
800045da:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800045de:	eb fe 1a 02 	st.wne	r5[0x8],lr
800045e2:	fd f5 1a 03 	st.wne	lr[0xc],r5
800045e6:	f2 0b 00 0e 	add	lr,r9,r11
800045ea:	7c 1e       	ld.w	lr,lr[0x4]
800045ec:	ed be 00 00 	bld	lr,0x0
800045f0:	c1 30       	breq	80004616 <_free_r+0xba>
800045f2:	16 08       	add	r8,r11
800045f4:	58 0c       	cp.w	r12,0
800045f6:	c0 c1       	brne	8000460e <_free_r+0xb2>
800045f8:	4a 8e       	lddpc	lr,80004698 <_free_r+0x13c>
800045fa:	72 2b       	ld.w	r11,r9[0x8]
800045fc:	2f 8e       	sub	lr,-8
800045fe:	1c 3b       	cp.w	r11,lr
80004600:	c0 71       	brne	8000460e <_free_r+0xb2>
80004602:	97 36       	st.w	r11[0xc],r6
80004604:	97 26       	st.w	r11[0x8],r6
80004606:	8d 2b       	st.w	r6[0x8],r11
80004608:	8d 3b       	st.w	r6[0xc],r11
8000460a:	30 1c       	mov	r12,1
8000460c:	c0 58       	rjmp	80004616 <_free_r+0xba>
8000460e:	72 2b       	ld.w	r11,r9[0x8]
80004610:	72 39       	ld.w	r9,r9[0xc]
80004612:	93 2b       	st.w	r9[0x8],r11
80004614:	97 39       	st.w	r11[0xc],r9
80004616:	10 99       	mov	r9,r8
80004618:	ec 08 09 08 	st.w	r6[r8],r8
8000461c:	a1 a9       	sbr	r9,0x0
8000461e:	8d 19       	st.w	r6[0x4],r9
80004620:	58 0c       	cp.w	r12,0
80004622:	c6 01       	brne	800046e2 <_free_r+0x186>
80004624:	e0 48 01 ff 	cp.w	r8,511
80004628:	e0 8b 00 13 	brhi	8000464e <_free_r+0xf2>
8000462c:	a3 98       	lsr	r8,0x3
8000462e:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004632:	72 2b       	ld.w	r11,r9[0x8]
80004634:	8d 39       	st.w	r6[0xc],r9
80004636:	8d 2b       	st.w	r6[0x8],r11
80004638:	97 36       	st.w	r11[0xc],r6
8000463a:	93 26       	st.w	r9[0x8],r6
8000463c:	a3 48       	asr	r8,0x2
8000463e:	74 19       	ld.w	r9,r10[0x4]
80004640:	30 1b       	mov	r11,1
80004642:	f6 08 09 48 	lsl	r8,r11,r8
80004646:	f3 e8 10 08 	or	r8,r9,r8
8000464a:	95 18       	st.w	r10[0x4],r8
8000464c:	c4 b8       	rjmp	800046e2 <_free_r+0x186>
8000464e:	f0 0b 16 09 	lsr	r11,r8,0x9
80004652:	58 4b       	cp.w	r11,4
80004654:	e0 8b 00 06 	brhi	80004660 <_free_r+0x104>
80004658:	f0 0b 16 06 	lsr	r11,r8,0x6
8000465c:	2c 8b       	sub	r11,-56
8000465e:	c2 68       	rjmp	800046aa <_free_r+0x14e>
80004660:	59 4b       	cp.w	r11,20
80004662:	e0 8b 00 04 	brhi	8000466a <_free_r+0x10e>
80004666:	2a 5b       	sub	r11,-91
80004668:	c2 18       	rjmp	800046aa <_free_r+0x14e>
8000466a:	e0 4b 00 54 	cp.w	r11,84
8000466e:	e0 8b 00 06 	brhi	8000467a <_free_r+0x11e>
80004672:	f0 0b 16 0c 	lsr	r11,r8,0xc
80004676:	29 2b       	sub	r11,-110
80004678:	c1 98       	rjmp	800046aa <_free_r+0x14e>
8000467a:	e0 4b 01 54 	cp.w	r11,340
8000467e:	e0 8b 00 06 	brhi	8000468a <_free_r+0x12e>
80004682:	f0 0b 16 0f 	lsr	r11,r8,0xf
80004686:	28 9b       	sub	r11,-119
80004688:	c1 18       	rjmp	800046aa <_free_r+0x14e>
8000468a:	e0 4b 05 54 	cp.w	r11,1364
8000468e:	e0 88 00 0b 	brls	800046a4 <_free_r+0x148>
80004692:	37 eb       	mov	r11,126
80004694:	c0 b8       	rjmp	800046aa <_free_r+0x14e>
80004696:	d7 03       	nop
80004698:	00 00       	add	r0,r0
8000469a:	01 c8       	ld.ub	r8,r0[0x4]
8000469c:	00 00       	add	r0,r0
8000469e:	05 d0       	ld.ub	r0,r2[0x5]
800046a0:	00 00       	add	r0,r0
800046a2:	0c 68       	and	r8,r6
800046a4:	f0 0b 16 12 	lsr	r11,r8,0x12
800046a8:	28 4b       	sub	r11,-124
800046aa:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800046ae:	78 29       	ld.w	r9,r12[0x8]
800046b0:	18 39       	cp.w	r9,r12
800046b2:	c0 e1       	brne	800046ce <_free_r+0x172>
800046b4:	74 18       	ld.w	r8,r10[0x4]
800046b6:	a3 4b       	asr	r11,0x2
800046b8:	30 1c       	mov	r12,1
800046ba:	f8 0b 09 4b 	lsl	r11,r12,r11
800046be:	f1 eb 10 0b 	or	r11,r8,r11
800046c2:	12 98       	mov	r8,r9
800046c4:	95 1b       	st.w	r10[0x4],r11
800046c6:	c0 a8       	rjmp	800046da <_free_r+0x17e>
800046c8:	72 29       	ld.w	r9,r9[0x8]
800046ca:	18 39       	cp.w	r9,r12
800046cc:	c0 60       	breq	800046d8 <_free_r+0x17c>
800046ce:	72 1a       	ld.w	r10,r9[0x4]
800046d0:	e0 1a ff fc 	andl	r10,0xfffc
800046d4:	14 38       	cp.w	r8,r10
800046d6:	cf 93       	brcs	800046c8 <_free_r+0x16c>
800046d8:	72 38       	ld.w	r8,r9[0xc]
800046da:	8d 38       	st.w	r6[0xc],r8
800046dc:	8d 29       	st.w	r6[0x8],r9
800046de:	93 36       	st.w	r9[0xc],r6
800046e0:	91 26       	st.w	r8[0x8],r6
800046e2:	0e 9c       	mov	r12,r7
800046e4:	e0 a0 03 ca 	rcall	80004e78 <__malloc_unlock>
800046e8:	d8 22       	popm	r4-r7,pc
800046ea:	d7 03       	nop

800046ec <__sfvwrite_r>:
800046ec:	d4 31       	pushm	r0-r7,lr
800046ee:	20 3d       	sub	sp,12
800046f0:	14 94       	mov	r4,r10
800046f2:	18 95       	mov	r5,r12
800046f4:	16 97       	mov	r7,r11
800046f6:	74 28       	ld.w	r8,r10[0x8]
800046f8:	58 08       	cp.w	r8,0
800046fa:	e0 80 01 45 	breq	80004984 <__sfvwrite_r+0x298>
800046fe:	96 68       	ld.sh	r8,r11[0xc]
80004700:	ed b8 00 03 	bld	r8,0x3
80004704:	c0 41       	brne	8000470c <__sfvwrite_r+0x20>
80004706:	76 48       	ld.w	r8,r11[0x10]
80004708:	58 08       	cp.w	r8,0
8000470a:	c0 c1       	brne	80004722 <__sfvwrite_r+0x36>
8000470c:	0e 9b       	mov	r11,r7
8000470e:	0a 9c       	mov	r12,r5
80004710:	e0 a0 05 e4 	rcall	800052d8 <__swsetup_r>
80004714:	c0 70       	breq	80004722 <__sfvwrite_r+0x36>
80004716:	8e 68       	ld.sh	r8,r7[0xc]
80004718:	a7 a8       	sbr	r8,0x6
8000471a:	ae 68       	st.h	r7[0xc],r8
8000471c:	30 98       	mov	r8,9
8000471e:	8b 38       	st.w	r5[0xc],r8
80004720:	c3 09       	rjmp	80004980 <__sfvwrite_r+0x294>
80004722:	8e 63       	ld.sh	r3,r7[0xc]
80004724:	68 00       	ld.w	r0,r4[0x0]
80004726:	06 96       	mov	r6,r3
80004728:	e2 16 00 02 	andl	r6,0x2,COH
8000472c:	c2 10       	breq	8000476e <__sfvwrite_r+0x82>
8000472e:	30 03       	mov	r3,0
80004730:	e0 62 04 00 	mov	r2,1024
80004734:	06 96       	mov	r6,r3
80004736:	c0 48       	rjmp	8000473e <__sfvwrite_r+0x52>
80004738:	60 03       	ld.w	r3,r0[0x0]
8000473a:	60 16       	ld.w	r6,r0[0x4]
8000473c:	2f 80       	sub	r0,-8
8000473e:	58 06       	cp.w	r6,0
80004740:	cf c0       	breq	80004738 <__sfvwrite_r+0x4c>
80004742:	e0 46 04 00 	cp.w	r6,1024
80004746:	ec 09 17 80 	movls	r9,r6
8000474a:	e4 09 17 b0 	movhi	r9,r2
8000474e:	06 9a       	mov	r10,r3
80004750:	6e a8       	ld.w	r8,r7[0x28]
80004752:	6e 8b       	ld.w	r11,r7[0x20]
80004754:	0a 9c       	mov	r12,r5
80004756:	5d 18       	icall	r8
80004758:	18 16       	sub	r6,r12
8000475a:	58 0c       	cp.w	r12,0
8000475c:	e0 8a 01 0f 	brle	8000497a <__sfvwrite_r+0x28e>
80004760:	68 28       	ld.w	r8,r4[0x8]
80004762:	18 18       	sub	r8,r12
80004764:	89 28       	st.w	r4[0x8],r8
80004766:	e0 80 01 0f 	breq	80004984 <__sfvwrite_r+0x298>
8000476a:	18 03       	add	r3,r12
8000476c:	ce 9b       	rjmp	8000473e <__sfvwrite_r+0x52>
8000476e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80004772:	c0 70       	breq	80004780 <__sfvwrite_r+0x94>
80004774:	50 06       	stdsp	sp[0x0],r6
80004776:	0c 93       	mov	r3,r6
80004778:	0c 91       	mov	r1,r6
8000477a:	50 15       	stdsp	sp[0x4],r5
8000477c:	08 92       	mov	r2,r4
8000477e:	c9 e8       	rjmp	800048ba <__sfvwrite_r+0x1ce>
80004780:	06 96       	mov	r6,r3
80004782:	08 91       	mov	r1,r4
80004784:	c0 48       	rjmp	8000478c <__sfvwrite_r+0xa0>
80004786:	60 03       	ld.w	r3,r0[0x0]
80004788:	60 16       	ld.w	r6,r0[0x4]
8000478a:	2f 80       	sub	r0,-8
8000478c:	58 06       	cp.w	r6,0
8000478e:	cf c0       	breq	80004786 <__sfvwrite_r+0x9a>
80004790:	8e 68       	ld.sh	r8,r7[0xc]
80004792:	6e 24       	ld.w	r4,r7[0x8]
80004794:	10 99       	mov	r9,r8
80004796:	e2 19 02 00 	andl	r9,0x200,COH
8000479a:	c5 50       	breq	80004844 <__sfvwrite_r+0x158>
8000479c:	08 36       	cp.w	r6,r4
8000479e:	c4 33       	brcs	80004824 <__sfvwrite_r+0x138>
800047a0:	10 99       	mov	r9,r8
800047a2:	e2 19 04 80 	andl	r9,0x480,COH
800047a6:	c3 f0       	breq	80004824 <__sfvwrite_r+0x138>
800047a8:	6e 4b       	ld.w	r11,r7[0x10]
800047aa:	6e 09       	ld.w	r9,r7[0x0]
800047ac:	16 19       	sub	r9,r11
800047ae:	50 09       	stdsp	sp[0x0],r9
800047b0:	6e 59       	ld.w	r9,r7[0x14]
800047b2:	10 9c       	mov	r12,r8
800047b4:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800047b8:	30 28       	mov	r8,2
800047ba:	f4 08 0c 08 	divs	r8,r10,r8
800047be:	fa e9 00 04 	st.d	sp[4],r8
800047c2:	10 94       	mov	r4,r8
800047c4:	40 09       	lddsp	r9,sp[0x0]
800047c6:	e2 1c 04 00 	andl	r12,0x400,COH
800047ca:	2f f9       	sub	r9,-1
800047cc:	0c 09       	add	r9,r6
800047ce:	12 38       	cp.w	r8,r9
800047d0:	f2 04 17 30 	movlo	r4,r9
800047d4:	58 0c       	cp.w	r12,0
800047d6:	c1 00       	breq	800047f6 <__sfvwrite_r+0x10a>
800047d8:	08 9b       	mov	r11,r4
800047da:	0a 9c       	mov	r12,r5
800047dc:	c0 6d       	rcall	800049e8 <_malloc_r>
800047de:	18 92       	mov	r2,r12
800047e0:	c1 40       	breq	80004808 <__sfvwrite_r+0x11c>
800047e2:	40 0a       	lddsp	r10,sp[0x0]
800047e4:	6e 4b       	ld.w	r11,r7[0x10]
800047e6:	fe b0 fb d5 	rcall	80003f90 <memcpy>
800047ea:	8e 68       	ld.sh	r8,r7[0xc]
800047ec:	e0 18 fb 7f 	andl	r8,0xfb7f
800047f0:	a7 b8       	sbr	r8,0x7
800047f2:	ae 68       	st.h	r7[0xc],r8
800047f4:	c0 d8       	rjmp	8000480e <__sfvwrite_r+0x122>
800047f6:	08 9a       	mov	r10,r4
800047f8:	0a 9c       	mov	r12,r5
800047fa:	e0 a0 03 41 	rcall	80004e7c <_realloc_r>
800047fe:	18 92       	mov	r2,r12
80004800:	c0 71       	brne	8000480e <__sfvwrite_r+0x122>
80004802:	6e 4b       	ld.w	r11,r7[0x10]
80004804:	0a 9c       	mov	r12,r5
80004806:	ca be       	rcall	8000455c <_free_r>
80004808:	30 c8       	mov	r8,12
8000480a:	8b 38       	st.w	r5[0xc],r8
8000480c:	cb 78       	rjmp	8000497a <__sfvwrite_r+0x28e>
8000480e:	40 0a       	lddsp	r10,sp[0x0]
80004810:	40 09       	lddsp	r9,sp[0x0]
80004812:	e8 0a 01 0a 	sub	r10,r4,r10
80004816:	e4 09 00 08 	add	r8,r2,r9
8000481a:	8f 54       	st.w	r7[0x14],r4
8000481c:	8f 2a       	st.w	r7[0x8],r10
8000481e:	8f 08       	st.w	r7[0x0],r8
80004820:	8f 42       	st.w	r7[0x10],r2
80004822:	0c 94       	mov	r4,r6
80004824:	08 36       	cp.w	r6,r4
80004826:	ec 04 17 30 	movlo	r4,r6
8000482a:	06 9b       	mov	r11,r3
8000482c:	08 9a       	mov	r10,r4
8000482e:	6e 0c       	ld.w	r12,r7[0x0]
80004830:	e0 a0 02 fd 	rcall	80004e2a <memmove>
80004834:	6e 08       	ld.w	r8,r7[0x0]
80004836:	08 08       	add	r8,r4
80004838:	8f 08       	st.w	r7[0x0],r8
8000483a:	6e 28       	ld.w	r8,r7[0x8]
8000483c:	08 18       	sub	r8,r4
8000483e:	0c 94       	mov	r4,r6
80004840:	8f 28       	st.w	r7[0x8],r8
80004842:	c3 08       	rjmp	800048a2 <__sfvwrite_r+0x1b6>
80004844:	08 36       	cp.w	r6,r4
80004846:	5f ba       	srhi	r10
80004848:	6e 0c       	ld.w	r12,r7[0x0]
8000484a:	6e 48       	ld.w	r8,r7[0x10]
8000484c:	10 3c       	cp.w	r12,r8
8000484e:	5f b8       	srhi	r8
80004850:	f5 e8 00 08 	and	r8,r10,r8
80004854:	f2 08 18 00 	cp.b	r8,r9
80004858:	c0 e0       	breq	80004874 <__sfvwrite_r+0x188>
8000485a:	06 9b       	mov	r11,r3
8000485c:	08 9a       	mov	r10,r4
8000485e:	e0 a0 02 e6 	rcall	80004e2a <memmove>
80004862:	6e 08       	ld.w	r8,r7[0x0]
80004864:	08 08       	add	r8,r4
80004866:	0e 9b       	mov	r11,r7
80004868:	8f 08       	st.w	r7[0x0],r8
8000486a:	0a 9c       	mov	r12,r5
8000486c:	fe b0 fd 00 	rcall	8000426c <_fflush_r>
80004870:	c1 90       	breq	800048a2 <__sfvwrite_r+0x1b6>
80004872:	c8 48       	rjmp	8000497a <__sfvwrite_r+0x28e>
80004874:	6e 59       	ld.w	r9,r7[0x14]
80004876:	12 36       	cp.w	r6,r9
80004878:	c0 a3       	brcs	8000488c <__sfvwrite_r+0x1a0>
8000487a:	6e a8       	ld.w	r8,r7[0x28]
8000487c:	06 9a       	mov	r10,r3
8000487e:	6e 8b       	ld.w	r11,r7[0x20]
80004880:	0a 9c       	mov	r12,r5
80004882:	5d 18       	icall	r8
80004884:	18 94       	mov	r4,r12
80004886:	e0 89 00 0e 	brgt	800048a2 <__sfvwrite_r+0x1b6>
8000488a:	c7 88       	rjmp	8000497a <__sfvwrite_r+0x28e>
8000488c:	0c 9a       	mov	r10,r6
8000488e:	06 9b       	mov	r11,r3
80004890:	e0 a0 02 cd 	rcall	80004e2a <memmove>
80004894:	6e 08       	ld.w	r8,r7[0x0]
80004896:	0c 08       	add	r8,r6
80004898:	0c 94       	mov	r4,r6
8000489a:	8f 08       	st.w	r7[0x0],r8
8000489c:	6e 28       	ld.w	r8,r7[0x8]
8000489e:	0c 18       	sub	r8,r6
800048a0:	8f 28       	st.w	r7[0x8],r8
800048a2:	62 28       	ld.w	r8,r1[0x8]
800048a4:	08 18       	sub	r8,r4
800048a6:	83 28       	st.w	r1[0x8],r8
800048a8:	c6 e0       	breq	80004984 <__sfvwrite_r+0x298>
800048aa:	08 16       	sub	r6,r4
800048ac:	08 03       	add	r3,r4
800048ae:	c6 fb       	rjmp	8000478c <__sfvwrite_r+0xa0>
800048b0:	60 03       	ld.w	r3,r0[0x0]
800048b2:	60 11       	ld.w	r1,r0[0x4]
800048b4:	30 08       	mov	r8,0
800048b6:	2f 80       	sub	r0,-8
800048b8:	50 08       	stdsp	sp[0x0],r8
800048ba:	58 01       	cp.w	r1,0
800048bc:	cf a0       	breq	800048b0 <__sfvwrite_r+0x1c4>
800048be:	40 0a       	lddsp	r10,sp[0x0]
800048c0:	58 0a       	cp.w	r10,0
800048c2:	c1 51       	brne	800048ec <__sfvwrite_r+0x200>
800048c4:	e2 c6 ff ff 	sub	r6,r1,-1
800048c8:	02 9a       	mov	r10,r1
800048ca:	30 ab       	mov	r11,10
800048cc:	06 9c       	mov	r12,r3
800048ce:	e0 a0 02 a3 	rcall	80004e14 <memchr>
800048d2:	f8 c8 ff ff 	sub	r8,r12,-1
800048d6:	58 0c       	cp.w	r12,0
800048d8:	f1 d3 e1 16 	subne	r6,r8,r3
800048dc:	f9 b9 01 01 	movne	r9,1
800048e0:	fb f9 1a 00 	st.wne	sp[0x0],r9
800048e4:	f9 b8 00 01 	moveq	r8,1
800048e8:	fb f8 0a 00 	st.weq	sp[0x0],r8
800048ec:	02 36       	cp.w	r6,r1
800048ee:	ec 04 17 80 	movls	r4,r6
800048f2:	e2 04 17 b0 	movhi	r4,r1
800048f6:	6e 59       	ld.w	r9,r7[0x14]
800048f8:	6e 25       	ld.w	r5,r7[0x8]
800048fa:	f2 05 00 05 	add	r5,r9,r5
800048fe:	0a 34       	cp.w	r4,r5
80004900:	5f 9a       	srgt	r10
80004902:	6e 0c       	ld.w	r12,r7[0x0]
80004904:	6e 48       	ld.w	r8,r7[0x10]
80004906:	10 3c       	cp.w	r12,r8
80004908:	5f b8       	srhi	r8
8000490a:	f5 e8 00 08 	and	r8,r10,r8
8000490e:	30 0a       	mov	r10,0
80004910:	f4 08 18 00 	cp.b	r8,r10
80004914:	c0 e0       	breq	80004930 <__sfvwrite_r+0x244>
80004916:	06 9b       	mov	r11,r3
80004918:	0a 9a       	mov	r10,r5
8000491a:	e0 a0 02 88 	rcall	80004e2a <memmove>
8000491e:	6e 08       	ld.w	r8,r7[0x0]
80004920:	0a 08       	add	r8,r5
80004922:	0e 9b       	mov	r11,r7
80004924:	8f 08       	st.w	r7[0x0],r8
80004926:	40 1c       	lddsp	r12,sp[0x4]
80004928:	fe b0 fc a2 	rcall	8000426c <_fflush_r>
8000492c:	c1 80       	breq	8000495c <__sfvwrite_r+0x270>
8000492e:	c2 68       	rjmp	8000497a <__sfvwrite_r+0x28e>
80004930:	12 34       	cp.w	r4,r9
80004932:	c0 a5       	brlt	80004946 <__sfvwrite_r+0x25a>
80004934:	6e a8       	ld.w	r8,r7[0x28]
80004936:	06 9a       	mov	r10,r3
80004938:	6e 8b       	ld.w	r11,r7[0x20]
8000493a:	40 1c       	lddsp	r12,sp[0x4]
8000493c:	5d 18       	icall	r8
8000493e:	18 95       	mov	r5,r12
80004940:	e0 89 00 0e 	brgt	8000495c <__sfvwrite_r+0x270>
80004944:	c1 b8       	rjmp	8000497a <__sfvwrite_r+0x28e>
80004946:	08 9a       	mov	r10,r4
80004948:	06 9b       	mov	r11,r3
8000494a:	e0 a0 02 70 	rcall	80004e2a <memmove>
8000494e:	6e 08       	ld.w	r8,r7[0x0]
80004950:	08 08       	add	r8,r4
80004952:	08 95       	mov	r5,r4
80004954:	8f 08       	st.w	r7[0x0],r8
80004956:	6e 28       	ld.w	r8,r7[0x8]
80004958:	08 18       	sub	r8,r4
8000495a:	8f 28       	st.w	r7[0x8],r8
8000495c:	0a 16       	sub	r6,r5
8000495e:	c0 71       	brne	8000496c <__sfvwrite_r+0x280>
80004960:	0e 9b       	mov	r11,r7
80004962:	40 1c       	lddsp	r12,sp[0x4]
80004964:	fe b0 fc 84 	rcall	8000426c <_fflush_r>
80004968:	c0 91       	brne	8000497a <__sfvwrite_r+0x28e>
8000496a:	50 06       	stdsp	sp[0x0],r6
8000496c:	64 28       	ld.w	r8,r2[0x8]
8000496e:	0a 18       	sub	r8,r5
80004970:	85 28       	st.w	r2[0x8],r8
80004972:	c0 90       	breq	80004984 <__sfvwrite_r+0x298>
80004974:	0a 11       	sub	r1,r5
80004976:	0a 03       	add	r3,r5
80004978:	ca 1b       	rjmp	800048ba <__sfvwrite_r+0x1ce>
8000497a:	8e 68       	ld.sh	r8,r7[0xc]
8000497c:	a7 a8       	sbr	r8,0x6
8000497e:	ae 68       	st.h	r7[0xc],r8
80004980:	3f fc       	mov	r12,-1
80004982:	c0 28       	rjmp	80004986 <__sfvwrite_r+0x29a>
80004984:	30 0c       	mov	r12,0
80004986:	2f dd       	sub	sp,-12
80004988:	d8 32       	popm	r0-r7,pc
8000498a:	d7 03       	nop

8000498c <_fwalk>:
8000498c:	d4 31       	pushm	r0-r7,lr
8000498e:	30 05       	mov	r5,0
80004990:	16 91       	mov	r1,r11
80004992:	f8 c7 ff 28 	sub	r7,r12,-216
80004996:	0a 92       	mov	r2,r5
80004998:	fe b0 fc f2 	rcall	8000437c <__sfp_lock_acquire>
8000499c:	3f f3       	mov	r3,-1
8000499e:	c1 68       	rjmp	800049ca <_fwalk+0x3e>
800049a0:	6e 26       	ld.w	r6,r7[0x8]
800049a2:	6e 14       	ld.w	r4,r7[0x4]
800049a4:	2f 46       	sub	r6,-12
800049a6:	c0 c8       	rjmp	800049be <_fwalk+0x32>
800049a8:	8c 08       	ld.sh	r8,r6[0x0]
800049aa:	e4 08 19 00 	cp.h	r8,r2
800049ae:	c0 70       	breq	800049bc <_fwalk+0x30>
800049b0:	8c 18       	ld.sh	r8,r6[0x2]
800049b2:	e6 08 19 00 	cp.h	r8,r3
800049b6:	c0 30       	breq	800049bc <_fwalk+0x30>
800049b8:	5d 11       	icall	r1
800049ba:	18 45       	or	r5,r12
800049bc:	2a 46       	sub	r6,-92
800049be:	20 14       	sub	r4,1
800049c0:	ec cc 00 0c 	sub	r12,r6,12
800049c4:	58 04       	cp.w	r4,0
800049c6:	cf 14       	brge	800049a8 <_fwalk+0x1c>
800049c8:	6e 07       	ld.w	r7,r7[0x0]
800049ca:	58 07       	cp.w	r7,0
800049cc:	ce a1       	brne	800049a0 <_fwalk+0x14>
800049ce:	fe b0 fc d8 	rcall	8000437e <__sfp_lock_release>
800049d2:	0a 9c       	mov	r12,r5
800049d4:	d8 32       	popm	r0-r7,pc
800049d6:	d7 03       	nop

800049d8 <malloc>:
800049d8:	d4 01       	pushm	lr
800049da:	48 38       	lddpc	r8,800049e4 <malloc+0xc>
800049dc:	18 9b       	mov	r11,r12
800049de:	70 0c       	ld.w	r12,r8[0x0]
800049e0:	c0 4c       	rcall	800049e8 <_malloc_r>
800049e2:	d8 02       	popm	pc
800049e4:	00 00       	add	r0,r0
800049e6:	01 c4       	ld.ub	r4,r0[0x4]

800049e8 <_malloc_r>:
800049e8:	d4 31       	pushm	r0-r7,lr
800049ea:	f6 c8 ff f5 	sub	r8,r11,-11
800049ee:	18 95       	mov	r5,r12
800049f0:	10 97       	mov	r7,r8
800049f2:	e0 17 ff f8 	andl	r7,0xfff8
800049f6:	59 68       	cp.w	r8,22
800049f8:	f9 b7 08 10 	movls	r7,16
800049fc:	16 37       	cp.w	r7,r11
800049fe:	5f 38       	srlo	r8
80004a00:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80004a04:	c0 50       	breq	80004a0e <_malloc_r+0x26>
80004a06:	30 c8       	mov	r8,12
80004a08:	99 38       	st.w	r12[0xc],r8
80004a0a:	e0 8f 01 eb 	bral	80004de0 <_malloc_r+0x3f8>
80004a0e:	e0 a0 02 34 	rcall	80004e76 <__malloc_lock>
80004a12:	e0 47 01 f7 	cp.w	r7,503
80004a16:	e0 8b 00 1c 	brhi	80004a4e <_malloc_r+0x66>
80004a1a:	ee 03 16 03 	lsr	r3,r7,0x3
80004a1e:	4c c8       	lddpc	r8,80004b4c <_malloc_r+0x164>
80004a20:	f0 03 00 38 	add	r8,r8,r3<<0x3
80004a24:	70 36       	ld.w	r6,r8[0xc]
80004a26:	10 36       	cp.w	r6,r8
80004a28:	c0 61       	brne	80004a34 <_malloc_r+0x4c>
80004a2a:	ec c8 ff f8 	sub	r8,r6,-8
80004a2e:	70 36       	ld.w	r6,r8[0xc]
80004a30:	10 36       	cp.w	r6,r8
80004a32:	c0 c0       	breq	80004a4a <_malloc_r+0x62>
80004a34:	6c 18       	ld.w	r8,r6[0x4]
80004a36:	e0 18 ff fc 	andl	r8,0xfffc
80004a3a:	6c 3a       	ld.w	r10,r6[0xc]
80004a3c:	ec 08 00 09 	add	r9,r6,r8
80004a40:	0a 9c       	mov	r12,r5
80004a42:	6c 28       	ld.w	r8,r6[0x8]
80004a44:	95 28       	st.w	r10[0x8],r8
80004a46:	91 3a       	st.w	r8[0xc],r10
80004a48:	c4 68       	rjmp	80004ad4 <_malloc_r+0xec>
80004a4a:	2f e3       	sub	r3,-2
80004a4c:	c4 c8       	rjmp	80004ae4 <_malloc_r+0xfc>
80004a4e:	ee 03 16 09 	lsr	r3,r7,0x9
80004a52:	c0 41       	brne	80004a5a <_malloc_r+0x72>
80004a54:	ee 03 16 03 	lsr	r3,r7,0x3
80004a58:	c2 68       	rjmp	80004aa4 <_malloc_r+0xbc>
80004a5a:	58 43       	cp.w	r3,4
80004a5c:	e0 8b 00 06 	brhi	80004a68 <_malloc_r+0x80>
80004a60:	ee 03 16 06 	lsr	r3,r7,0x6
80004a64:	2c 83       	sub	r3,-56
80004a66:	c1 f8       	rjmp	80004aa4 <_malloc_r+0xbc>
80004a68:	59 43       	cp.w	r3,20
80004a6a:	e0 8b 00 04 	brhi	80004a72 <_malloc_r+0x8a>
80004a6e:	2a 53       	sub	r3,-91
80004a70:	c1 a8       	rjmp	80004aa4 <_malloc_r+0xbc>
80004a72:	e0 43 00 54 	cp.w	r3,84
80004a76:	e0 8b 00 06 	brhi	80004a82 <_malloc_r+0x9a>
80004a7a:	ee 03 16 0c 	lsr	r3,r7,0xc
80004a7e:	29 23       	sub	r3,-110
80004a80:	c1 28       	rjmp	80004aa4 <_malloc_r+0xbc>
80004a82:	e0 43 01 54 	cp.w	r3,340
80004a86:	e0 8b 00 06 	brhi	80004a92 <_malloc_r+0xaa>
80004a8a:	ee 03 16 0f 	lsr	r3,r7,0xf
80004a8e:	28 93       	sub	r3,-119
80004a90:	c0 a8       	rjmp	80004aa4 <_malloc_r+0xbc>
80004a92:	e0 43 05 54 	cp.w	r3,1364
80004a96:	e0 88 00 04 	brls	80004a9e <_malloc_r+0xb6>
80004a9a:	37 e3       	mov	r3,126
80004a9c:	c0 48       	rjmp	80004aa4 <_malloc_r+0xbc>
80004a9e:	ee 03 16 12 	lsr	r3,r7,0x12
80004aa2:	28 43       	sub	r3,-124
80004aa4:	4a aa       	lddpc	r10,80004b4c <_malloc_r+0x164>
80004aa6:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80004aaa:	74 36       	ld.w	r6,r10[0xc]
80004aac:	c1 98       	rjmp	80004ade <_malloc_r+0xf6>
80004aae:	6c 19       	ld.w	r9,r6[0x4]
80004ab0:	e0 19 ff fc 	andl	r9,0xfffc
80004ab4:	f2 07 01 0b 	sub	r11,r9,r7
80004ab8:	58 fb       	cp.w	r11,15
80004aba:	e0 8a 00 04 	brle	80004ac2 <_malloc_r+0xda>
80004abe:	20 13       	sub	r3,1
80004ac0:	c1 18       	rjmp	80004ae2 <_malloc_r+0xfa>
80004ac2:	6c 38       	ld.w	r8,r6[0xc]
80004ac4:	58 0b       	cp.w	r11,0
80004ac6:	c0 b5       	brlt	80004adc <_malloc_r+0xf4>
80004ac8:	6c 2a       	ld.w	r10,r6[0x8]
80004aca:	ec 09 00 09 	add	r9,r6,r9
80004ace:	0a 9c       	mov	r12,r5
80004ad0:	91 2a       	st.w	r8[0x8],r10
80004ad2:	95 38       	st.w	r10[0xc],r8
80004ad4:	72 18       	ld.w	r8,r9[0x4]
80004ad6:	a1 a8       	sbr	r8,0x0
80004ad8:	93 18       	st.w	r9[0x4],r8
80004ada:	cb a8       	rjmp	80004c4e <_malloc_r+0x266>
80004adc:	10 96       	mov	r6,r8
80004ade:	14 36       	cp.w	r6,r10
80004ae0:	ce 71       	brne	80004aae <_malloc_r+0xc6>
80004ae2:	2f f3       	sub	r3,-1
80004ae4:	49 aa       	lddpc	r10,80004b4c <_malloc_r+0x164>
80004ae6:	f4 cc ff f8 	sub	r12,r10,-8
80004aea:	78 26       	ld.w	r6,r12[0x8]
80004aec:	18 36       	cp.w	r6,r12
80004aee:	c6 c0       	breq	80004bc6 <_malloc_r+0x1de>
80004af0:	6c 19       	ld.w	r9,r6[0x4]
80004af2:	e0 19 ff fc 	andl	r9,0xfffc
80004af6:	f2 07 01 08 	sub	r8,r9,r7
80004afa:	58 f8       	cp.w	r8,15
80004afc:	e0 89 00 8e 	brgt	80004c18 <_malloc_r+0x230>
80004b00:	99 3c       	st.w	r12[0xc],r12
80004b02:	99 2c       	st.w	r12[0x8],r12
80004b04:	58 08       	cp.w	r8,0
80004b06:	c0 55       	brlt	80004b10 <_malloc_r+0x128>
80004b08:	ec 09 00 09 	add	r9,r6,r9
80004b0c:	0a 9c       	mov	r12,r5
80004b0e:	ce 3b       	rjmp	80004ad4 <_malloc_r+0xec>
80004b10:	e0 49 01 ff 	cp.w	r9,511
80004b14:	e0 8b 00 13 	brhi	80004b3a <_malloc_r+0x152>
80004b18:	a3 99       	lsr	r9,0x3
80004b1a:	f4 09 00 38 	add	r8,r10,r9<<0x3
80004b1e:	70 2b       	ld.w	r11,r8[0x8]
80004b20:	8d 38       	st.w	r6[0xc],r8
80004b22:	8d 2b       	st.w	r6[0x8],r11
80004b24:	97 36       	st.w	r11[0xc],r6
80004b26:	91 26       	st.w	r8[0x8],r6
80004b28:	a3 49       	asr	r9,0x2
80004b2a:	74 18       	ld.w	r8,r10[0x4]
80004b2c:	30 1b       	mov	r11,1
80004b2e:	f6 09 09 49 	lsl	r9,r11,r9
80004b32:	f1 e9 10 09 	or	r9,r8,r9
80004b36:	95 19       	st.w	r10[0x4],r9
80004b38:	c4 78       	rjmp	80004bc6 <_malloc_r+0x1de>
80004b3a:	f2 0a 16 09 	lsr	r10,r9,0x9
80004b3e:	58 4a       	cp.w	r10,4
80004b40:	e0 8b 00 08 	brhi	80004b50 <_malloc_r+0x168>
80004b44:	f2 0a 16 06 	lsr	r10,r9,0x6
80004b48:	2c 8a       	sub	r10,-56
80004b4a:	c2 18       	rjmp	80004b8c <_malloc_r+0x1a4>
80004b4c:	00 00       	add	r0,r0
80004b4e:	01 c8       	ld.ub	r8,r0[0x4]
80004b50:	59 4a       	cp.w	r10,20
80004b52:	e0 8b 00 04 	brhi	80004b5a <_malloc_r+0x172>
80004b56:	2a 5a       	sub	r10,-91
80004b58:	c1 a8       	rjmp	80004b8c <_malloc_r+0x1a4>
80004b5a:	e0 4a 00 54 	cp.w	r10,84
80004b5e:	e0 8b 00 06 	brhi	80004b6a <_malloc_r+0x182>
80004b62:	f2 0a 16 0c 	lsr	r10,r9,0xc
80004b66:	29 2a       	sub	r10,-110
80004b68:	c1 28       	rjmp	80004b8c <_malloc_r+0x1a4>
80004b6a:	e0 4a 01 54 	cp.w	r10,340
80004b6e:	e0 8b 00 06 	brhi	80004b7a <_malloc_r+0x192>
80004b72:	f2 0a 16 0f 	lsr	r10,r9,0xf
80004b76:	28 9a       	sub	r10,-119
80004b78:	c0 a8       	rjmp	80004b8c <_malloc_r+0x1a4>
80004b7a:	e0 4a 05 54 	cp.w	r10,1364
80004b7e:	e0 88 00 04 	brls	80004b86 <_malloc_r+0x19e>
80004b82:	37 ea       	mov	r10,126
80004b84:	c0 48       	rjmp	80004b8c <_malloc_r+0x1a4>
80004b86:	f2 0a 16 12 	lsr	r10,r9,0x12
80004b8a:	28 4a       	sub	r10,-124
80004b8c:	4c 7b       	lddpc	r11,80004ca8 <_malloc_r+0x2c0>
80004b8e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80004b92:	68 28       	ld.w	r8,r4[0x8]
80004b94:	08 38       	cp.w	r8,r4
80004b96:	c0 e1       	brne	80004bb2 <_malloc_r+0x1ca>
80004b98:	76 19       	ld.w	r9,r11[0x4]
80004b9a:	a3 4a       	asr	r10,0x2
80004b9c:	30 1e       	mov	lr,1
80004b9e:	fc 0a 09 4a 	lsl	r10,lr,r10
80004ba2:	f3 ea 10 0a 	or	r10,r9,r10
80004ba6:	10 99       	mov	r9,r8
80004ba8:	97 1a       	st.w	r11[0x4],r10
80004baa:	c0 a8       	rjmp	80004bbe <_malloc_r+0x1d6>
80004bac:	70 28       	ld.w	r8,r8[0x8]
80004bae:	08 38       	cp.w	r8,r4
80004bb0:	c0 60       	breq	80004bbc <_malloc_r+0x1d4>
80004bb2:	70 1a       	ld.w	r10,r8[0x4]
80004bb4:	e0 1a ff fc 	andl	r10,0xfffc
80004bb8:	14 39       	cp.w	r9,r10
80004bba:	cf 93       	brcs	80004bac <_malloc_r+0x1c4>
80004bbc:	70 39       	ld.w	r9,r8[0xc]
80004bbe:	8d 39       	st.w	r6[0xc],r9
80004bc0:	8d 28       	st.w	r6[0x8],r8
80004bc2:	91 36       	st.w	r8[0xc],r6
80004bc4:	93 26       	st.w	r9[0x8],r6
80004bc6:	e6 08 14 02 	asr	r8,r3,0x2
80004bca:	30 1b       	mov	r11,1
80004bcc:	4b 74       	lddpc	r4,80004ca8 <_malloc_r+0x2c0>
80004bce:	f6 08 09 4b 	lsl	r11,r11,r8
80004bd2:	68 18       	ld.w	r8,r4[0x4]
80004bd4:	10 3b       	cp.w	r11,r8
80004bd6:	e0 8b 00 6b 	brhi	80004cac <_malloc_r+0x2c4>
80004bda:	f7 e8 00 09 	and	r9,r11,r8
80004bde:	c0 b1       	brne	80004bf4 <_malloc_r+0x20c>
80004be0:	e0 13 ff fc 	andl	r3,0xfffc
80004be4:	a1 7b       	lsl	r11,0x1
80004be6:	2f c3       	sub	r3,-4
80004be8:	c0 38       	rjmp	80004bee <_malloc_r+0x206>
80004bea:	2f c3       	sub	r3,-4
80004bec:	a1 7b       	lsl	r11,0x1
80004bee:	f7 e8 00 09 	and	r9,r11,r8
80004bf2:	cf c0       	breq	80004bea <_malloc_r+0x202>
80004bf4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80004bf8:	06 92       	mov	r2,r3
80004bfa:	1c 91       	mov	r1,lr
80004bfc:	62 36       	ld.w	r6,r1[0xc]
80004bfe:	c2 d8       	rjmp	80004c58 <_malloc_r+0x270>
80004c00:	6c 1a       	ld.w	r10,r6[0x4]
80004c02:	e0 1a ff fc 	andl	r10,0xfffc
80004c06:	f4 07 01 08 	sub	r8,r10,r7
80004c0a:	58 f8       	cp.w	r8,15
80004c0c:	e0 8a 00 15 	brle	80004c36 <_malloc_r+0x24e>
80004c10:	6c 3a       	ld.w	r10,r6[0xc]
80004c12:	6c 29       	ld.w	r9,r6[0x8]
80004c14:	95 29       	st.w	r10[0x8],r9
80004c16:	93 3a       	st.w	r9[0xc],r10
80004c18:	0e 99       	mov	r9,r7
80004c1a:	ec 07 00 07 	add	r7,r6,r7
80004c1e:	a1 a9       	sbr	r9,0x0
80004c20:	99 37       	st.w	r12[0xc],r7
80004c22:	99 27       	st.w	r12[0x8],r7
80004c24:	8d 19       	st.w	r6[0x4],r9
80004c26:	ee 08 09 08 	st.w	r7[r8],r8
80004c2a:	8f 2c       	st.w	r7[0x8],r12
80004c2c:	8f 3c       	st.w	r7[0xc],r12
80004c2e:	a1 a8       	sbr	r8,0x0
80004c30:	0a 9c       	mov	r12,r5
80004c32:	8f 18       	st.w	r7[0x4],r8
80004c34:	c0 d8       	rjmp	80004c4e <_malloc_r+0x266>
80004c36:	6c 39       	ld.w	r9,r6[0xc]
80004c38:	58 08       	cp.w	r8,0
80004c3a:	c0 e5       	brlt	80004c56 <_malloc_r+0x26e>
80004c3c:	ec 0a 00 0a 	add	r10,r6,r10
80004c40:	74 18       	ld.w	r8,r10[0x4]
80004c42:	a1 a8       	sbr	r8,0x0
80004c44:	0a 9c       	mov	r12,r5
80004c46:	95 18       	st.w	r10[0x4],r8
80004c48:	6c 28       	ld.w	r8,r6[0x8]
80004c4a:	93 28       	st.w	r9[0x8],r8
80004c4c:	91 39       	st.w	r8[0xc],r9
80004c4e:	c1 5d       	rcall	80004e78 <__malloc_unlock>
80004c50:	ec cc ff f8 	sub	r12,r6,-8
80004c54:	d8 32       	popm	r0-r7,pc
80004c56:	12 96       	mov	r6,r9
80004c58:	02 36       	cp.w	r6,r1
80004c5a:	cd 31       	brne	80004c00 <_malloc_r+0x218>
80004c5c:	2f f2       	sub	r2,-1
80004c5e:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80004c62:	c0 30       	breq	80004c68 <_malloc_r+0x280>
80004c64:	2f 81       	sub	r1,-8
80004c66:	cc bb       	rjmp	80004bfc <_malloc_r+0x214>
80004c68:	1c 98       	mov	r8,lr
80004c6a:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80004c6e:	c0 81       	brne	80004c7e <_malloc_r+0x296>
80004c70:	68 19       	ld.w	r9,r4[0x4]
80004c72:	f6 08 11 ff 	rsub	r8,r11,-1
80004c76:	f3 e8 00 08 	and	r8,r9,r8
80004c7a:	89 18       	st.w	r4[0x4],r8
80004c7c:	c0 78       	rjmp	80004c8a <_malloc_r+0x2a2>
80004c7e:	f0 c9 00 08 	sub	r9,r8,8
80004c82:	20 13       	sub	r3,1
80004c84:	70 08       	ld.w	r8,r8[0x0]
80004c86:	12 38       	cp.w	r8,r9
80004c88:	cf 10       	breq	80004c6a <_malloc_r+0x282>
80004c8a:	a1 7b       	lsl	r11,0x1
80004c8c:	68 18       	ld.w	r8,r4[0x4]
80004c8e:	10 3b       	cp.w	r11,r8
80004c90:	e0 8b 00 0e 	brhi	80004cac <_malloc_r+0x2c4>
80004c94:	58 0b       	cp.w	r11,0
80004c96:	c0 b0       	breq	80004cac <_malloc_r+0x2c4>
80004c98:	04 93       	mov	r3,r2
80004c9a:	c0 38       	rjmp	80004ca0 <_malloc_r+0x2b8>
80004c9c:	2f c3       	sub	r3,-4
80004c9e:	a1 7b       	lsl	r11,0x1
80004ca0:	f7 e8 00 09 	and	r9,r11,r8
80004ca4:	ca 81       	brne	80004bf4 <_malloc_r+0x20c>
80004ca6:	cf bb       	rjmp	80004c9c <_malloc_r+0x2b4>
80004ca8:	00 00       	add	r0,r0
80004caa:	01 c8       	ld.ub	r8,r0[0x4]
80004cac:	68 23       	ld.w	r3,r4[0x8]
80004cae:	66 12       	ld.w	r2,r3[0x4]
80004cb0:	e0 12 ff fc 	andl	r2,0xfffc
80004cb4:	0e 32       	cp.w	r2,r7
80004cb6:	5f 39       	srlo	r9
80004cb8:	e4 07 01 08 	sub	r8,r2,r7
80004cbc:	58 f8       	cp.w	r8,15
80004cbe:	5f aa       	srle	r10
80004cc0:	f5 e9 10 09 	or	r9,r10,r9
80004cc4:	e0 80 00 9a 	breq	80004df8 <_malloc_r+0x410>
80004cc8:	4c 78       	lddpc	r8,80004de4 <_malloc_r+0x3fc>
80004cca:	70 01       	ld.w	r1,r8[0x0]
80004ccc:	4c 78       	lddpc	r8,80004de8 <_malloc_r+0x400>
80004cce:	2f 01       	sub	r1,-16
80004cd0:	70 08       	ld.w	r8,r8[0x0]
80004cd2:	0e 01       	add	r1,r7
80004cd4:	5b f8       	cp.w	r8,-1
80004cd6:	c0 40       	breq	80004cde <_malloc_r+0x2f6>
80004cd8:	28 11       	sub	r1,-127
80004cda:	e0 11 ff 80 	andl	r1,0xff80
80004cde:	02 9b       	mov	r11,r1
80004ce0:	0a 9c       	mov	r12,r5
80004ce2:	e0 a0 02 2b 	rcall	80005138 <_sbrk_r>
80004ce6:	18 96       	mov	r6,r12
80004ce8:	5b fc       	cp.w	r12,-1
80004cea:	c6 d0       	breq	80004dc4 <_malloc_r+0x3dc>
80004cec:	e6 02 00 08 	add	r8,r3,r2
80004cf0:	10 3c       	cp.w	r12,r8
80004cf2:	c0 32       	brcc	80004cf8 <_malloc_r+0x310>
80004cf4:	08 33       	cp.w	r3,r4
80004cf6:	c6 71       	brne	80004dc4 <_malloc_r+0x3dc>
80004cf8:	4b da       	lddpc	r10,80004dec <_malloc_r+0x404>
80004cfa:	74 09       	ld.w	r9,r10[0x0]
80004cfc:	e2 09 00 09 	add	r9,r1,r9
80004d00:	95 09       	st.w	r10[0x0],r9
80004d02:	10 36       	cp.w	r6,r8
80004d04:	c0 a1       	brne	80004d18 <_malloc_r+0x330>
80004d06:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80004d0a:	c0 71       	brne	80004d18 <_malloc_r+0x330>
80004d0c:	e2 02 00 02 	add	r2,r1,r2
80004d10:	68 28       	ld.w	r8,r4[0x8]
80004d12:	a1 a2       	sbr	r2,0x0
80004d14:	91 12       	st.w	r8[0x4],r2
80004d16:	c4 b8       	rjmp	80004dac <_malloc_r+0x3c4>
80004d18:	4b 4a       	lddpc	r10,80004de8 <_malloc_r+0x400>
80004d1a:	74 0b       	ld.w	r11,r10[0x0]
80004d1c:	5b fb       	cp.w	r11,-1
80004d1e:	c0 31       	brne	80004d24 <_malloc_r+0x33c>
80004d20:	95 06       	st.w	r10[0x0],r6
80004d22:	c0 68       	rjmp	80004d2e <_malloc_r+0x346>
80004d24:	ec 09 00 09 	add	r9,r6,r9
80004d28:	4b 1a       	lddpc	r10,80004dec <_malloc_r+0x404>
80004d2a:	10 19       	sub	r9,r8
80004d2c:	95 09       	st.w	r10[0x0],r9
80004d2e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80004d32:	f0 09 11 08 	rsub	r9,r8,8
80004d36:	58 08       	cp.w	r8,0
80004d38:	f2 08 17 10 	movne	r8,r9
80004d3c:	ed d8 e1 06 	addne	r6,r6,r8
80004d40:	28 08       	sub	r8,-128
80004d42:	ec 01 00 01 	add	r1,r6,r1
80004d46:	0a 9c       	mov	r12,r5
80004d48:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80004d4c:	f0 01 01 01 	sub	r1,r8,r1
80004d50:	02 9b       	mov	r11,r1
80004d52:	cf 3d       	rcall	80005138 <_sbrk_r>
80004d54:	4a 68       	lddpc	r8,80004dec <_malloc_r+0x404>
80004d56:	5b fc       	cp.w	r12,-1
80004d58:	ec 0c 17 00 	moveq	r12,r6
80004d5c:	f9 b1 00 00 	moveq	r1,0
80004d60:	70 09       	ld.w	r9,r8[0x0]
80004d62:	0c 1c       	sub	r12,r6
80004d64:	89 26       	st.w	r4[0x8],r6
80004d66:	02 0c       	add	r12,r1
80004d68:	12 01       	add	r1,r9
80004d6a:	a1 ac       	sbr	r12,0x0
80004d6c:	91 01       	st.w	r8[0x0],r1
80004d6e:	8d 1c       	st.w	r6[0x4],r12
80004d70:	08 33       	cp.w	r3,r4
80004d72:	c1 d0       	breq	80004dac <_malloc_r+0x3c4>
80004d74:	58 f2       	cp.w	r2,15
80004d76:	e0 8b 00 05 	brhi	80004d80 <_malloc_r+0x398>
80004d7a:	30 18       	mov	r8,1
80004d7c:	8d 18       	st.w	r6[0x4],r8
80004d7e:	c2 38       	rjmp	80004dc4 <_malloc_r+0x3dc>
80004d80:	30 59       	mov	r9,5
80004d82:	20 c2       	sub	r2,12
80004d84:	e0 12 ff f8 	andl	r2,0xfff8
80004d88:	e6 02 00 08 	add	r8,r3,r2
80004d8c:	91 29       	st.w	r8[0x8],r9
80004d8e:	91 19       	st.w	r8[0x4],r9
80004d90:	66 18       	ld.w	r8,r3[0x4]
80004d92:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004d96:	e5 e8 10 08 	or	r8,r2,r8
80004d9a:	87 18       	st.w	r3[0x4],r8
80004d9c:	58 f2       	cp.w	r2,15
80004d9e:	e0 88 00 07 	brls	80004dac <_malloc_r+0x3c4>
80004da2:	e6 cb ff f8 	sub	r11,r3,-8
80004da6:	0a 9c       	mov	r12,r5
80004da8:	fe b0 fb da 	rcall	8000455c <_free_r>
80004dac:	49 19       	lddpc	r9,80004df0 <_malloc_r+0x408>
80004dae:	72 0a       	ld.w	r10,r9[0x0]
80004db0:	48 f8       	lddpc	r8,80004dec <_malloc_r+0x404>
80004db2:	70 08       	ld.w	r8,r8[0x0]
80004db4:	14 38       	cp.w	r8,r10
80004db6:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004dba:	48 f9       	lddpc	r9,80004df4 <_malloc_r+0x40c>
80004dbc:	72 0a       	ld.w	r10,r9[0x0]
80004dbe:	14 38       	cp.w	r8,r10
80004dc0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80004dc4:	68 28       	ld.w	r8,r4[0x8]
80004dc6:	70 18       	ld.w	r8,r8[0x4]
80004dc8:	e0 18 ff fc 	andl	r8,0xfffc
80004dcc:	0e 38       	cp.w	r8,r7
80004dce:	5f 39       	srlo	r9
80004dd0:	0e 18       	sub	r8,r7
80004dd2:	58 f8       	cp.w	r8,15
80004dd4:	5f aa       	srle	r10
80004dd6:	f5 e9 10 09 	or	r9,r10,r9
80004dda:	c0 f0       	breq	80004df8 <_malloc_r+0x410>
80004ddc:	0a 9c       	mov	r12,r5
80004dde:	c4 dc       	rcall	80004e78 <__malloc_unlock>
80004de0:	d8 3a       	popm	r0-r7,pc,r12=0
80004de2:	d7 03       	nop
80004de4:	00 00       	add	r0,r0
80004de6:	0c 68       	and	r8,r6
80004de8:	00 00       	add	r0,r0
80004dea:	05 d4       	ld.ub	r4,r2[0x5]
80004dec:	00 00       	add	r0,r0
80004dee:	0c 6c       	and	r12,r6
80004df0:	00 00       	add	r0,r0
80004df2:	0c 64       	and	r4,r6
80004df4:	00 00       	add	r0,r0
80004df6:	0c 60       	and	r0,r6
80004df8:	68 26       	ld.w	r6,r4[0x8]
80004dfa:	a1 a8       	sbr	r8,0x0
80004dfc:	0e 99       	mov	r9,r7
80004dfe:	a1 a9       	sbr	r9,0x0
80004e00:	8d 19       	st.w	r6[0x4],r9
80004e02:	ec 07 00 07 	add	r7,r6,r7
80004e06:	0a 9c       	mov	r12,r5
80004e08:	89 27       	st.w	r4[0x8],r7
80004e0a:	8f 18       	st.w	r7[0x4],r8
80004e0c:	c3 6c       	rcall	80004e78 <__malloc_unlock>
80004e0e:	ec cc ff f8 	sub	r12,r6,-8
80004e12:	d8 32       	popm	r0-r7,pc

80004e14 <memchr>:
80004e14:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80004e18:	c0 68       	rjmp	80004e24 <memchr+0x10>
80004e1a:	20 1a       	sub	r10,1
80004e1c:	19 88       	ld.ub	r8,r12[0x0]
80004e1e:	16 38       	cp.w	r8,r11
80004e20:	5e 0c       	reteq	r12
80004e22:	2f fc       	sub	r12,-1
80004e24:	58 0a       	cp.w	r10,0
80004e26:	cf a1       	brne	80004e1a <memchr+0x6>
80004e28:	5e fa       	retal	r10

80004e2a <memmove>:
80004e2a:	d4 01       	pushm	lr
80004e2c:	18 3b       	cp.w	r11,r12
80004e2e:	c1 92       	brcc	80004e60 <memmove+0x36>
80004e30:	f6 0a 00 09 	add	r9,r11,r10
80004e34:	12 3c       	cp.w	r12,r9
80004e36:	c1 52       	brcc	80004e60 <memmove+0x36>
80004e38:	f8 0a 00 0b 	add	r11,r12,r10
80004e3c:	30 08       	mov	r8,0
80004e3e:	c0 68       	rjmp	80004e4a <memmove+0x20>
80004e40:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80004e44:	20 1a       	sub	r10,1
80004e46:	f6 08 0b 0e 	st.b	r11[r8],lr
80004e4a:	20 18       	sub	r8,1
80004e4c:	58 0a       	cp.w	r10,0
80004e4e:	cf 91       	brne	80004e40 <memmove+0x16>
80004e50:	d8 02       	popm	pc
80004e52:	f6 08 07 09 	ld.ub	r9,r11[r8]
80004e56:	20 1a       	sub	r10,1
80004e58:	f8 08 0b 09 	st.b	r12[r8],r9
80004e5c:	2f f8       	sub	r8,-1
80004e5e:	c0 28       	rjmp	80004e62 <memmove+0x38>
80004e60:	30 08       	mov	r8,0
80004e62:	58 0a       	cp.w	r10,0
80004e64:	cf 71       	brne	80004e52 <memmove+0x28>
80004e66:	d8 02       	popm	pc

80004e68 <memset>:
80004e68:	18 98       	mov	r8,r12
80004e6a:	c0 38       	rjmp	80004e70 <memset+0x8>
80004e6c:	10 cb       	st.b	r8++,r11
80004e6e:	20 1a       	sub	r10,1
80004e70:	58 0a       	cp.w	r10,0
80004e72:	cf d1       	brne	80004e6c <memset+0x4>
80004e74:	5e fc       	retal	r12

80004e76 <__malloc_lock>:
80004e76:	5e fc       	retal	r12

80004e78 <__malloc_unlock>:
80004e78:	5e fc       	retal	r12
80004e7a:	d7 03       	nop

80004e7c <_realloc_r>:
80004e7c:	d4 31       	pushm	r0-r7,lr
80004e7e:	20 1d       	sub	sp,4
80004e80:	16 94       	mov	r4,r11
80004e82:	18 92       	mov	r2,r12
80004e84:	14 9b       	mov	r11,r10
80004e86:	58 04       	cp.w	r4,0
80004e88:	c0 51       	brne	80004e92 <_realloc_r+0x16>
80004e8a:	fe b0 fd af 	rcall	800049e8 <_malloc_r>
80004e8e:	18 95       	mov	r5,r12
80004e90:	c5 09       	rjmp	80005130 <_realloc_r+0x2b4>
80004e92:	50 0a       	stdsp	sp[0x0],r10
80004e94:	cf 1f       	rcall	80004e76 <__malloc_lock>
80004e96:	40 0b       	lddsp	r11,sp[0x0]
80004e98:	f6 c8 ff f5 	sub	r8,r11,-11
80004e9c:	e8 c1 00 08 	sub	r1,r4,8
80004ea0:	10 96       	mov	r6,r8
80004ea2:	62 1c       	ld.w	r12,r1[0x4]
80004ea4:	e0 16 ff f8 	andl	r6,0xfff8
80004ea8:	59 68       	cp.w	r8,22
80004eaa:	f9 b6 08 10 	movls	r6,16
80004eae:	16 36       	cp.w	r6,r11
80004eb0:	5f 38       	srlo	r8
80004eb2:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80004eb6:	c0 50       	breq	80004ec0 <_realloc_r+0x44>
80004eb8:	30 c8       	mov	r8,12
80004eba:	30 05       	mov	r5,0
80004ebc:	85 38       	st.w	r2[0xc],r8
80004ebe:	c3 99       	rjmp	80005130 <_realloc_r+0x2b4>
80004ec0:	18 90       	mov	r0,r12
80004ec2:	e0 10 ff fc 	andl	r0,0xfffc
80004ec6:	0c 30       	cp.w	r0,r6
80004ec8:	e0 84 01 0a 	brge	800050dc <_realloc_r+0x260>
80004ecc:	4c 98       	lddpc	r8,80004ff0 <_realloc_r+0x174>
80004ece:	e2 00 00 09 	add	r9,r1,r0
80004ed2:	70 25       	ld.w	r5,r8[0x8]
80004ed4:	0a 39       	cp.w	r9,r5
80004ed6:	c0 90       	breq	80004ee8 <_realloc_r+0x6c>
80004ed8:	72 1a       	ld.w	r10,r9[0x4]
80004eda:	a1 ca       	cbr	r10,0x0
80004edc:	f2 0a 00 0a 	add	r10,r9,r10
80004ee0:	74 1a       	ld.w	r10,r10[0x4]
80004ee2:	ed ba 00 00 	bld	r10,0x0
80004ee6:	c2 20       	breq	80004f2a <_realloc_r+0xae>
80004ee8:	72 1a       	ld.w	r10,r9[0x4]
80004eea:	e0 1a ff fc 	andl	r10,0xfffc
80004eee:	f4 00 00 03 	add	r3,r10,r0
80004ef2:	0a 39       	cp.w	r9,r5
80004ef4:	c1 31       	brne	80004f1a <_realloc_r+0x9e>
80004ef6:	ec c7 ff f0 	sub	r7,r6,-16
80004efa:	0e 33       	cp.w	r3,r7
80004efc:	c1 95       	brlt	80004f2e <_realloc_r+0xb2>
80004efe:	e2 06 00 09 	add	r9,r1,r6
80004f02:	0c 13       	sub	r3,r6
80004f04:	a1 a3       	sbr	r3,0x0
80004f06:	93 13       	st.w	r9[0x4],r3
80004f08:	91 29       	st.w	r8[0x8],r9
80004f0a:	04 9c       	mov	r12,r2
80004f0c:	62 18       	ld.w	r8,r1[0x4]
80004f0e:	08 95       	mov	r5,r4
80004f10:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004f14:	10 46       	or	r6,r8
80004f16:	83 16       	st.w	r1[0x4],r6
80004f18:	c0 b9       	rjmp	8000512e <_realloc_r+0x2b2>
80004f1a:	0c 33       	cp.w	r3,r6
80004f1c:	c0 95       	brlt	80004f2e <_realloc_r+0xb2>
80004f1e:	72 28       	ld.w	r8,r9[0x8]
80004f20:	02 97       	mov	r7,r1
80004f22:	72 39       	ld.w	r9,r9[0xc]
80004f24:	93 28       	st.w	r9[0x8],r8
80004f26:	91 39       	st.w	r8[0xc],r9
80004f28:	cd c8       	rjmp	800050e0 <_realloc_r+0x264>
80004f2a:	30 0a       	mov	r10,0
80004f2c:	14 99       	mov	r9,r10
80004f2e:	ed bc 00 00 	bld	r12,0x0
80004f32:	e0 80 00 96 	breq	8000505e <_realloc_r+0x1e2>
80004f36:	62 07       	ld.w	r7,r1[0x0]
80004f38:	e2 07 01 07 	sub	r7,r1,r7
80004f3c:	6e 1c       	ld.w	r12,r7[0x4]
80004f3e:	e0 1c ff fc 	andl	r12,0xfffc
80004f42:	58 09       	cp.w	r9,0
80004f44:	c5 80       	breq	80004ff4 <_realloc_r+0x178>
80004f46:	f8 00 00 03 	add	r3,r12,r0
80004f4a:	0a 39       	cp.w	r9,r5
80004f4c:	c4 71       	brne	80004fda <_realloc_r+0x15e>
80004f4e:	14 03       	add	r3,r10
80004f50:	ec c9 ff f0 	sub	r9,r6,-16
80004f54:	12 33       	cp.w	r3,r9
80004f56:	c4 f5       	brlt	80004ff4 <_realloc_r+0x178>
80004f58:	6e 3a       	ld.w	r10,r7[0xc]
80004f5a:	6e 29       	ld.w	r9,r7[0x8]
80004f5c:	95 29       	st.w	r10[0x8],r9
80004f5e:	93 3a       	st.w	r9[0xc],r10
80004f60:	ee c5 ff f8 	sub	r5,r7,-8
80004f64:	e0 ca 00 04 	sub	r10,r0,4
80004f68:	e0 4a 00 24 	cp.w	r10,36
80004f6c:	e0 8b 00 25 	brhi	80004fb6 <_realloc_r+0x13a>
80004f70:	0a 99       	mov	r9,r5
80004f72:	59 3a       	cp.w	r10,19
80004f74:	e0 88 00 1a 	brls	80004fa8 <_realloc_r+0x12c>
80004f78:	09 09       	ld.w	r9,r4++
80004f7a:	8b 09       	st.w	r5[0x0],r9
80004f7c:	09 09       	ld.w	r9,r4++
80004f7e:	8f 39       	st.w	r7[0xc],r9
80004f80:	ee c9 ff f0 	sub	r9,r7,-16
80004f84:	59 ba       	cp.w	r10,27
80004f86:	e0 88 00 11 	brls	80004fa8 <_realloc_r+0x12c>
80004f8a:	09 0b       	ld.w	r11,r4++
80004f8c:	93 0b       	st.w	r9[0x0],r11
80004f8e:	09 09       	ld.w	r9,r4++
80004f90:	8f 59       	st.w	r7[0x14],r9
80004f92:	ee c9 ff e8 	sub	r9,r7,-24
80004f96:	e0 4a 00 24 	cp.w	r10,36
80004f9a:	c0 71       	brne	80004fa8 <_realloc_r+0x12c>
80004f9c:	09 0a       	ld.w	r10,r4++
80004f9e:	93 0a       	st.w	r9[0x0],r10
80004fa0:	ee c9 ff e0 	sub	r9,r7,-32
80004fa4:	09 0a       	ld.w	r10,r4++
80004fa6:	8f 7a       	st.w	r7[0x1c],r10
80004fa8:	09 0a       	ld.w	r10,r4++
80004faa:	12 aa       	st.w	r9++,r10
80004fac:	68 0a       	ld.w	r10,r4[0x0]
80004fae:	93 0a       	st.w	r9[0x0],r10
80004fb0:	68 1a       	ld.w	r10,r4[0x4]
80004fb2:	93 1a       	st.w	r9[0x4],r10
80004fb4:	c0 68       	rjmp	80004fc0 <_realloc_r+0x144>
80004fb6:	50 08       	stdsp	sp[0x0],r8
80004fb8:	08 9b       	mov	r11,r4
80004fba:	0a 9c       	mov	r12,r5
80004fbc:	c3 7f       	rcall	80004e2a <memmove>
80004fbe:	40 08       	lddsp	r8,sp[0x0]
80004fc0:	ee 06 00 09 	add	r9,r7,r6
80004fc4:	0c 13       	sub	r3,r6
80004fc6:	a1 a3       	sbr	r3,0x0
80004fc8:	93 13       	st.w	r9[0x4],r3
80004fca:	91 29       	st.w	r8[0x8],r9
80004fcc:	04 9c       	mov	r12,r2
80004fce:	6e 18       	ld.w	r8,r7[0x4]
80004fd0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004fd4:	10 46       	or	r6,r8
80004fd6:	8f 16       	st.w	r7[0x4],r6
80004fd8:	ca b8       	rjmp	8000512e <_realloc_r+0x2b2>
80004fda:	14 03       	add	r3,r10
80004fdc:	0c 33       	cp.w	r3,r6
80004fde:	c0 b5       	brlt	80004ff4 <_realloc_r+0x178>
80004fe0:	72 28       	ld.w	r8,r9[0x8]
80004fe2:	72 39       	ld.w	r9,r9[0xc]
80004fe4:	93 28       	st.w	r9[0x8],r8
80004fe6:	91 39       	st.w	r8[0xc],r9
80004fe8:	6e 28       	ld.w	r8,r7[0x8]
80004fea:	6e 39       	ld.w	r9,r7[0xc]
80004fec:	c0 a8       	rjmp	80005000 <_realloc_r+0x184>
80004fee:	d7 03       	nop
80004ff0:	00 00       	add	r0,r0
80004ff2:	01 c8       	ld.ub	r8,r0[0x4]
80004ff4:	f8 00 00 03 	add	r3,r12,r0
80004ff8:	0c 33       	cp.w	r3,r6
80004ffa:	c3 25       	brlt	8000505e <_realloc_r+0x1e2>
80004ffc:	6e 39       	ld.w	r9,r7[0xc]
80004ffe:	6e 28       	ld.w	r8,r7[0x8]
80005000:	93 28       	st.w	r9[0x8],r8
80005002:	91 39       	st.w	r8[0xc],r9
80005004:	e0 ca 00 04 	sub	r10,r0,4
80005008:	ee cc ff f8 	sub	r12,r7,-8
8000500c:	e0 4a 00 24 	cp.w	r10,36
80005010:	e0 8b 00 24 	brhi	80005058 <_realloc_r+0x1dc>
80005014:	59 3a       	cp.w	r10,19
80005016:	e0 88 00 1a 	brls	8000504a <_realloc_r+0x1ce>
8000501a:	09 08       	ld.w	r8,r4++
8000501c:	99 08       	st.w	r12[0x0],r8
8000501e:	09 08       	ld.w	r8,r4++
80005020:	8f 38       	st.w	r7[0xc],r8
80005022:	ee cc ff f0 	sub	r12,r7,-16
80005026:	59 ba       	cp.w	r10,27
80005028:	e0 88 00 11 	brls	8000504a <_realloc_r+0x1ce>
8000502c:	09 08       	ld.w	r8,r4++
8000502e:	99 08       	st.w	r12[0x0],r8
80005030:	09 08       	ld.w	r8,r4++
80005032:	8f 58       	st.w	r7[0x14],r8
80005034:	ee cc ff e8 	sub	r12,r7,-24
80005038:	e0 4a 00 24 	cp.w	r10,36
8000503c:	c0 71       	brne	8000504a <_realloc_r+0x1ce>
8000503e:	09 08       	ld.w	r8,r4++
80005040:	99 08       	st.w	r12[0x0],r8
80005042:	ee cc ff e0 	sub	r12,r7,-32
80005046:	09 08       	ld.w	r8,r4++
80005048:	8f 78       	st.w	r7[0x1c],r8
8000504a:	09 08       	ld.w	r8,r4++
8000504c:	18 a8       	st.w	r12++,r8
8000504e:	68 08       	ld.w	r8,r4[0x0]
80005050:	99 08       	st.w	r12[0x0],r8
80005052:	68 18       	ld.w	r8,r4[0x4]
80005054:	99 18       	st.w	r12[0x4],r8
80005056:	c4 58       	rjmp	800050e0 <_realloc_r+0x264>
80005058:	08 9b       	mov	r11,r4
8000505a:	ce 8e       	rcall	80004e2a <memmove>
8000505c:	c4 28       	rjmp	800050e0 <_realloc_r+0x264>
8000505e:	04 9c       	mov	r12,r2
80005060:	fe b0 fc c4 	rcall	800049e8 <_malloc_r>
80005064:	18 95       	mov	r5,r12
80005066:	c3 90       	breq	800050d8 <_realloc_r+0x25c>
80005068:	62 18       	ld.w	r8,r1[0x4]
8000506a:	f8 c9 00 08 	sub	r9,r12,8
8000506e:	a1 c8       	cbr	r8,0x0
80005070:	e2 08 00 08 	add	r8,r1,r8
80005074:	10 39       	cp.w	r9,r8
80005076:	c0 71       	brne	80005084 <_realloc_r+0x208>
80005078:	72 13       	ld.w	r3,r9[0x4]
8000507a:	02 97       	mov	r7,r1
8000507c:	e0 13 ff fc 	andl	r3,0xfffc
80005080:	00 03       	add	r3,r0
80005082:	c2 f8       	rjmp	800050e0 <_realloc_r+0x264>
80005084:	e0 ca 00 04 	sub	r10,r0,4
80005088:	e0 4a 00 24 	cp.w	r10,36
8000508c:	e0 8b 00 20 	brhi	800050cc <_realloc_r+0x250>
80005090:	08 99       	mov	r9,r4
80005092:	18 98       	mov	r8,r12
80005094:	59 3a       	cp.w	r10,19
80005096:	e0 88 00 14 	brls	800050be <_realloc_r+0x242>
8000509a:	13 0b       	ld.w	r11,r9++
8000509c:	10 ab       	st.w	r8++,r11
8000509e:	13 0b       	ld.w	r11,r9++
800050a0:	10 ab       	st.w	r8++,r11
800050a2:	59 ba       	cp.w	r10,27
800050a4:	e0 88 00 0d 	brls	800050be <_realloc_r+0x242>
800050a8:	13 0b       	ld.w	r11,r9++
800050aa:	10 ab       	st.w	r8++,r11
800050ac:	13 0b       	ld.w	r11,r9++
800050ae:	10 ab       	st.w	r8++,r11
800050b0:	e0 4a 00 24 	cp.w	r10,36
800050b4:	c0 51       	brne	800050be <_realloc_r+0x242>
800050b6:	13 0a       	ld.w	r10,r9++
800050b8:	10 aa       	st.w	r8++,r10
800050ba:	13 0a       	ld.w	r10,r9++
800050bc:	10 aa       	st.w	r8++,r10
800050be:	13 0a       	ld.w	r10,r9++
800050c0:	10 aa       	st.w	r8++,r10
800050c2:	72 0a       	ld.w	r10,r9[0x0]
800050c4:	91 0a       	st.w	r8[0x0],r10
800050c6:	72 19       	ld.w	r9,r9[0x4]
800050c8:	91 19       	st.w	r8[0x4],r9
800050ca:	c0 38       	rjmp	800050d0 <_realloc_r+0x254>
800050cc:	08 9b       	mov	r11,r4
800050ce:	ca ee       	rcall	80004e2a <memmove>
800050d0:	08 9b       	mov	r11,r4
800050d2:	04 9c       	mov	r12,r2
800050d4:	fe b0 fa 44 	rcall	8000455c <_free_r>
800050d8:	04 9c       	mov	r12,r2
800050da:	c2 a8       	rjmp	8000512e <_realloc_r+0x2b2>
800050dc:	00 93       	mov	r3,r0
800050de:	02 97       	mov	r7,r1
800050e0:	e6 06 01 09 	sub	r9,r3,r6
800050e4:	6e 18       	ld.w	r8,r7[0x4]
800050e6:	58 f9       	cp.w	r9,15
800050e8:	e0 88 00 16 	brls	80005114 <_realloc_r+0x298>
800050ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800050f0:	ed e8 10 08 	or	r8,r6,r8
800050f4:	8f 18       	st.w	r7[0x4],r8
800050f6:	12 98       	mov	r8,r9
800050f8:	a1 a8       	sbr	r8,0x0
800050fa:	ee 06 00 0b 	add	r11,r7,r6
800050fe:	f6 09 00 09 	add	r9,r11,r9
80005102:	97 18       	st.w	r11[0x4],r8
80005104:	72 18       	ld.w	r8,r9[0x4]
80005106:	a1 a8       	sbr	r8,0x0
80005108:	2f 8b       	sub	r11,-8
8000510a:	93 18       	st.w	r9[0x4],r8
8000510c:	04 9c       	mov	r12,r2
8000510e:	fe b0 fa 27 	rcall	8000455c <_free_r>
80005112:	c0 b8       	rjmp	80005128 <_realloc_r+0x2ac>
80005114:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005118:	e7 e8 10 08 	or	r8,r3,r8
8000511c:	8f 18       	st.w	r7[0x4],r8
8000511e:	ee 03 00 03 	add	r3,r7,r3
80005122:	66 18       	ld.w	r8,r3[0x4]
80005124:	a1 a8       	sbr	r8,0x0
80005126:	87 18       	st.w	r3[0x4],r8
80005128:	04 9c       	mov	r12,r2
8000512a:	ee c5 ff f8 	sub	r5,r7,-8
8000512e:	ca 5e       	rcall	80004e78 <__malloc_unlock>
80005130:	0a 9c       	mov	r12,r5
80005132:	2f fd       	sub	sp,-4
80005134:	d8 32       	popm	r0-r7,pc
80005136:	d7 03       	nop

80005138 <_sbrk_r>:
80005138:	d4 21       	pushm	r4-r7,lr
8000513a:	30 08       	mov	r8,0
8000513c:	18 97       	mov	r7,r12
8000513e:	48 66       	lddpc	r6,80005154 <_sbrk_r+0x1c>
80005140:	16 9c       	mov	r12,r11
80005142:	8d 08       	st.w	r6[0x0],r8
80005144:	c9 8c       	rcall	80005274 <_sbrk>
80005146:	5b fc       	cp.w	r12,-1
80005148:	c0 51       	brne	80005152 <_sbrk_r+0x1a>
8000514a:	6c 08       	ld.w	r8,r6[0x0]
8000514c:	58 08       	cp.w	r8,0
8000514e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80005152:	d8 22       	popm	r4-r7,pc
80005154:	00 00       	add	r0,r0
80005156:	0c c4       	st.b	r6++,r4

80005158 <__sclose>:
80005158:	d4 01       	pushm	lr
8000515a:	96 7b       	ld.sh	r11,r11[0xe]
8000515c:	c2 cd       	rcall	800053b4 <_close_r>
8000515e:	d8 02       	popm	pc

80005160 <__sseek>:
80005160:	d4 21       	pushm	r4-r7,lr
80005162:	16 97       	mov	r7,r11
80005164:	96 7b       	ld.sh	r11,r11[0xe]
80005166:	ca 3d       	rcall	800054ac <_lseek_r>
80005168:	8e 68       	ld.sh	r8,r7[0xc]
8000516a:	10 99       	mov	r9,r8
8000516c:	ad c8       	cbr	r8,0xc
8000516e:	ad a9       	sbr	r9,0xc
80005170:	5b fc       	cp.w	r12,-1
80005172:	ef f8 0c 06 	st.heq	r7[0xc],r8
80005176:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000517a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000517e:	d8 22       	popm	r4-r7,pc

80005180 <__swrite>:
80005180:	d4 21       	pushm	r4-r7,lr
80005182:	96 68       	ld.sh	r8,r11[0xc]
80005184:	16 97       	mov	r7,r11
80005186:	14 95       	mov	r5,r10
80005188:	12 94       	mov	r4,r9
8000518a:	e2 18 01 00 	andl	r8,0x100,COH
8000518e:	18 96       	mov	r6,r12
80005190:	c0 50       	breq	8000519a <__swrite+0x1a>
80005192:	30 29       	mov	r9,2
80005194:	30 0a       	mov	r10,0
80005196:	96 7b       	ld.sh	r11,r11[0xe]
80005198:	c8 ad       	rcall	800054ac <_lseek_r>
8000519a:	8e 68       	ld.sh	r8,r7[0xc]
8000519c:	ad c8       	cbr	r8,0xc
8000519e:	08 99       	mov	r9,r4
800051a0:	0a 9a       	mov	r10,r5
800051a2:	8e 7b       	ld.sh	r11,r7[0xe]
800051a4:	0c 9c       	mov	r12,r6
800051a6:	ae 68       	st.h	r7[0xc],r8
800051a8:	c8 4c       	rcall	800052b0 <_write_r>
800051aa:	d8 22       	popm	r4-r7,pc

800051ac <__sread>:
800051ac:	d4 21       	pushm	r4-r7,lr
800051ae:	16 97       	mov	r7,r11
800051b0:	96 7b       	ld.sh	r11,r11[0xe]
800051b2:	ce dd       	rcall	8000558c <_read_r>
800051b4:	c0 65       	brlt	800051c0 <__sread+0x14>
800051b6:	6f 58       	ld.w	r8,r7[0x54]
800051b8:	18 08       	add	r8,r12
800051ba:	ef 48 00 54 	st.w	r7[84],r8
800051be:	d8 22       	popm	r4-r7,pc
800051c0:	8e 68       	ld.sh	r8,r7[0xc]
800051c2:	ad c8       	cbr	r8,0xc
800051c4:	ae 68       	st.h	r7[0xc],r8
800051c6:	d8 22       	popm	r4-r7,pc

800051c8 <_close>:
800051c8:	30 28       	mov	r8,2
800051ca:	d6 73       	breakpoint
800051cc:	3f fc       	mov	r12,-1
800051ce:	35 8b       	mov	r11,88
800051d0:	58 0c       	cp.w	r12,0
800051d2:	5e 4c       	retge	r12
800051d4:	48 2a       	lddpc	r10,800051dc <_close+0x14>
800051d6:	95 0b       	st.w	r10[0x0],r11
800051d8:	5e fc       	retal	r12
800051da:	d7 03       	nop
800051dc:	00 00       	add	r0,r0
800051de:	0c c4       	st.b	r6++,r4

800051e0 <_lseek>:
800051e0:	30 58       	mov	r8,5
800051e2:	d6 73       	breakpoint
800051e4:	3f fc       	mov	r12,-1
800051e6:	35 8b       	mov	r11,88
800051e8:	58 0c       	cp.w	r12,0
800051ea:	5e 4c       	retge	r12
800051ec:	48 2a       	lddpc	r10,800051f4 <_lseek+0x14>
800051ee:	95 0b       	st.w	r10[0x0],r11
800051f0:	5e fc       	retal	r12
800051f2:	d7 03       	nop
800051f4:	00 00       	add	r0,r0
800051f6:	0c c4       	st.b	r6++,r4

800051f8 <isatty>:
800051f8:	30 b8       	mov	r8,11
800051fa:	d6 73       	breakpoint
800051fc:	3f fc       	mov	r12,-1
800051fe:	35 8b       	mov	r11,88
80005200:	58 0c       	cp.w	r12,0
80005202:	5e 4c       	retge	r12
80005204:	48 2a       	lddpc	r10,8000520c <isatty+0x14>
80005206:	95 0b       	st.w	r10[0x0],r11
80005208:	5e fc       	retal	r12
8000520a:	d7 03       	nop
8000520c:	00 00       	add	r0,r0
8000520e:	0c c4       	st.b	r6++,r4

80005210 <_fstat_host>:
80005210:	30 98       	mov	r8,9
80005212:	d6 73       	breakpoint
80005214:	3f fc       	mov	r12,-1
80005216:	35 8b       	mov	r11,88
80005218:	58 0c       	cp.w	r12,0
8000521a:	5e 4c       	retge	r12
8000521c:	48 2a       	lddpc	r10,80005224 <_fstat_host+0x14>
8000521e:	95 0b       	st.w	r10[0x0],r11
80005220:	5e fc       	retal	r12
80005222:	d7 03       	nop
80005224:	00 00       	add	r0,r0
80005226:	0c c4       	st.b	r6++,r4

80005228 <_fstat>:
80005228:	d4 21       	pushm	r4-r7,lr
8000522a:	21 0d       	sub	sp,64
8000522c:	16 97       	mov	r7,r11
8000522e:	1a 9b       	mov	r11,sp
80005230:	cf 0f       	rcall	80005210 <_fstat_host>
80005232:	c0 34       	brge	80005238 <_fstat+0x10>
80005234:	3f fc       	mov	r12,-1
80005236:	c1 c8       	rjmp	8000526e <_fstat+0x46>
80005238:	40 08       	lddsp	r8,sp[0x0]
8000523a:	ae 08       	st.h	r7[0x0],r8
8000523c:	40 18       	lddsp	r8,sp[0x4]
8000523e:	ae 18       	st.h	r7[0x2],r8
80005240:	40 28       	lddsp	r8,sp[0x8]
80005242:	8f 18       	st.w	r7[0x4],r8
80005244:	40 38       	lddsp	r8,sp[0xc]
80005246:	ae 48       	st.h	r7[0x8],r8
80005248:	40 48       	lddsp	r8,sp[0x10]
8000524a:	ae 58       	st.h	r7[0xa],r8
8000524c:	40 58       	lddsp	r8,sp[0x14]
8000524e:	ae 68       	st.h	r7[0xc],r8
80005250:	40 68       	lddsp	r8,sp[0x18]
80005252:	ae 78       	st.h	r7[0xe],r8
80005254:	40 88       	lddsp	r8,sp[0x20]
80005256:	8f 48       	st.w	r7[0x10],r8
80005258:	40 a8       	lddsp	r8,sp[0x28]
8000525a:	8f b8       	st.w	r7[0x2c],r8
8000525c:	40 c8       	lddsp	r8,sp[0x30]
8000525e:	8f c8       	st.w	r7[0x30],r8
80005260:	40 d8       	lddsp	r8,sp[0x34]
80005262:	8f 58       	st.w	r7[0x14],r8
80005264:	40 e8       	lddsp	r8,sp[0x38]
80005266:	30 0c       	mov	r12,0
80005268:	8f 78       	st.w	r7[0x1c],r8
8000526a:	40 f8       	lddsp	r8,sp[0x3c]
8000526c:	8f 98       	st.w	r7[0x24],r8
8000526e:	2f 0d       	sub	sp,-64
80005270:	d8 22       	popm	r4-r7,pc
80005272:	d7 03       	nop

80005274 <_sbrk>:
80005274:	d4 01       	pushm	lr
80005276:	48 c8       	lddpc	r8,800052a4 <_sbrk+0x30>
80005278:	70 09       	ld.w	r9,r8[0x0]
8000527a:	58 09       	cp.w	r9,0
8000527c:	c0 31       	brne	80005282 <_sbrk+0xe>
8000527e:	48 b9       	lddpc	r9,800052a8 <_sbrk+0x34>
80005280:	91 09       	st.w	r8[0x0],r9
80005282:	48 99       	lddpc	r9,800052a4 <_sbrk+0x30>
80005284:	48 aa       	lddpc	r10,800052ac <_sbrk+0x38>
80005286:	72 08       	ld.w	r8,r9[0x0]
80005288:	f0 0c 00 0c 	add	r12,r8,r12
8000528c:	14 3c       	cp.w	r12,r10
8000528e:	e0 8b 00 04 	brhi	80005296 <_sbrk+0x22>
80005292:	93 0c       	st.w	r9[0x0],r12
80005294:	c0 58       	rjmp	8000529e <_sbrk+0x2a>
80005296:	c9 fc       	rcall	800053d4 <__errno>
80005298:	30 c8       	mov	r8,12
8000529a:	99 08       	st.w	r12[0x0],r8
8000529c:	3f f8       	mov	r8,-1
8000529e:	10 9c       	mov	r12,r8
800052a0:	d8 02       	popm	pc
800052a2:	d7 03       	nop
800052a4:	00 00       	add	r0,r0
800052a6:	0c 94       	mov	r4,r6
800052a8:	00 00       	add	r0,r0
800052aa:	0c c8       	st.b	r6++,r8
800052ac:	00 00       	add	r0,r0
800052ae:	f0 00       	*unknown*

800052b0 <_write_r>:
800052b0:	d4 21       	pushm	r4-r7,lr
800052b2:	16 98       	mov	r8,r11
800052b4:	18 97       	mov	r7,r12
800052b6:	10 9c       	mov	r12,r8
800052b8:	30 08       	mov	r8,0
800052ba:	14 9b       	mov	r11,r10
800052bc:	48 66       	lddpc	r6,800052d4 <_write_r+0x24>
800052be:	12 9a       	mov	r10,r9
800052c0:	8d 08       	st.w	r6[0x0],r8
800052c2:	fe b0 f4 3d 	rcall	80003b3c <_write>
800052c6:	5b fc       	cp.w	r12,-1
800052c8:	c0 51       	brne	800052d2 <_write_r+0x22>
800052ca:	6c 08       	ld.w	r8,r6[0x0]
800052cc:	58 08       	cp.w	r8,0
800052ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800052d2:	d8 22       	popm	r4-r7,pc
800052d4:	00 00       	add	r0,r0
800052d6:	0c c4       	st.b	r6++,r4

800052d8 <__swsetup_r>:
800052d8:	d4 21       	pushm	r4-r7,lr
800052da:	4b 38       	lddpc	r8,800053a4 <__swsetup_r+0xcc>
800052dc:	18 96       	mov	r6,r12
800052de:	16 97       	mov	r7,r11
800052e0:	70 0c       	ld.w	r12,r8[0x0]
800052e2:	58 0c       	cp.w	r12,0
800052e4:	c0 60       	breq	800052f0 <__swsetup_r+0x18>
800052e6:	78 68       	ld.w	r8,r12[0x18]
800052e8:	58 08       	cp.w	r8,0
800052ea:	c0 31       	brne	800052f0 <__swsetup_r+0x18>
800052ec:	fe b0 f8 9c 	rcall	80004424 <__sinit>
800052f0:	4a e8       	lddpc	r8,800053a8 <__swsetup_r+0xd0>
800052f2:	10 37       	cp.w	r7,r8
800052f4:	c0 51       	brne	800052fe <__swsetup_r+0x26>
800052f6:	4a c8       	lddpc	r8,800053a4 <__swsetup_r+0xcc>
800052f8:	70 08       	ld.w	r8,r8[0x0]
800052fa:	70 07       	ld.w	r7,r8[0x0]
800052fc:	c0 e8       	rjmp	80005318 <__swsetup_r+0x40>
800052fe:	4a c8       	lddpc	r8,800053ac <__swsetup_r+0xd4>
80005300:	10 37       	cp.w	r7,r8
80005302:	c0 51       	brne	8000530c <__swsetup_r+0x34>
80005304:	4a 88       	lddpc	r8,800053a4 <__swsetup_r+0xcc>
80005306:	70 08       	ld.w	r8,r8[0x0]
80005308:	70 17       	ld.w	r7,r8[0x4]
8000530a:	c0 78       	rjmp	80005318 <__swsetup_r+0x40>
8000530c:	4a 98       	lddpc	r8,800053b0 <__swsetup_r+0xd8>
8000530e:	10 37       	cp.w	r7,r8
80005310:	c0 41       	brne	80005318 <__swsetup_r+0x40>
80005312:	4a 58       	lddpc	r8,800053a4 <__swsetup_r+0xcc>
80005314:	70 08       	ld.w	r8,r8[0x0]
80005316:	70 27       	ld.w	r7,r8[0x8]
80005318:	8e 68       	ld.sh	r8,r7[0xc]
8000531a:	ed b8 00 03 	bld	r8,0x3
8000531e:	c1 e0       	breq	8000535a <__swsetup_r+0x82>
80005320:	ed b8 00 04 	bld	r8,0x4
80005324:	c3 d1       	brne	8000539e <__swsetup_r+0xc6>
80005326:	ed b8 00 02 	bld	r8,0x2
8000532a:	c1 51       	brne	80005354 <__swsetup_r+0x7c>
8000532c:	6e db       	ld.w	r11,r7[0x34]
8000532e:	58 0b       	cp.w	r11,0
80005330:	c0 a0       	breq	80005344 <__swsetup_r+0x6c>
80005332:	ee c8 ff bc 	sub	r8,r7,-68
80005336:	10 3b       	cp.w	r11,r8
80005338:	c0 40       	breq	80005340 <__swsetup_r+0x68>
8000533a:	0c 9c       	mov	r12,r6
8000533c:	fe b0 f9 10 	rcall	8000455c <_free_r>
80005340:	30 08       	mov	r8,0
80005342:	8f d8       	st.w	r7[0x34],r8
80005344:	8e 68       	ld.sh	r8,r7[0xc]
80005346:	e0 18 ff db 	andl	r8,0xffdb
8000534a:	ae 68       	st.h	r7[0xc],r8
8000534c:	30 08       	mov	r8,0
8000534e:	8f 18       	st.w	r7[0x4],r8
80005350:	6e 48       	ld.w	r8,r7[0x10]
80005352:	8f 08       	st.w	r7[0x0],r8
80005354:	8e 68       	ld.sh	r8,r7[0xc]
80005356:	a3 b8       	sbr	r8,0x3
80005358:	ae 68       	st.h	r7[0xc],r8
8000535a:	6e 48       	ld.w	r8,r7[0x10]
8000535c:	58 08       	cp.w	r8,0
8000535e:	c0 a1       	brne	80005372 <__swsetup_r+0x9a>
80005360:	8e 68       	ld.sh	r8,r7[0xc]
80005362:	e2 18 02 80 	andl	r8,0x280,COH
80005366:	e0 48 02 00 	cp.w	r8,512
8000536a:	c0 40       	breq	80005372 <__swsetup_r+0x9a>
8000536c:	0c 9c       	mov	r12,r6
8000536e:	0e 9b       	mov	r11,r7
80005370:	cb 2c       	rcall	800054d4 <__smakebuf_r>
80005372:	8e 69       	ld.sh	r9,r7[0xc]
80005374:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005378:	c0 70       	breq	80005386 <__swsetup_r+0xae>
8000537a:	30 08       	mov	r8,0
8000537c:	8f 28       	st.w	r7[0x8],r8
8000537e:	6e 58       	ld.w	r8,r7[0x14]
80005380:	5c 38       	neg	r8
80005382:	8f 68       	st.w	r7[0x18],r8
80005384:	c0 68       	rjmp	80005390 <__swsetup_r+0xb8>
80005386:	ed b9 00 01 	bld	r9,0x1
8000538a:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000538e:	8f 28       	st.w	r7[0x8],r8
80005390:	6e 48       	ld.w	r8,r7[0x10]
80005392:	58 08       	cp.w	r8,0
80005394:	c0 61       	brne	800053a0 <__swsetup_r+0xc8>
80005396:	8e 68       	ld.sh	r8,r7[0xc]
80005398:	ed b8 00 07 	bld	r8,0x7
8000539c:	c0 21       	brne	800053a0 <__swsetup_r+0xc8>
8000539e:	dc 2a       	popm	r4-r7,pc,r12=-1
800053a0:	d8 2a       	popm	r4-r7,pc,r12=0
800053a2:	d7 03       	nop
800053a4:	00 00       	add	r0,r0
800053a6:	01 c4       	ld.ub	r4,r0[0x4]
800053a8:	80 00       	ld.sh	r0,r0[0x0]
800053aa:	59 04       	cp.w	r4,16
800053ac:	80 00       	ld.sh	r0,r0[0x0]
800053ae:	59 24       	cp.w	r4,18
800053b0:	80 00       	ld.sh	r0,r0[0x0]
800053b2:	59 44       	cp.w	r4,20

800053b4 <_close_r>:
800053b4:	d4 21       	pushm	r4-r7,lr
800053b6:	30 08       	mov	r8,0
800053b8:	18 97       	mov	r7,r12
800053ba:	48 66       	lddpc	r6,800053d0 <_close_r+0x1c>
800053bc:	16 9c       	mov	r12,r11
800053be:	8d 08       	st.w	r6[0x0],r8
800053c0:	c0 4f       	rcall	800051c8 <_close>
800053c2:	5b fc       	cp.w	r12,-1
800053c4:	c0 51       	brne	800053ce <_close_r+0x1a>
800053c6:	6c 08       	ld.w	r8,r6[0x0]
800053c8:	58 08       	cp.w	r8,0
800053ca:	ef f8 1a 03 	st.wne	r7[0xc],r8
800053ce:	d8 22       	popm	r4-r7,pc
800053d0:	00 00       	add	r0,r0
800053d2:	0c c4       	st.b	r6++,r4

800053d4 <__errno>:
800053d4:	48 28       	lddpc	r8,800053dc <__errno+0x8>
800053d6:	70 0c       	ld.w	r12,r8[0x0]
800053d8:	2f 4c       	sub	r12,-12
800053da:	5e fc       	retal	r12
800053dc:	00 00       	add	r0,r0
800053de:	01 c4       	ld.ub	r4,r0[0x4]

800053e0 <_fclose_r>:
800053e0:	d4 21       	pushm	r4-r7,lr
800053e2:	18 96       	mov	r6,r12
800053e4:	16 97       	mov	r7,r11
800053e6:	58 0b       	cp.w	r11,0
800053e8:	c0 31       	brne	800053ee <_fclose_r+0xe>
800053ea:	16 95       	mov	r5,r11
800053ec:	c5 08       	rjmp	8000548c <_fclose_r+0xac>
800053ee:	fe b0 f7 c7 	rcall	8000437c <__sfp_lock_acquire>
800053f2:	58 06       	cp.w	r6,0
800053f4:	c0 70       	breq	80005402 <_fclose_r+0x22>
800053f6:	6c 68       	ld.w	r8,r6[0x18]
800053f8:	58 08       	cp.w	r8,0
800053fa:	c0 41       	brne	80005402 <_fclose_r+0x22>
800053fc:	0c 9c       	mov	r12,r6
800053fe:	fe b0 f8 13 	rcall	80004424 <__sinit>
80005402:	4a 48       	lddpc	r8,80005490 <_fclose_r+0xb0>
80005404:	10 37       	cp.w	r7,r8
80005406:	c0 31       	brne	8000540c <_fclose_r+0x2c>
80005408:	6c 07       	ld.w	r7,r6[0x0]
8000540a:	c0 a8       	rjmp	8000541e <_fclose_r+0x3e>
8000540c:	4a 28       	lddpc	r8,80005494 <_fclose_r+0xb4>
8000540e:	10 37       	cp.w	r7,r8
80005410:	c0 31       	brne	80005416 <_fclose_r+0x36>
80005412:	6c 17       	ld.w	r7,r6[0x4]
80005414:	c0 58       	rjmp	8000541e <_fclose_r+0x3e>
80005416:	4a 18       	lddpc	r8,80005498 <_fclose_r+0xb8>
80005418:	10 37       	cp.w	r7,r8
8000541a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000541e:	8e 69       	ld.sh	r9,r7[0xc]
80005420:	30 08       	mov	r8,0
80005422:	f0 09 19 00 	cp.h	r9,r8
80005426:	c0 51       	brne	80005430 <_fclose_r+0x50>
80005428:	fe b0 f7 ab 	rcall	8000437e <__sfp_lock_release>
8000542c:	30 05       	mov	r5,0
8000542e:	c2 f8       	rjmp	8000548c <_fclose_r+0xac>
80005430:	0e 9b       	mov	r11,r7
80005432:	0c 9c       	mov	r12,r6
80005434:	fe b0 f7 1c 	rcall	8000426c <_fflush_r>
80005438:	6e c8       	ld.w	r8,r7[0x30]
8000543a:	18 95       	mov	r5,r12
8000543c:	58 08       	cp.w	r8,0
8000543e:	c0 60       	breq	8000544a <_fclose_r+0x6a>
80005440:	6e 8b       	ld.w	r11,r7[0x20]
80005442:	0c 9c       	mov	r12,r6
80005444:	5d 18       	icall	r8
80005446:	f9 b5 05 ff 	movlt	r5,-1
8000544a:	8e 68       	ld.sh	r8,r7[0xc]
8000544c:	ed b8 00 07 	bld	r8,0x7
80005450:	c0 51       	brne	8000545a <_fclose_r+0x7a>
80005452:	6e 4b       	ld.w	r11,r7[0x10]
80005454:	0c 9c       	mov	r12,r6
80005456:	fe b0 f8 83 	rcall	8000455c <_free_r>
8000545a:	6e db       	ld.w	r11,r7[0x34]
8000545c:	58 0b       	cp.w	r11,0
8000545e:	c0 a0       	breq	80005472 <_fclose_r+0x92>
80005460:	ee c8 ff bc 	sub	r8,r7,-68
80005464:	10 3b       	cp.w	r11,r8
80005466:	c0 40       	breq	8000546e <_fclose_r+0x8e>
80005468:	0c 9c       	mov	r12,r6
8000546a:	fe b0 f8 79 	rcall	8000455c <_free_r>
8000546e:	30 08       	mov	r8,0
80005470:	8f d8       	st.w	r7[0x34],r8
80005472:	6f 2b       	ld.w	r11,r7[0x48]
80005474:	58 0b       	cp.w	r11,0
80005476:	c0 70       	breq	80005484 <_fclose_r+0xa4>
80005478:	0c 9c       	mov	r12,r6
8000547a:	fe b0 f8 71 	rcall	8000455c <_free_r>
8000547e:	30 08       	mov	r8,0
80005480:	ef 48 00 48 	st.w	r7[72],r8
80005484:	30 08       	mov	r8,0
80005486:	ae 68       	st.h	r7[0xc],r8
80005488:	fe b0 f7 7b 	rcall	8000437e <__sfp_lock_release>
8000548c:	0a 9c       	mov	r12,r5
8000548e:	d8 22       	popm	r4-r7,pc
80005490:	80 00       	ld.sh	r0,r0[0x0]
80005492:	59 04       	cp.w	r4,16
80005494:	80 00       	ld.sh	r0,r0[0x0]
80005496:	59 24       	cp.w	r4,18
80005498:	80 00       	ld.sh	r0,r0[0x0]
8000549a:	59 44       	cp.w	r4,20

8000549c <fclose>:
8000549c:	d4 01       	pushm	lr
8000549e:	48 38       	lddpc	r8,800054a8 <fclose+0xc>
800054a0:	18 9b       	mov	r11,r12
800054a2:	70 0c       	ld.w	r12,r8[0x0]
800054a4:	c9 ef       	rcall	800053e0 <_fclose_r>
800054a6:	d8 02       	popm	pc
800054a8:	00 00       	add	r0,r0
800054aa:	01 c4       	ld.ub	r4,r0[0x4]

800054ac <_lseek_r>:
800054ac:	d4 21       	pushm	r4-r7,lr
800054ae:	16 98       	mov	r8,r11
800054b0:	18 97       	mov	r7,r12
800054b2:	10 9c       	mov	r12,r8
800054b4:	30 08       	mov	r8,0
800054b6:	14 9b       	mov	r11,r10
800054b8:	48 66       	lddpc	r6,800054d0 <_lseek_r+0x24>
800054ba:	12 9a       	mov	r10,r9
800054bc:	8d 08       	st.w	r6[0x0],r8
800054be:	c9 1e       	rcall	800051e0 <_lseek>
800054c0:	5b fc       	cp.w	r12,-1
800054c2:	c0 51       	brne	800054cc <_lseek_r+0x20>
800054c4:	6c 08       	ld.w	r8,r6[0x0]
800054c6:	58 08       	cp.w	r8,0
800054c8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800054cc:	d8 22       	popm	r4-r7,pc
800054ce:	d7 03       	nop
800054d0:	00 00       	add	r0,r0
800054d2:	0c c4       	st.b	r6++,r4

800054d4 <__smakebuf_r>:
800054d4:	d4 21       	pushm	r4-r7,lr
800054d6:	20 fd       	sub	sp,60
800054d8:	96 68       	ld.sh	r8,r11[0xc]
800054da:	16 97       	mov	r7,r11
800054dc:	18 96       	mov	r6,r12
800054de:	e2 18 00 02 	andl	r8,0x2,COH
800054e2:	c3 c1       	brne	8000555a <__smakebuf_r+0x86>
800054e4:	96 7b       	ld.sh	r11,r11[0xe]
800054e6:	f0 0b 19 00 	cp.h	r11,r8
800054ea:	c0 45       	brlt	800054f2 <__smakebuf_r+0x1e>
800054ec:	1a 9a       	mov	r10,sp
800054ee:	c6 3c       	rcall	800055b4 <_fstat_r>
800054f0:	c0 f4       	brge	8000550e <__smakebuf_r+0x3a>
800054f2:	8e 65       	ld.sh	r5,r7[0xc]
800054f4:	0a 98       	mov	r8,r5
800054f6:	ab b8       	sbr	r8,0xb
800054f8:	e2 15 00 80 	andl	r5,0x80,COH
800054fc:	ae 68       	st.h	r7[0xc],r8
800054fe:	30 04       	mov	r4,0
80005500:	e0 68 04 00 	mov	r8,1024
80005504:	f9 b5 01 40 	movne	r5,64
80005508:	f0 05 17 00 	moveq	r5,r8
8000550c:	c1 c8       	rjmp	80005544 <__smakebuf_r+0x70>
8000550e:	40 18       	lddsp	r8,sp[0x4]
80005510:	e2 18 f0 00 	andl	r8,0xf000,COH
80005514:	e0 48 20 00 	cp.w	r8,8192
80005518:	5f 04       	sreq	r4
8000551a:	e0 48 80 00 	cp.w	r8,32768
8000551e:	c0 e1       	brne	8000553a <__smakebuf_r+0x66>
80005520:	6e b9       	ld.w	r9,r7[0x2c]
80005522:	fe c8 03 c2 	sub	r8,pc,962
80005526:	10 39       	cp.w	r9,r8
80005528:	c0 91       	brne	8000553a <__smakebuf_r+0x66>
8000552a:	8e 68       	ld.sh	r8,r7[0xc]
8000552c:	e0 65 04 00 	mov	r5,1024
80005530:	ab a8       	sbr	r8,0xa
80005532:	ef 45 00 50 	st.w	r7[80],r5
80005536:	ae 68       	st.h	r7[0xc],r8
80005538:	c0 68       	rjmp	80005544 <__smakebuf_r+0x70>
8000553a:	8e 68       	ld.sh	r8,r7[0xc]
8000553c:	e0 65 04 00 	mov	r5,1024
80005540:	ab b8       	sbr	r8,0xb
80005542:	ae 68       	st.h	r7[0xc],r8
80005544:	0a 9b       	mov	r11,r5
80005546:	0c 9c       	mov	r12,r6
80005548:	fe b0 fa 50 	rcall	800049e8 <_malloc_r>
8000554c:	8e 68       	ld.sh	r8,r7[0xc]
8000554e:	c0 d1       	brne	80005568 <__smakebuf_r+0x94>
80005550:	ed b8 00 09 	bld	r8,0x9
80005554:	c1 a0       	breq	80005588 <__smakebuf_r+0xb4>
80005556:	a1 b8       	sbr	r8,0x1
80005558:	ae 68       	st.h	r7[0xc],r8
8000555a:	ee c8 ff b9 	sub	r8,r7,-71
8000555e:	8f 48       	st.w	r7[0x10],r8
80005560:	8f 08       	st.w	r7[0x0],r8
80005562:	30 18       	mov	r8,1
80005564:	8f 58       	st.w	r7[0x14],r8
80005566:	c1 18       	rjmp	80005588 <__smakebuf_r+0xb4>
80005568:	a7 b8       	sbr	r8,0x7
8000556a:	8f 4c       	st.w	r7[0x10],r12
8000556c:	ae 68       	st.h	r7[0xc],r8
8000556e:	8f 55       	st.w	r7[0x14],r5
80005570:	fe c8 11 f0 	sub	r8,pc,4592
80005574:	8f 0c       	st.w	r7[0x0],r12
80005576:	8d a8       	st.w	r6[0x28],r8
80005578:	58 04       	cp.w	r4,0
8000557a:	c0 70       	breq	80005588 <__smakebuf_r+0xb4>
8000557c:	8e 7c       	ld.sh	r12,r7[0xe]
8000557e:	c3 de       	rcall	800051f8 <isatty>
80005580:	c0 40       	breq	80005588 <__smakebuf_r+0xb4>
80005582:	8e 68       	ld.sh	r8,r7[0xc]
80005584:	a1 a8       	sbr	r8,0x0
80005586:	ae 68       	st.h	r7[0xc],r8
80005588:	2f 1d       	sub	sp,-60
8000558a:	d8 22       	popm	r4-r7,pc

8000558c <_read_r>:
8000558c:	d4 21       	pushm	r4-r7,lr
8000558e:	16 98       	mov	r8,r11
80005590:	18 97       	mov	r7,r12
80005592:	10 9c       	mov	r12,r8
80005594:	30 08       	mov	r8,0
80005596:	14 9b       	mov	r11,r10
80005598:	48 66       	lddpc	r6,800055b0 <_read_r+0x24>
8000559a:	12 9a       	mov	r10,r9
8000559c:	8d 08       	st.w	r6[0x0],r8
8000559e:	fe b0 f2 57 	rcall	80003a4c <_read>
800055a2:	5b fc       	cp.w	r12,-1
800055a4:	c0 51       	brne	800055ae <_read_r+0x22>
800055a6:	6c 08       	ld.w	r8,r6[0x0]
800055a8:	58 08       	cp.w	r8,0
800055aa:	ef f8 1a 03 	st.wne	r7[0xc],r8
800055ae:	d8 22       	popm	r4-r7,pc
800055b0:	00 00       	add	r0,r0
800055b2:	0c c4       	st.b	r6++,r4

800055b4 <_fstat_r>:
800055b4:	d4 21       	pushm	r4-r7,lr
800055b6:	16 98       	mov	r8,r11
800055b8:	18 97       	mov	r7,r12
800055ba:	10 9c       	mov	r12,r8
800055bc:	30 08       	mov	r8,0
800055be:	48 66       	lddpc	r6,800055d4 <_fstat_r+0x20>
800055c0:	14 9b       	mov	r11,r10
800055c2:	8d 08       	st.w	r6[0x0],r8
800055c4:	c3 2e       	rcall	80005228 <_fstat>
800055c6:	5b fc       	cp.w	r12,-1
800055c8:	c0 51       	brne	800055d2 <_fstat_r+0x1e>
800055ca:	6c 08       	ld.w	r8,r6[0x0]
800055cc:	58 08       	cp.w	r8,0
800055ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800055d2:	d8 22       	popm	r4-r7,pc
800055d4:	00 00       	add	r0,r0
800055d6:	0c c4       	st.b	r6++,r4

Disassembly of section .exception:

80005600 <_evba>:
80005600:	c0 08       	rjmp	80005600 <_evba>
	...

80005604 <_handle_TLB_Multiple_Hit>:
80005604:	c0 08       	rjmp	80005604 <_handle_TLB_Multiple_Hit>
	...

80005608 <_handle_Bus_Error_Data_Fetch>:
80005608:	c0 08       	rjmp	80005608 <_handle_Bus_Error_Data_Fetch>
	...

8000560c <_handle_Bus_Error_Instruction_Fetch>:
8000560c:	c0 08       	rjmp	8000560c <_handle_Bus_Error_Instruction_Fetch>
	...

80005610 <_handle_NMI>:
80005610:	c0 08       	rjmp	80005610 <_handle_NMI>
	...

80005614 <_handle_Instruction_Address>:
80005614:	c0 08       	rjmp	80005614 <_handle_Instruction_Address>
	...

80005618 <_handle_ITLB_Protection>:
80005618:	c0 08       	rjmp	80005618 <_handle_ITLB_Protection>
	...

8000561c <_handle_Breakpoint>:
8000561c:	c0 08       	rjmp	8000561c <_handle_Breakpoint>
	...

80005620 <_handle_Illegal_Opcode>:
80005620:	c0 08       	rjmp	80005620 <_handle_Illegal_Opcode>
	...

80005624 <_handle_Unimplemented_Instruction>:
80005624:	c0 08       	rjmp	80005624 <_handle_Unimplemented_Instruction>
	...

80005628 <_handle_Privilege_Violation>:
80005628:	c0 08       	rjmp	80005628 <_handle_Privilege_Violation>
	...

8000562c <_handle_Floating_Point>:
8000562c:	c0 08       	rjmp	8000562c <_handle_Floating_Point>
	...

80005630 <_handle_Coprocessor_Absent>:
80005630:	c0 08       	rjmp	80005630 <_handle_Coprocessor_Absent>
	...

80005634 <_handle_Data_Address_Read>:
80005634:	c0 08       	rjmp	80005634 <_handle_Data_Address_Read>
	...

80005638 <_handle_Data_Address_Write>:
80005638:	c0 08       	rjmp	80005638 <_handle_Data_Address_Write>
	...

8000563c <_handle_DTLB_Protection_Read>:
8000563c:	c0 08       	rjmp	8000563c <_handle_DTLB_Protection_Read>
	...

80005640 <_handle_DTLB_Protection_Write>:
80005640:	c0 08       	rjmp	80005640 <_handle_DTLB_Protection_Write>
	...

80005644 <_handle_DTLB_Modified>:
80005644:	c0 08       	rjmp	80005644 <_handle_DTLB_Modified>
	...

80005650 <_handle_ITLB_Miss>:
80005650:	c0 08       	rjmp	80005650 <_handle_ITLB_Miss>
	...

80005660 <_handle_DTLB_Miss_Read>:
80005660:	c0 08       	rjmp	80005660 <_handle_DTLB_Miss_Read>
	...

80005670 <_handle_DTLB_Miss_Write>:
80005670:	c0 08       	rjmp	80005670 <_handle_DTLB_Miss_Write>
	...

80005700 <_handle_Supervisor_Call>:
80005700:	c0 08       	rjmp	80005700 <_handle_Supervisor_Call>
80005702:	d7 03       	nop

80005704 <_int0>:
80005704:	30 0c       	mov	r12,0
80005706:	fe b0 e5 93 	rcall	8000222c <_get_interrupt_handler>
8000570a:	58 0c       	cp.w	r12,0
8000570c:	f8 0f 17 10 	movne	pc,r12
80005710:	d6 03       	rete

80005712 <_int1>:
80005712:	30 1c       	mov	r12,1
80005714:	fe b0 e5 8c 	rcall	8000222c <_get_interrupt_handler>
80005718:	58 0c       	cp.w	r12,0
8000571a:	f8 0f 17 10 	movne	pc,r12
8000571e:	d6 03       	rete

80005720 <_int2>:
80005720:	30 2c       	mov	r12,2
80005722:	fe b0 e5 85 	rcall	8000222c <_get_interrupt_handler>
80005726:	58 0c       	cp.w	r12,0
80005728:	f8 0f 17 10 	movne	pc,r12
8000572c:	d6 03       	rete

8000572e <_int3>:
8000572e:	30 3c       	mov	r12,3
80005730:	fe b0 e5 7e 	rcall	8000222c <_get_interrupt_handler>
80005734:	58 0c       	cp.w	r12,0
80005736:	f8 0f 17 10 	movne	pc,r12
8000573a:	d6 03       	rete

8000573c <ipr_val>:
8000573c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000574c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000575c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000576c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000577c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000578c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000579c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800057ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800057bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800057cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800057dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800057ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800057fc:	d7 03 d7 03                                         ....
