
AVR32 Template.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000006e4  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002800  80002800  00002c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000f0  80002a00  80002a00  00002e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .bss          00000118  00000008  00000008  00000000  2**2
                  ALLOC
  7 .heap         0000eee0  00000120  00000120  00000000  2**0
                  ALLOC
  8 .comment      00000030  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000448  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000ca7  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000053f0  00000000  00000000  0000400f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000ff5  00000000  00000000  000093ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004ece  00000000  00000000  0000a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b70  00000000  00000000  0000f2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001c95  00000000  00000000  0000fe34  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001e7b  00000000  00000000  00011ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00793412  00000000  00000000  00013944  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 00000708  00000000  00000000  007a6d56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf fd 9c 	sub	pc,pc,-612

Disassembly of section .text:

80002004 <board_init>:
#endif



void board_init (void)
{
80002004:	d4 01       	pushm	lr
    gpio_configure_pin (LED0_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002006:	30 3b       	mov	r11,3
80002008:	32 3c       	mov	r12,35
8000200a:	c2 3c       	rcall	80002050 <gpio_configure_pin>
8000200c:	30 3b       	mov	r11,3
    gpio_configure_pin (LED1_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	34 9c       	mov	r12,73
80002010:	c2 0c       	rcall	80002050 <gpio_configure_pin>
80002012:	30 3b       	mov	r11,3
80002014:	32 2c       	mov	r12,34
    gpio_configure_pin (LED2_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	c1 dc       	rcall	80002050 <gpio_configure_pin>
80002018:	30 3b       	mov	r11,3
8000201a:	32 6c       	mov	r12,38
8000201c:	c1 ac       	rcall	80002050 <gpio_configure_pin>
    gpio_configure_pin (LED3_GPIO, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 4b       	mov	r11,4
80002020:	32 1c       	mov	r12,33
80002022:	c1 7c       	rcall	80002050 <gpio_configure_pin>
80002024:	d8 02       	popm	pc

    gpio_configure_pin (GPIO_PUSH_BUTTON_0, (GPIO_DIR_INPUT | GPIO_PULL_UP));
80002026:	d7 03       	nop

80002028 <flashc_set_bus_freq>:
}


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80002028:	e0 68 50 ff 	mov	r8,20735
8000202c:	ea 18 02 25 	orh	r8,0x225
80002030:	10 3c       	cp.w	r12,r8
80002032:	e0 88 00 07 	brls	80002040 <flashc_set_bus_freq+0x18>
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002036:	fe 68 14 00 	mov	r8,-125952
  u_avr32_flashc_fcr.FCR.fws = wait_state;
8000203a:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8000203c:	70 09       	ld.w	r9,r8[0x0]
8000203e:	c0 58       	rjmp	80002048 <flashc_set_bus_freq+0x20>
80002040:	fe 68 14 00 	mov	r8,-125952
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002044:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002046:	70 09       	ld.w	r9,r8[0x0]
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002048:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000204c:	91 09       	st.w	r8[0x0],r9
8000204e:	5e fc       	retal	r12

80002050 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002050:	f8 08 16 05 	lsr	r8,r12,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002054:	16 9a       	mov	r10,r11

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002056:	a9 68       	lsl	r8,0x8
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002058:	e2 1a 00 04 	andl	r10,0x4,COH

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
8000205c:	e0 28 f0 00 	sub	r8,61440
80002060:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002064:	58 0a       	cp.w	r10,0
80002066:	c0 70       	breq	80002074 <gpio_configure_pin+0x24>
            gpio_port->puers = 1 << (pin & 0x1F);
80002068:	30 1a       	mov	r10,1
8000206a:	f4 09 09 49 	lsl	r9,r10,r9
8000206e:	f1 49 00 74 	st.w	r8[116],r9
80002072:	c0 68       	rjmp	8000207e <gpio_configure_pin+0x2e>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80002074:	30 1a       	mov	r10,1
80002076:	f4 09 09 49 	lsl	r9,r10,r9
8000207a:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
8000207e:	ed bb 00 07 	bld	r11,0x7
80002082:	c2 21       	brne	800020c6 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
80002084:	16 99       	mov	r9,r11
80002086:	e2 19 01 80 	andl	r9,0x180,COH
8000208a:	c0 70       	breq	80002098 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8000208c:	30 19       	mov	r9,1
8000208e:	f2 0c 09 49 	lsl	r9,r9,r12
80002092:	f1 49 00 a8 	st.w	r8[168],r9
80002096:	c0 a8       	rjmp	800020aa <gpio_configure_pin+0x5a>
                   gpio_port->imr1c = 1 << (pin & 0x1F);
            }
            else if (flags & GPIO_RISING)
80002098:	16 99       	mov	r9,r11
8000209a:	e2 19 02 80 	andl	r9,0x280,COH
8000209e:	c0 90       	breq	800020b0 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800020a0:	30 19       	mov	r9,1
800020a2:	f2 0c 09 49 	lsl	r9,r9,r12
800020a6:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800020aa:	f1 49 00 b8 	st.w	r8[184],r9
800020ae:	c0 c8       	rjmp	800020c6 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
800020b0:	16 99       	mov	r9,r11
800020b2:	e2 19 03 80 	andl	r9,0x380,COH
800020b6:	c0 80       	breq	800020c6 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800020b8:	30 19       	mov	r9,1
800020ba:	f2 0c 09 49 	lsl	r9,r9,r12
800020be:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800020c2:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800020c6:	ed bb 00 00 	bld	r11,0x0
800020ca:	c1 81       	brne	800020fa <gpio_configure_pin+0xaa>
            if (flags & GPIO_INIT_HIGH)
800020cc:	e2 1b 00 02 	andl	r11,0x2,COH
800020d0:	f3 dc c0 05 	bfextu	r9,r12,0x0,0x5
800020d4:	58 0b       	cp.w	r11,0
800020d6:	c0 70       	breq	800020e4 <gpio_configure_pin+0x94>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800020d8:	30 1a       	mov	r10,1
800020da:	f4 09 09 49 	lsl	r9,r10,r9
800020de:	f1 49 00 54 	st.w	r8[84],r9
800020e2:	c0 68       	rjmp	800020ee <gpio_configure_pin+0x9e>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
800020e4:	30 1a       	mov	r10,1
800020e6:	f4 09 09 49 	lsl	r9,r10,r9
800020ea:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
800020ee:	30 19       	mov	r9,1
800020f0:	f2 0c 09 49 	lsl	r9,r9,r12
800020f4:	f1 49 00 44 	st.w	r8[68],r9
800020f8:	c0 68       	rjmp	80002104 <gpio_configure_pin+0xb4>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800020fa:	30 19       	mov	r9,1
800020fc:	f2 0c 09 49 	lsl	r9,r9,r12
80002100:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002104:	30 19       	mov	r9,1
80002106:	f2 0c 09 4c 	lsl	r12,r9,r12
8000210a:	91 1c       	st.w	r8[0x4],r12
}
8000210c:	5e fc       	retal	r12

8000210e <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000210e:	f8 08 16 05 	lsr	r8,r12,0x5
80002112:	a9 68       	lsl	r8,0x8
80002114:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002118:	71 88       	ld.w	r8,r8[0x60]
8000211a:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000211e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002122:	5e fc       	retal	r12

80002124 <gpio_set_pin_high>:
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002124:	30 18       	mov	r8,1
80002126:	f0 0c 09 48 	lsl	r8,r8,r12
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}

void gpio_set_pin_high(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000212a:	a5 9c       	lsr	r12,0x5
8000212c:	a9 6c       	lsl	r12,0x8
8000212e:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80002132:	f9 48 00 54 	st.w	r12[84],r8
}
80002136:	5e fc       	retal	r12

80002138 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002138:	30 18       	mov	r8,1
8000213a:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_set_pin_low(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000213e:	a5 9c       	lsr	r12,0x5
80002140:	a9 6c       	lsl	r12,0x8
80002142:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80002146:	f9 48 00 58 	st.w	r12[88],r8
}
8000214a:	5e fc       	retal	r12

8000214c <gpio_enable_pin_interrupt>:
int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
8000214c:	30 1a       	mov	r10,1
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
8000214e:	f8 08 16 05 	lsr	r8,r12,0x5

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80002152:	f4 0c 09 49 	lsl	r9,r10,r12
}


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80002156:	a9 68       	lsl	r8,0x8
80002158:	e0 28 f0 00 	sub	r8,61440

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
8000215c:	f1 49 00 c4 	st.w	r8[196],r9
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
  
  // Configure the edge detector.
  switch (mode)
80002160:	14 3b       	cp.w	r11,r10
80002162:	c0 80       	breq	80002172 <gpio_enable_pin_interrupt+0x26>
80002164:	c0 43       	brcs	8000216c <gpio_enable_pin_interrupt+0x20>
80002166:	58 2b       	cp.w	r11,2
80002168:	c0 f1       	brne	80002186 <gpio_enable_pin_interrupt+0x3a>
8000216a:	c0 98       	rjmp	8000217c <gpio_enable_pin_interrupt+0x30>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
8000216c:	f1 49 00 a8 	st.w	r8[168],r9
80002170:	c0 38       	rjmp	80002176 <gpio_enable_pin_interrupt+0x2a>
    gpio_port->imr1c = 1 << (pin & 0x1F);
    break;

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
80002172:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80002176:	f1 49 00 b8 	st.w	r8[184],r9
8000217a:	c0 78       	rjmp	80002188 <gpio_enable_pin_interrupt+0x3c>
    break;

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
8000217c:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
80002180:	f1 49 00 b4 	st.w	r8[180],r9
80002184:	c0 28       	rjmp	80002188 <gpio_enable_pin_interrupt+0x3c>
80002186:	5e fa       	retal	r10
  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
    return(GPIO_INVALID_ARGUMENT);

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80002188:	f1 49 00 94 	st.w	r8[148],r9
8000218c:	5e fd       	retal	0

8000218e <gpio_get_pin_interrupt_flag>:
}


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000218e:	f8 08 16 05 	lsr	r8,r12,0x5
80002192:	a9 68       	lsl	r8,0x8
80002194:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80002198:	f0 f8 00 d0 	ld.w	r8,r8[208]
8000219c:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800021a0:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800021a4:	5e fc       	retal	r12

800021a6 <gpio_clear_pin_interrupt_flag>:
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800021a6:	30 18       	mov	r8,1
800021a8:	f0 0c 09 48 	lsl	r8,r8,r12
}


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800021ac:	a5 9c       	lsr	r12,0x5
800021ae:	a9 6c       	lsl	r12,0x8
800021b0:	e0 2c f0 00 	sub	r12,61440
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
800021b4:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
800021b8:	5e fc       	retal	r12

800021ba <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800021ba:	c0 08       	rjmp	800021ba <_unhandled_interrupt>

800021bc <INTC_register_interrupt>:
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
800021bc:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
800021c0:	48 98       	lddpc	r8,800021e4 <INTC_register_interrupt+0x28>


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800021c2:	a5 9b       	lsr	r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
800021c4:	f0 0b 00 38 	add	r8,r8,r11<<0x3
800021c8:	70 18       	ld.w	r8,r8[0x4]
800021ca:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
800021ce:	fe c8 f8 92 	sub	r8,pc,-1902
800021d2:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800021d6:	f0 0a 03 29 	ld.w	r9,r8[r10<<0x2]
800021da:	fe 78 08 00 	mov	r8,-63488
800021de:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
}
800021e2:	5e fc       	retal	r12
800021e4:	80 00       	ld.sh	r0,r0[0x0]
800021e6:	2a 00       	sub	r0,-96

800021e8 <INTC_init_interrupts>:
800021e8:	d4 21       	pushm	r4-r7,lr
800021ea:	fe c8 f9 ea 	sub	r8,pc,-1558
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
800021ee:	e3 b8 00 01 	mtsr	0x4,r8
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800021f2:	fe c8 f8 b6 	sub	r8,pc,-1866
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800021f6:	48 d9       	lddpc	r9,80002228 <INTC_init_interrupts+0x40>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
800021f8:	70 0e       	ld.w	lr,r8[0x0]
800021fa:	fe cc 00 40 	sub	r12,pc,64
800021fe:	30 08       	mov	r8,0
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002200:	fe 7b 08 00 	mov	r11,-63488
80002204:	c0 e8       	rjmp	80002220 <INTC_init_interrupts+0x38>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002206:	72 16       	ld.w	r6,r9[0x4]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002208:	ec 0a 00 26 	add	r6,r6,r10<<0x2

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000220c:	2f fa       	sub	r10,-1
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
8000220e:	8d 0c       	st.w	r6[0x0],r12
80002210:	0e 3a       	cp.w	r10,r7
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002212:	cf a3       	brcs	80002206 <INTC_init_interrupts+0x1e>
80002214:	f6 08 09 2e 	st.w	r11[r8<<0x2],lr
80002218:	2f 89       	sub	r9,-8
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000221a:	2f f8       	sub	r8,-1
8000221c:	59 e8       	cp.w	r8,30
8000221e:	c0 40       	breq	80002226 <INTC_init_interrupts+0x3e>
80002220:	72 07       	ld.w	r7,r9[0x0]
80002222:	30 0a       	mov	r10,0
80002224:	cf 6b       	rjmp	80002210 <INTC_init_interrupts+0x28>
80002226:	d8 22       	popm	r4-r7,pc
80002228:	80 00       	ld.sh	r0,r0[0x0]
8000222a:	2a 00       	sub	r0,-96

8000222c <_get_interrupt_handler>:
8000222c:	e0 68 00 83 	mov	r8,131
80002230:	fe 79 08 00 	mov	r9,-63488
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002234:	f0 0c 01 0c 	sub	r12,r8,r12
80002238:	f2 0c 03 28 	ld.w	r8,r9[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
8000223c:	f0 ca ff c0 	sub	r10,r8,-64
80002240:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80002244:	58 0c       	cp.w	r12,0
80002246:	5e 0c       	reteq	r12
80002248:	48 69       	lddpc	r9,80002260 <_get_interrupt_handler+0x34>
8000224a:	f8 0c 12 00 	clz	r12,r12
8000224e:	f2 08 00 38 	add	r8,r9,r8<<0x3
80002252:	f8 0c 11 1f 	rsub	r12,r12,31
80002256:	70 18       	ld.w	r8,r8[0x4]
80002258:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
}
8000225c:	5e fc       	retal	r12
8000225e:	d7 03       	nop
80002260:	80 00       	ld.sh	r0,r0[0x0]
80002262:	2a 00       	sub	r0,-96

80002264 <_stext>:
80002264:	48 dd       	lddpc	sp,80002298 <udata_clear_loop_end+0x4>
80002266:	fe c0 fa 66 	sub	r0,pc,-1434
8000226a:	e3 b0 00 01 	mtsr	0x4,r0
8000226e:	d5 53       	csrf	0x15
80002270:	48 b0       	lddpc	r0,8000229c <udata_clear_loop_end+0x8>
80002272:	48 c1       	lddpc	r1,800022a0 <udata_clear_loop_end+0xc>
80002274:	02 30       	cp.w	r0,r1
80002276:	c0 62       	brcc	80002282 <idata_load_loop_end>
80002278:	48 b2       	lddpc	r2,800022a4 <udata_clear_loop_end+0x10>

8000227a <idata_load_loop>:
8000227a:	a5 05       	ld.d	r4,r2++
8000227c:	a1 24       	st.d	r0++,r4
8000227e:	02 30       	cp.w	r0,r1
80002280:	cf d3       	brcs	8000227a <idata_load_loop>

80002282 <idata_load_loop_end>:
80002282:	48 a0       	lddpc	r0,800022a8 <udata_clear_loop_end+0x14>
80002284:	48 a1       	lddpc	r1,800022ac <udata_clear_loop_end+0x18>
80002286:	02 30       	cp.w	r0,r1
80002288:	c0 62       	brcc	80002294 <udata_clear_loop_end>
8000228a:	30 02       	mov	r2,0
8000228c:	30 03       	mov	r3,0

8000228e <udata_clear_loop>:
8000228e:	a1 22       	st.d	r0++,r2
80002290:	02 30       	cp.w	r0,r1
80002292:	cf e3       	brcs	8000228e <udata_clear_loop>

80002294 <udata_clear_loop_end>:
80002294:	fe cf fe 64 	sub	pc,pc,-412
80002298:	00 01       	add	r1,r0
8000229a:	00 00       	add	r0,r0
8000229c:	00 00       	add	r0,r0
8000229e:	00 08       	add	r8,r0
800022a0:	00 00       	add	r0,r0
800022a2:	00 08       	add	r8,r0
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	2a f0       	sub	r0,-81
800022a8:	00 00       	add	r0,r0
800022aa:	00 08       	add	r8,r0
800022ac:	00 00       	add	r0,r0
800022ae:	01 20       	ld.uh	r0,r0++

800022b0 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
800022b0:	d4 21       	pushm	r4-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800022b2:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800022b6:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800022b8:	fe 78 0c 00 	mov	r8,-62464
800022bc:	e0 69 03 07 	mov	r9,775
800022c0:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800022c2:	70 09       	ld.w	r9,r8[0x0]
800022c4:	a3 a9       	sbr	r9,0x2
800022c6:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800022c8:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
800022cc:	71 59       	ld.w	r9,r8[0x54]
800022ce:	fe 77 0c 00 	mov	r7,-62464
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800022d2:	e2 19 00 80 	andl	r9,0x80,COH
800022d6:	cf b0       	breq	800022cc <sysclk_init+0x1c>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(0);
		osc_wait_ready(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
800022d8:	e0 6c 1b 00 	mov	r12,6912
800022dc:	ea 1c 00 b7 	orh	r12,0xb7
800022e0:	ca 4e       	rcall	80002028 <flashc_set_bus_freq>
800022e2:	e1 b9 00 00 	mfsr	r9,0x0

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800022e6:	d3 03       	ssrf	0x10
	cpu_irq_disable();
800022e8:	6e 08       	ld.w	r8,r7[0x0]
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
800022ea:	e0 18 ff fc 	andl	r8,0xfffc
800022ee:	a1 a8       	sbr	r8,0x0
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
800022f0:	8f 08       	st.w	r7[0x0],r8
	AVR32_PM.mcctrl = mcctrl;
800022f2:	e3 b9 00 00 	mtsr	0x0,r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800022f6:	e0 78 00 02 	mov	r8,65538
		break;
	}

	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
800022fa:	8f 28       	st.w	r7[0x8],r8
800022fc:	30 b8       	mov	r8,11
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
800022fe:	ea 18 00 18 	orh	r8,0x18
80002302:	8f 48       	st.w	r7[0x10],r8
80002304:	30 08       	mov	r8,0
#endif
#if defined(CONFIG_SYSCLK_INIT_PBBMASK)
	AVR32_PM.pbbmask = SYSCLK_INIT_MINIMAL_PBBMASK | CONFIG_SYSCLK_INIT_PBBMASK;
80002306:	8f 58       	st.w	r7[0x14],r8
80002308:	e0 68 0e 03 	mov	r8,3587
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
8000230c:	8f 38       	st.w	r7[0xc],r8
8000230e:	d8 22       	popm	r4-r7,pc

80002310 <busy_delay_init>:

//_____ D E C L A R A T I O N S ____________________________________________

void busy_delay_init(unsigned long fcpu_hz)
{
    s_fcpu_hz = fcpu_hz;
80002310:	48 28       	lddpc	r8,80002318 <busy_delay_init+0x8>
80002312:	91 0c       	st.w	r8[0x0],r12
}
80002314:	5e fc       	retal	r12
80002316:	d7 03       	nop
80002318:	00 00       	add	r0,r0
8000231a:	01 14       	ld.sh	r4,r0++

8000231c <busy_delay_us>:
{
    cpu_delay_ms(delay, s_fcpu_hz);
}

void busy_delay_us(unsigned long delay)
{
8000231c:	d4 01       	pushm	lr
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
8000231e:	49 18       	lddpc	r8,80002360 <busy_delay_us+0x44>
80002320:	70 0b       	ld.w	r11,r8[0x0]
80002322:	ee 78 42 3f 	mov	r8,999999
80002326:	f8 0b 06 4a 	mulu.d	r10,r12,r11
8000232a:	30 09       	mov	r9,0
8000232c:	10 0a       	add	r10,r8
8000232e:	f6 09 00 4b 	adc	r11,r11,r9
80002332:	ee 78 42 40 	mov	r8,1000000
80002336:	30 09       	mov	r9,0
80002338:	ca 6c       	rcall	80002484 <__avr32_udiv64>
8000233a:	e1 b8 00 42 	mfsr	r8,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000233e:	f0 0a 00 0a 	add	r10,r8,r10
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002342:	e1 b9 00 42 	mfsr	r9,0x108
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002346:	14 38       	cp.w	r8,r10
  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002348:	e0 88 00 05 	brls	80002352 <busy_delay_us+0x36>
8000234c:	10 39       	cp.w	r9,r8
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000234e:	cf a2       	brcc	80002342 <busy_delay_us+0x26>
80002350:	c0 38       	rjmp	80002356 <busy_delay_us+0x3a>
80002352:	10 39       	cp.w	r9,r8
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002354:	c0 43       	brcs	8000235c <busy_delay_us+0x40>
80002356:	14 39       	cp.w	r9,r10
80002358:	fe 98 ff f5 	brls	80002342 <busy_delay_us+0x26>
8000235c:	d8 02       	popm	pc
8000235e:	d7 03       	nop
80002360:	00 00       	add	r0,r0
80002362:	01 14       	ld.sh	r4,r0++

80002364 <check_interrupt_flags>:
		interrupt_flags |= 0b100;
		gpio_clear_pin_interrupt_flag(TEST_C);
	}
}

void check_interrupt_flags(){
80002364:	d4 01       	pushm	lr
	
	if (interrupt_flags & 0b001){
80002366:	49 c8       	lddpc	r8,800023d4 <check_interrupt_flags+0x70>
80002368:	11 88       	ld.ub	r8,r8[0x0]
8000236a:	ed b8 00 00 	bld	r8,0x0
8000236e:	c0 d1       	brne	80002388 <check_interrupt_flags+0x24>
		if (gpio_get_pin_value(TEST_A) == LOW)
80002370:	31 fc       	mov	r12,31
80002372:	cc ee       	rcall	8000210e <gpio_get_pin_value>
80002374:	c0 41       	brne	8000237c <check_interrupt_flags+0x18>
80002376:	31 ec       	mov	r12,30
			gpio_set_pin_low(RESPONSE_A);
80002378:	ce 0e       	rcall	80002138 <gpio_set_pin_low>
8000237a:	c0 38       	rjmp	80002380 <check_interrupt_flags+0x1c>
8000237c:	31 ec       	mov	r12,30
8000237e:	cd 3e       	rcall	80002124 <gpio_set_pin_high>
		else
			gpio_set_pin_high(RESPONSE_A);
80002380:	49 59       	lddpc	r9,800023d4 <check_interrupt_flags+0x70>
80002382:	13 88       	ld.ub	r8,r9[0x0]
80002384:	a1 c8       	cbr	r8,0x0
		interrupt_flags &= ~0b001;
80002386:	b2 88       	st.b	r9[0x0],r8
80002388:	49 38       	lddpc	r8,800023d4 <check_interrupt_flags+0x70>
8000238a:	11 88       	ld.ub	r8,r8[0x0]
8000238c:	ed b8 00 01 	bld	r8,0x1
	}
	if (interrupt_flags & 0b010){
80002390:	c0 f1       	brne	800023ae <check_interrupt_flags+0x4a>
80002392:	36 4c       	mov	r12,100
80002394:	cc 4f       	rcall	8000231c <busy_delay_us>
80002396:	31 dc       	mov	r12,29
		// expensive b test
		busy_delay_us(100);
80002398:	cb be       	rcall	8000210e <gpio_get_pin_value>
8000239a:	c0 41       	brne	800023a2 <check_interrupt_flags+0x3e>
8000239c:	31 cc       	mov	r12,28
		if (gpio_get_pin_value(TEST_B) == LOW)
8000239e:	cc de       	rcall	80002138 <gpio_set_pin_low>
800023a0:	c0 38       	rjmp	800023a6 <check_interrupt_flags+0x42>
800023a2:	31 cc       	mov	r12,28
800023a4:	cc 0e       	rcall	80002124 <gpio_set_pin_high>
			gpio_set_pin_low(RESPONSE_B);
800023a6:	48 c9       	lddpc	r9,800023d4 <check_interrupt_flags+0x70>
800023a8:	13 88       	ld.ub	r8,r9[0x0]
800023aa:	a1 d8       	cbr	r8,0x1
800023ac:	b2 88       	st.b	r9[0x0],r8
		else
			gpio_set_pin_high(RESPONSE_B);
800023ae:	48 a8       	lddpc	r8,800023d4 <check_interrupt_flags+0x70>
800023b0:	11 88       	ld.ub	r8,r8[0x0]
800023b2:	ed b8 00 02 	bld	r8,0x2
		interrupt_flags &= ~0b010;
800023b6:	c0 d1       	brne	800023d0 <check_interrupt_flags+0x6c>
800023b8:	31 bc       	mov	r12,27
800023ba:	ca ae       	rcall	8000210e <gpio_get_pin_value>
	}
	if (interrupt_flags & 0b100){
800023bc:	c0 41       	brne	800023c4 <check_interrupt_flags+0x60>
800023be:	32 0c       	mov	r12,32
800023c0:	cb ce       	rcall	80002138 <gpio_set_pin_low>
800023c2:	c0 38       	rjmp	800023c8 <check_interrupt_flags+0x64>
800023c4:	32 0c       	mov	r12,32
		if (gpio_get_pin_value(TEST_C) == LOW)
800023c6:	ca fe       	rcall	80002124 <gpio_set_pin_high>
800023c8:	48 39       	lddpc	r9,800023d4 <check_interrupt_flags+0x70>
800023ca:	13 88       	ld.ub	r8,r9[0x0]
800023cc:	a3 c8       	cbr	r8,0x2
			gpio_set_pin_low(RESPONSE_C);
800023ce:	b2 88       	st.b	r9[0x0],r8
800023d0:	d8 02       	popm	pc
800023d2:	d7 03       	nop
800023d4:	00 00       	add	r0,r0
		else
			gpio_set_pin_high(RESPONSE_C);
800023d6:	01 18       	ld.sh	r8,r0++

800023d8 <init>:
800023d8:	d4 01       	pushm	lr
800023da:	c6 bf       	rcall	800022b0 <sysclk_init>
		interrupt_flags &= ~0b100;
800023dc:	c1 4e       	rcall	80002004 <board_init>
800023de:	e0 6c 1b 00 	mov	r12,6912
800023e2:	ea 1c 00 b7 	orh	r12,0xb7
800023e6:	c9 5f       	rcall	80002310 <busy_delay_init>
800023e8:	30 0b       	mov	r11,0
800023ea:	31 fc       	mov	r12,31
800023ec:	c3 2e       	rcall	80002050 <gpio_configure_pin>
800023ee:	30 3b       	mov	r11,3
800023f0:	31 ec       	mov	r12,30
800023f2:	c2 fe       	rcall	80002050 <gpio_configure_pin>
800023f4:	30 0b       	mov	r11,0
800023f6:	31 dc       	mov	r12,29
800023f8:	c2 ce       	rcall	80002050 <gpio_configure_pin>
800023fa:	30 3b       	mov	r11,3
    sysclk_init();
    board_init();
    busy_delay_init(BOARD_OSC0_HZ);

	gpio_configure_pin (TEST_A, GPIO_DIR_INPUT);
	gpio_configure_pin (RESPONSE_A, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800023fc:	31 cc       	mov	r12,28
	
	gpio_configure_pin (TEST_B, GPIO_DIR_INPUT);
800023fe:	c2 9e       	rcall	80002050 <gpio_configure_pin>
80002400:	30 0b       	mov	r11,0
80002402:	31 bc       	mov	r12,27
80002404:	c2 6e       	rcall	80002050 <gpio_configure_pin>
	gpio_configure_pin (RESPONSE_B, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002406:	30 3b       	mov	r11,3
80002408:	32 0c       	mov	r12,32
8000240a:	c2 3e       	rcall	80002050 <gpio_configure_pin>
8000240c:	d3 03       	ssrf	0x10
	
	gpio_configure_pin (TEST_C, GPIO_DIR_INPUT);
8000240e:	30 0b       	mov	r11,0
80002410:	31 fc       	mov	r12,31
80002412:	c9 de       	rcall	8000214c <gpio_enable_pin_interrupt>
80002414:	30 0b       	mov	r11,0
	gpio_configure_pin (RESPONSE_C, GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002416:	31 dc       	mov	r12,29
80002418:	c9 ae       	rcall	8000214c <gpio_enable_pin_interrupt>
8000241a:	30 0b       	mov	r11,0
8000241c:	31 bc       	mov	r12,27

	cpu_irq_disable();	
8000241e:	c9 7e       	rcall	8000214c <gpio_enable_pin_interrupt>
	gpio_enable_pin_interrupt(TEST_A, GPIO_PIN_CHANGE);
80002420:	ce 4e       	rcall	800021e8 <INTC_init_interrupts>
80002422:	30 1a       	mov	r10,1
80002424:	34 3b       	mov	r11,67
80002426:	fe cc ff ea 	sub	r12,pc,-22
	gpio_enable_pin_interrupt(TEST_B, GPIO_PIN_CHANGE);
8000242a:	cc 9e       	rcall	800021bc <INTC_register_interrupt>
8000242c:	d5 03       	csrf	0x10
8000242e:	d8 02       	popm	pc

80002430 <main>:
	gpio_enable_pin_interrupt(TEST_C, GPIO_PIN_CHANGE);
80002430:	d4 01       	pushm	lr
80002432:	cd 3f       	rcall	800023d8 <init>
80002434:	30 1c       	mov	r12,1
80002436:	c7 3f       	rcall	8000231c <busy_delay_us>
    
    INTC_init_interrupts();
80002438:	c9 6f       	rcall	80002364 <check_interrupt_flags>
8000243a:	cf fb       	rjmp	80002438 <main+0x8>

8000243c <interrupt_J3_d>:
    INTC_register_interrupt(&interrupt_J3_d, AVR32_GPIO_IRQ_3, AVR32_INTC_INT1);
8000243c:	d4 01       	pushm	lr
8000243e:	31 fc       	mov	r12,31
80002440:	ca 7e       	rcall	8000218e <gpio_get_pin_interrupt_flag>
80002442:	58 1c       	cp.w	r12,1
80002444:	c0 71       	brne	80002452 <interrupt_J3_d+0x16>
    cpu_irq_enable();
80002446:	48 f9       	lddpc	r9,80002480 <interrupt_J3_d+0x44>
    #if defined(__GNUC__) && defined(__AVR32__)
        setbuf(stdout, NULL);
        setbuf(stdin,  NULL);
    #endif
	*/
}
80002448:	13 88       	ld.ub	r8,r9[0x0]
8000244a:	a1 a8       	sbr	r8,0x0
8000244c:	31 fc       	mov	r12,31
8000244e:	b2 88       	st.b	r9[0x0],r8
80002450:	ca be       	rcall	800021a6 <gpio_clear_pin_interrupt_flag>
80002452:	31 dc       	mov	r12,29
80002454:	c9 de       	rcall	8000218e <gpio_get_pin_interrupt_flag>
80002456:	58 1c       	cp.w	r12,1
80002458:	c0 71       	brne	80002466 <interrupt_J3_d+0x2a>
8000245a:	48 a9       	lddpc	r9,80002480 <interrupt_J3_d+0x44>
8000245c:	13 88       	ld.ub	r8,r9[0x0]
8000245e:	a1 b8       	sbr	r8,0x1
80002460:	31 dc       	mov	r12,29
80002462:	b2 88       	st.b	r9[0x0],r8
80002464:	ca 1e       	rcall	800021a6 <gpio_clear_pin_interrupt_flag>
80002466:	31 bc       	mov	r12,27
80002468:	c9 3e       	rcall	8000218e <gpio_get_pin_interrupt_flag>
8000246a:	58 1c       	cp.w	r12,1
		interrupt_flags |= 0b001;
		gpio_clear_pin_interrupt_flag(TEST_A);
	}
	if (gpio_get_pin_interrupt_flag(TEST_B) == 1){ 
		interrupt_flags |= 0b010;
		gpio_clear_pin_interrupt_flag(TEST_B);
8000246c:	c0 71       	brne	8000247a <interrupt_J3_d+0x3e>
	}
	if (gpio_get_pin_interrupt_flag(TEST_C) == 1){ 
8000246e:	48 59       	lddpc	r9,80002480 <interrupt_J3_d+0x44>
80002470:	13 88       	ld.ub	r8,r9[0x0]
80002472:	a3 a8       	sbr	r8,0x2
80002474:	31 bc       	mov	r12,27
80002476:	b2 88       	st.b	r9[0x0],r8
		interrupt_flags |= 0b100;
80002478:	c9 7e       	rcall	800021a6 <gpio_clear_pin_interrupt_flag>
8000247a:	d4 02       	popm	lr
8000247c:	d6 03       	rete
		gpio_clear_pin_interrupt_flag(TEST_C);
8000247e:	d7 03       	nop
	if (gpio_get_pin_interrupt_flag(TEST_B) == 1){ 
		interrupt_flags |= 0b010;
		gpio_clear_pin_interrupt_flag(TEST_B);
	}
	if (gpio_get_pin_interrupt_flag(TEST_C) == 1){ 
		interrupt_flags |= 0b100;
80002480:	00 00       	add	r0,r0
		gpio_clear_pin_interrupt_flag(TEST_C);
80002482:	01 18       	ld.sh	r8,r0++

80002484 <__avr32_udiv64>:
80002484:	d4 31       	pushm	r0-r7,lr
80002486:	1a 97       	mov	r7,sp
80002488:	20 3d       	sub	sp,12
8000248a:	10 9c       	mov	r12,r8
8000248c:	12 9e       	mov	lr,r9
8000248e:	14 93       	mov	r3,r10
80002490:	58 09       	cp.w	r9,0
80002492:	e0 81 00 bd 	brne	8000260c <__avr32_udiv64+0x188>
80002496:	16 38       	cp.w	r8,r11
80002498:	e0 88 00 40 	brls	80002518 <__avr32_udiv64+0x94>
8000249c:	f0 08 12 00 	clz	r8,r8
800024a0:	c0 d0       	breq	800024ba <__avr32_udiv64+0x36>
800024a2:	f6 08 09 4b 	lsl	r11,r11,r8
800024a6:	f0 09 11 20 	rsub	r9,r8,32
800024aa:	f8 08 09 4c 	lsl	r12,r12,r8
800024ae:	f4 09 0a 49 	lsr	r9,r10,r9
800024b2:	f4 08 09 43 	lsl	r3,r10,r8
800024b6:	f3 eb 10 0b 	or	r11,r9,r11
800024ba:	f8 0e 16 10 	lsr	lr,r12,0x10
800024be:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800024c2:	f6 0e 0d 00 	divu	r0,r11,lr
800024c6:	e6 0b 16 10 	lsr	r11,r3,0x10
800024ca:	00 99       	mov	r9,r0
800024cc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800024d0:	e0 0a 02 48 	mul	r8,r0,r10
800024d4:	10 3b       	cp.w	r11,r8
800024d6:	c0 a2       	brcc	800024ea <__avr32_udiv64+0x66>
800024d8:	20 19       	sub	r9,1
800024da:	18 0b       	add	r11,r12
800024dc:	18 3b       	cp.w	r11,r12
800024de:	c0 63       	brcs	800024ea <__avr32_udiv64+0x66>
800024e0:	10 3b       	cp.w	r11,r8
800024e2:	f7 b9 03 01 	sublo	r9,1
800024e6:	f7 dc e3 0b 	addcs	r11,r11,r12
800024ea:	f6 08 01 01 	sub	r1,r11,r8
800024ee:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800024f2:	e2 0e 0d 00 	divu	r0,r1,lr
800024f6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800024fa:	00 98       	mov	r8,r0
800024fc:	e0 0a 02 4a 	mul	r10,r0,r10
80002500:	14 33       	cp.w	r3,r10
80002502:	c0 82       	brcc	80002512 <__avr32_udiv64+0x8e>
80002504:	20 18       	sub	r8,1
80002506:	18 03       	add	r3,r12
80002508:	18 33       	cp.w	r3,r12
8000250a:	c0 43       	brcs	80002512 <__avr32_udiv64+0x8e>
8000250c:	14 33       	cp.w	r3,r10
8000250e:	f7 b8 03 01 	sublo	r8,1
80002512:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002516:	cd f8       	rjmp	800026d4 <__avr32_udiv64+0x250>
80002518:	58 08       	cp.w	r8,0
8000251a:	c0 51       	brne	80002524 <__avr32_udiv64+0xa0>
8000251c:	30 19       	mov	r9,1
8000251e:	f2 08 0d 08 	divu	r8,r9,r8
80002522:	10 9c       	mov	r12,r8
80002524:	f8 06 12 00 	clz	r6,r12
80002528:	c0 41       	brne	80002530 <__avr32_udiv64+0xac>
8000252a:	18 1b       	sub	r11,r12
8000252c:	30 19       	mov	r9,1
8000252e:	c4 08       	rjmp	800025ae <__avr32_udiv64+0x12a>
80002530:	ec 01 11 20 	rsub	r1,r6,32
80002534:	f4 01 0a 49 	lsr	r9,r10,r1
80002538:	f8 06 09 4c 	lsl	r12,r12,r6
8000253c:	f6 06 09 48 	lsl	r8,r11,r6
80002540:	f6 01 0a 41 	lsr	r1,r11,r1
80002544:	f3 e8 10 08 	or	r8,r9,r8
80002548:	f8 03 16 10 	lsr	r3,r12,0x10
8000254c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80002550:	e2 03 0d 00 	divu	r0,r1,r3
80002554:	f0 0b 16 10 	lsr	r11,r8,0x10
80002558:	00 9e       	mov	lr,r0
8000255a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000255e:	e0 05 02 49 	mul	r9,r0,r5
80002562:	12 3b       	cp.w	r11,r9
80002564:	c0 a2       	brcc	80002578 <__avr32_udiv64+0xf4>
80002566:	20 1e       	sub	lr,1
80002568:	18 0b       	add	r11,r12
8000256a:	18 3b       	cp.w	r11,r12
8000256c:	c0 63       	brcs	80002578 <__avr32_udiv64+0xf4>
8000256e:	12 3b       	cp.w	r11,r9
80002570:	f7 be 03 01 	sublo	lr,1
80002574:	f7 dc e3 0b 	addcs	r11,r11,r12
80002578:	12 1b       	sub	r11,r9
8000257a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000257e:	f6 03 0d 02 	divu	r2,r11,r3
80002582:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80002586:	04 99       	mov	r9,r2
80002588:	e4 05 02 4b 	mul	r11,r2,r5
8000258c:	16 38       	cp.w	r8,r11
8000258e:	c0 a2       	brcc	800025a2 <__avr32_udiv64+0x11e>
80002590:	20 19       	sub	r9,1
80002592:	18 08       	add	r8,r12
80002594:	18 38       	cp.w	r8,r12
80002596:	c0 63       	brcs	800025a2 <__avr32_udiv64+0x11e>
80002598:	16 38       	cp.w	r8,r11
8000259a:	f7 b9 03 01 	sublo	r9,1
8000259e:	f1 dc e3 08 	addcs	r8,r8,r12
800025a2:	f4 06 09 43 	lsl	r3,r10,r6
800025a6:	f0 0b 01 0b 	sub	r11,r8,r11
800025aa:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800025ae:	f8 06 16 10 	lsr	r6,r12,0x10
800025b2:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800025b6:	f6 06 0d 00 	divu	r0,r11,r6
800025ba:	e6 0b 16 10 	lsr	r11,r3,0x10
800025be:	00 9a       	mov	r10,r0
800025c0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800025c4:	e0 0e 02 48 	mul	r8,r0,lr
800025c8:	10 3b       	cp.w	r11,r8
800025ca:	c0 a2       	brcc	800025de <__avr32_udiv64+0x15a>
800025cc:	20 1a       	sub	r10,1
800025ce:	18 0b       	add	r11,r12
800025d0:	18 3b       	cp.w	r11,r12
800025d2:	c0 63       	brcs	800025de <__avr32_udiv64+0x15a>
800025d4:	10 3b       	cp.w	r11,r8
800025d6:	f7 ba 03 01 	sublo	r10,1
800025da:	f7 dc e3 0b 	addcs	r11,r11,r12
800025de:	f6 08 01 01 	sub	r1,r11,r8
800025e2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800025e6:	e2 06 0d 00 	divu	r0,r1,r6
800025ea:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800025ee:	00 98       	mov	r8,r0
800025f0:	e0 0e 02 4b 	mul	r11,r0,lr
800025f4:	16 33       	cp.w	r3,r11
800025f6:	c0 82       	brcc	80002606 <__avr32_udiv64+0x182>
800025f8:	20 18       	sub	r8,1
800025fa:	18 03       	add	r3,r12
800025fc:	18 33       	cp.w	r3,r12
800025fe:	c0 43       	brcs	80002606 <__avr32_udiv64+0x182>
80002600:	16 33       	cp.w	r3,r11
80002602:	f7 b8 03 01 	sublo	r8,1
80002606:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000260a:	c6 98       	rjmp	800026dc <__avr32_udiv64+0x258>
8000260c:	16 39       	cp.w	r9,r11
8000260e:	e0 8b 00 65 	brhi	800026d8 <__avr32_udiv64+0x254>
80002612:	f2 09 12 00 	clz	r9,r9
80002616:	c0 b1       	brne	8000262c <__avr32_udiv64+0x1a8>
80002618:	10 3a       	cp.w	r10,r8
8000261a:	5f 2a       	srhs	r10
8000261c:	1c 3b       	cp.w	r11,lr
8000261e:	5f b8       	srhi	r8
80002620:	10 4a       	or	r10,r8
80002622:	f2 0a 18 00 	cp.b	r10,r9
80002626:	c5 90       	breq	800026d8 <__avr32_udiv64+0x254>
80002628:	30 18       	mov	r8,1
8000262a:	c5 98       	rjmp	800026dc <__avr32_udiv64+0x258>
8000262c:	f0 09 09 46 	lsl	r6,r8,r9
80002630:	f2 03 11 20 	rsub	r3,r9,32
80002634:	fc 09 09 4e 	lsl	lr,lr,r9
80002638:	f0 03 0a 48 	lsr	r8,r8,r3
8000263c:	f6 09 09 4c 	lsl	r12,r11,r9
80002640:	f4 03 0a 42 	lsr	r2,r10,r3
80002644:	ef 46 ff f4 	st.w	r7[-12],r6
80002648:	f6 03 0a 43 	lsr	r3,r11,r3
8000264c:	18 42       	or	r2,r12
8000264e:	f1 ee 10 0c 	or	r12,r8,lr
80002652:	f8 01 16 10 	lsr	r1,r12,0x10
80002656:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000265a:	e6 01 0d 04 	divu	r4,r3,r1
8000265e:	e4 03 16 10 	lsr	r3,r2,0x10
80002662:	08 9e       	mov	lr,r4
80002664:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80002668:	e8 06 02 48 	mul	r8,r4,r6
8000266c:	10 33       	cp.w	r3,r8
8000266e:	c0 a2       	brcc	80002682 <__avr32_udiv64+0x1fe>
80002670:	20 1e       	sub	lr,1
80002672:	18 03       	add	r3,r12
80002674:	18 33       	cp.w	r3,r12
80002676:	c0 63       	brcs	80002682 <__avr32_udiv64+0x1fe>
80002678:	10 33       	cp.w	r3,r8
8000267a:	f7 be 03 01 	sublo	lr,1
8000267e:	e7 dc e3 03 	addcs	r3,r3,r12
80002682:	10 13       	sub	r3,r8
80002684:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80002688:	e6 01 0d 00 	divu	r0,r3,r1
8000268c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80002690:	00 98       	mov	r8,r0
80002692:	e0 06 02 46 	mul	r6,r0,r6
80002696:	0c 3b       	cp.w	r11,r6
80002698:	c0 a2       	brcc	800026ac <__avr32_udiv64+0x228>
8000269a:	20 18       	sub	r8,1
8000269c:	18 0b       	add	r11,r12
8000269e:	18 3b       	cp.w	r11,r12
800026a0:	c0 63       	brcs	800026ac <__avr32_udiv64+0x228>
800026a2:	0c 3b       	cp.w	r11,r6
800026a4:	f7 dc e3 0b 	addcs	r11,r11,r12
800026a8:	f7 b8 03 01 	sublo	r8,1
800026ac:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800026b0:	ee f4 ff f4 	ld.w	r4,r7[-12]
800026b4:	0c 1b       	sub	r11,r6
800026b6:	f0 04 06 42 	mulu.d	r2,r8,r4
800026ba:	06 95       	mov	r5,r3
800026bc:	16 35       	cp.w	r5,r11
800026be:	e0 8b 00 0a 	brhi	800026d2 <__avr32_udiv64+0x24e>
800026c2:	5f 0b       	sreq	r11
800026c4:	f4 09 09 49 	lsl	r9,r10,r9
800026c8:	12 32       	cp.w	r2,r9
800026ca:	5f b9       	srhi	r9
800026cc:	f7 e9 00 09 	and	r9,r11,r9
800026d0:	c0 60       	breq	800026dc <__avr32_udiv64+0x258>
800026d2:	20 18       	sub	r8,1
800026d4:	30 09       	mov	r9,0
800026d6:	c0 38       	rjmp	800026dc <__avr32_udiv64+0x258>
800026d8:	30 09       	mov	r9,0
800026da:	12 98       	mov	r8,r9
800026dc:	10 9a       	mov	r10,r8
800026de:	12 93       	mov	r3,r9
800026e0:	10 92       	mov	r2,r8
800026e2:	12 9b       	mov	r11,r9
800026e4:	2f dd       	sub	sp,-12
800026e6:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80002800 <_evba>:
80002800:	c0 08       	rjmp	80002800 <_evba>
	...

80002804 <_handle_TLB_Multiple_Hit>:
80002804:	c0 08       	rjmp	80002804 <_handle_TLB_Multiple_Hit>
	...

80002808 <_handle_Bus_Error_Data_Fetch>:
80002808:	c0 08       	rjmp	80002808 <_handle_Bus_Error_Data_Fetch>
	...

8000280c <_handle_Bus_Error_Instruction_Fetch>:
8000280c:	c0 08       	rjmp	8000280c <_handle_Bus_Error_Instruction_Fetch>
	...

80002810 <_handle_NMI>:
80002810:	c0 08       	rjmp	80002810 <_handle_NMI>
	...

80002814 <_handle_Instruction_Address>:
80002814:	c0 08       	rjmp	80002814 <_handle_Instruction_Address>
	...

80002818 <_handle_ITLB_Protection>:
80002818:	c0 08       	rjmp	80002818 <_handle_ITLB_Protection>
	...

8000281c <_handle_Breakpoint>:
8000281c:	c0 08       	rjmp	8000281c <_handle_Breakpoint>
	...

80002820 <_handle_Illegal_Opcode>:
80002820:	c0 08       	rjmp	80002820 <_handle_Illegal_Opcode>
	...

80002824 <_handle_Unimplemented_Instruction>:
80002824:	c0 08       	rjmp	80002824 <_handle_Unimplemented_Instruction>
	...

80002828 <_handle_Privilege_Violation>:
80002828:	c0 08       	rjmp	80002828 <_handle_Privilege_Violation>
	...

8000282c <_handle_Floating_Point>:
8000282c:	c0 08       	rjmp	8000282c <_handle_Floating_Point>
	...

80002830 <_handle_Coprocessor_Absent>:
80002830:	c0 08       	rjmp	80002830 <_handle_Coprocessor_Absent>
	...

80002834 <_handle_Data_Address_Read>:
80002834:	c0 08       	rjmp	80002834 <_handle_Data_Address_Read>
	...

80002838 <_handle_Data_Address_Write>:
80002838:	c0 08       	rjmp	80002838 <_handle_Data_Address_Write>
	...

8000283c <_handle_DTLB_Protection_Read>:
8000283c:	c0 08       	rjmp	8000283c <_handle_DTLB_Protection_Read>
	...

80002840 <_handle_DTLB_Protection_Write>:
80002840:	c0 08       	rjmp	80002840 <_handle_DTLB_Protection_Write>
	...

80002844 <_handle_DTLB_Modified>:
80002844:	c0 08       	rjmp	80002844 <_handle_DTLB_Modified>
	...

80002850 <_handle_ITLB_Miss>:
80002850:	c0 08       	rjmp	80002850 <_handle_ITLB_Miss>
	...

80002860 <_handle_DTLB_Miss_Read>:
80002860:	c0 08       	rjmp	80002860 <_handle_DTLB_Miss_Read>
	...

80002870 <_handle_DTLB_Miss_Write>:
80002870:	c0 08       	rjmp	80002870 <_handle_DTLB_Miss_Write>
	...

80002900 <_handle_Supervisor_Call>:
80002900:	c0 08       	rjmp	80002900 <_handle_Supervisor_Call>
80002902:	d7 03       	nop

80002904 <_int0>:
80002904:	30 0c       	mov	r12,0
80002906:	fe b0 fc 93 	rcall	8000222c <_get_interrupt_handler>
8000290a:	58 0c       	cp.w	r12,0
8000290c:	f8 0f 17 10 	movne	pc,r12
80002910:	d6 03       	rete

80002912 <_int1>:
80002912:	30 1c       	mov	r12,1
80002914:	fe b0 fc 8c 	rcall	8000222c <_get_interrupt_handler>
80002918:	58 0c       	cp.w	r12,0
8000291a:	f8 0f 17 10 	movne	pc,r12
8000291e:	d6 03       	rete

80002920 <_int2>:
80002920:	30 2c       	mov	r12,2
80002922:	fe b0 fc 85 	rcall	8000222c <_get_interrupt_handler>
80002926:	58 0c       	cp.w	r12,0
80002928:	f8 0f 17 10 	movne	pc,r12
8000292c:	d6 03       	rete

8000292e <_int3>:
8000292e:	30 3c       	mov	r12,3
80002930:	fe b0 fc 7e 	rcall	8000222c <_get_interrupt_handler>
80002934:	58 0c       	cp.w	r12,0
80002936:	f8 0f 17 10 	movne	pc,r12
8000293a:	d6 03       	rete

8000293c <ipr_val>:
8000293c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000294c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000295c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000296c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000297c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000298c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8000299c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800029ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800029bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800029cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800029dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800029ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800029fc:	d7 03 d7 03                                         ....
